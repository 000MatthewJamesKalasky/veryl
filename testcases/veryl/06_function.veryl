module Module06 {
    local ParamX: u32 = 1;

    // function without parameter
    function FuncA (
        a: input  logic<ParamX>,
        b: output logic<ParamX>,
        c: ref    logic<ParamX>,
    ) -> logic<ParamX> {
        let d: u32 = 1;
        b = a + 1 + d;
        c = a / 1;
        return a + 2;
    }

    // function with parameter
    function FuncB #(
        param ParamX: u32 = 1,
    ) (
        a: input  logic<ParamX>,
        b: output logic<ParamX>,
        c: ref    logic<ParamX>,
    ) -> logic<ParamX> {
        b = a + 1;
        c = a / 1;
        return a + 2;
    }

    // void function
    function FuncC (
        a: input logic<ParamX>,
        c: ref   logic<ParamX>,
    ) {
        c = a / 1;
    }

    let a: logic<ParamX> = 1;
    let b: logic<ParamX> = 1;
    let c: logic<ParamX> = 1;
    var d: logic<ParamX>;

    // function call
    assign d = FuncA(a, b, c);

    // function call with parameter
    //assign a = FuncB #(ParamX: 1) (a, b, c);

    // void function call
    initial {
        FuncC(a, c);
    }

    // system function call
    assign d = $clog2(a);
}
