%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*   0 */ BasedBinary: /'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/;
/*   1 */ BasedOctal: /'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/;
/*   2 */ BasedDecimal: /'d[0-9]+(?:_[0-9]+)*/;
/*   3 */ BasedHex: /'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/;
/*   4 */ BaseLess: /[0-9]+(?:_[0-9]+)*/;
/*   5 */ Plus: '+';
/*   6 */ Minus: '-';
/*   7 */ Mul: '*';
/*   8 */ Div: '/';
/*   9 */ Colon: ':';
/*  10 */ SemiColon: ';';
/*  11 */ Comma: ',';
/*  12 */ LParen: '(';
/*  13 */ RParen: ')';
/*  14 */ LBracket: '[';
/*  15 */ RBracket: ']';
/*  16 */ LBrace: '{';
/*  17 */ RBrace: '}';
/*  18 */ Assignment: '=';
/*  19 */ Sharp: '#';
/*  20 */ Logic: 'logic';
/*  21 */ Bit: 'bit';
/*  22 */ AlwaysFF: 'always_ff';
/*  23 */ AlwaysComb: 'always_comb';
/*  24 */ Posedge: 'posedge';
/*  25 */ Negedge: 'negedge';
/*  26 */ If: 'if';
/*  27 */ Else: 'else';
/*  28 */ Parameter: 'parameter';
/*  29 */ Localparam: 'localparam';
/*  30 */ Module: 'module';
/*  31 */ Input: 'input';
/*  32 */ Output: 'output';
/*  33 */ Inout: 'inout';
/*  34 */ Identifier: /[a-zA-Z_][0-9a-zA-Z_]*/;
/*  35 */ Veryl: VerylList /* Vec */;
/*  36 */ VerylList /* Vec<T>::Push */: Description VerylList;
/*  37 */ VerylList /* Vec<T>::New */: ;
/*  38 */ Description: ModuleDeclaration;
/*  39 */ Number: IntegralNumber;
/*  40 */ IntegralNumber: BinaryNumber;
/*  41 */ IntegralNumber: OctalNumber;
/*  42 */ IntegralNumber: DecimalNumber;
/*  43 */ IntegralNumber: HexNumber;
/*  44 */ IntegralNumber: BaseLessNumber;
/*  45 */ BinaryNumber: BaseLess BasedBinary;
/*  46 */ OctalNumber: BaseLess BasedOctal;
/*  47 */ DecimalNumber: BaseLess BasedDecimal;
/*  48 */ HexNumber: BaseLess BasedHex;
/*  49 */ BaseLessNumber: BaseLess;
/*  50 */ OperatorPrecedence1: Plus;
/*  51 */ OperatorPrecedence1: Minus;
/*  52 */ OperatorPrecedence2: Mul;
/*  53 */ OperatorPrecedence2: Div;
/*  54 */ Expression: Expression0;
/*  55 */ Expression0: Expression1 Expression0List /* Vec */;
/*  56 */ Expression0List /* Vec<T>::Push */: OperatorPrecedence1 Expression1 Expression0List;
/*  57 */ Expression0List /* Vec<T>::New */: ;
/*  58 */ Expression1: Expression2 Expression1List /* Vec */;
/*  59 */ Expression1List /* Vec<T>::Push */: OperatorPrecedence2 Expression2 Expression1List;
/*  60 */ Expression1List /* Vec<T>::New */: ;
/*  61 */ Expression2: Factor;
/*  62 */ Factor: Number;
/*  63 */ Factor: Identifier FactorOpt /* Option */;
/*  64 */ Factor: LParen Expression RParen;
/*  65 */ FactorOpt /* Option<T>::Some */: Range;
/*  66 */ FactorOpt /* Option<T>::None */: ;
/*  67 */ Statement: AssignmentStatement;
/*  68 */ Statement: IfStatement;
/*  69 */ AssignmentStatement: Identifier Assignment Expression SemiColon;
/*  70 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/*  71 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/*  72 */ IfStatementList /* Vec<T>::New */: ;
/*  73 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/*  74 */ IfStatementOpt /* Option<T>::None */: ;
/*  75 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/*  76 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/*  77 */ RangeOpt /* Option<T>::None */: ;
/*  78 */ Width: LBracket Expression RBracket;
/*  79 */ BuiltinType: Logic;
/*  80 */ BuiltinType: Bit;
/*  81 */ Type: TypeGroup TypeList /* Vec */;
/*  82 */ TypeGroup: BuiltinType;
/*  83 */ TypeGroup: Identifier;
/*  84 */ TypeList /* Vec<T>::Push */: Width TypeList;
/*  85 */ TypeList /* Vec<T>::New */: ;
/*  86 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/*  87 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/*  88 */ ModuleDeclarationList /* Vec<T>::New */: ;
/*  89 */ ModuleDeclarationOpt0 /* Option<T>::Some */: ModulePort;
/*  90 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/*  91 */ ModuleDeclarationOpt /* Option<T>::Some */: ModuleParameter;
/*  92 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/*  93 */ ModuleParameter: Sharp LParen ModuleParameterOpt /* Option */ RParen;
/*  94 */ ModuleParameterOpt /* Option<T>::Some */: ModuleParameterList;
/*  95 */ ModuleParameterOpt /* Option<T>::None */: ;
/*  96 */ ModuleParameterList: ModuleParameterItem ModuleParameterListList /* Vec */ ModuleParameterListOpt /* Option */;
/*  97 */ ModuleParameterListList /* Vec<T>::Push */: Comma ModuleParameterItem ModuleParameterListList;
/*  98 */ ModuleParameterListList /* Vec<T>::New */: ;
/*  99 */ ModuleParameterListOpt /* Option<T>::Some */: Comma;
/* 100 */ ModuleParameterListOpt /* Option<T>::None */: ;
/* 101 */ ModuleParameterItem: ModuleParameterItemGroup Identifier Colon Type Assignment Expression;
/* 102 */ ModuleParameterItemGroup: Parameter;
/* 103 */ ModuleParameterItemGroup: Localparam;
/* 104 */ ModulePort: LParen ModulePortOpt /* Option */ RParen;
/* 105 */ ModulePortOpt /* Option<T>::Some */: ModulePortList;
/* 106 */ ModulePortOpt /* Option<T>::None */: ;
/* 107 */ ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
/* 108 */ ModulePortListList /* Vec<T>::Push */: Comma ModulePortItem ModulePortListList;
/* 109 */ ModulePortListList /* Vec<T>::New */: ;
/* 110 */ ModulePortListOpt /* Option<T>::Some */: Comma;
/* 111 */ ModulePortListOpt /* Option<T>::None */: ;
/* 112 */ ModulePortItem: Identifier Colon Direction Type;
/* 113 */ Direction: Input;
/* 114 */ Direction: Output;
/* 115 */ Direction: Inout;
/* 116 */ ModuleItem: VariableDeclaration;
/* 117 */ ModuleItem: ParameterDeclaration;
/* 118 */ ModuleItem: LocalparamDeclaration;
/* 119 */ ModuleItem: AlwaysFFDeclaration;
/* 120 */ ModuleItem: AlwaysCombDeclaration;
/* 121 */ VariableDeclaration: Identifier Colon Type SemiColon;
/* 122 */ ParameterDeclaration: Parameter Identifier Colon Type Assignment Expression SemiColon;
/* 123 */ LocalparamDeclaration: Localparam Identifier Colon Type Assignment Expression SemiColon;
/* 124 */ AlwaysFFDeclaration: AlwaysFF LParen AlwaysFFConditions RParen LBrace AlwaysFFDeclarationList /* Vec */ RBrace;
/* 125 */ AlwaysFFDeclarationList /* Vec<T>::Push */: Statement AlwaysFFDeclarationList;
/* 126 */ AlwaysFFDeclarationList /* Vec<T>::New */: ;
/* 127 */ AlwaysFFConditions: AlwaysFFCondition AlwaysFFConditionsList /* Vec */ AlwaysFFConditionsOpt /* Option */;
/* 128 */ AlwaysFFConditionsList /* Vec<T>::Push */: Comma AlwaysFFCondition AlwaysFFConditionsList;
/* 129 */ AlwaysFFConditionsList /* Vec<T>::New */: ;
/* 130 */ AlwaysFFConditionsOpt /* Option<T>::Some */: Comma;
/* 131 */ AlwaysFFConditionsOpt /* Option<T>::None */: ;
/* 132 */ AlwaysFFCondition: AlwaysFFConditionGroup Identifier;
/* 133 */ AlwaysFFConditionGroup: Posedge;
/* 134 */ AlwaysFFConditionGroup: Negedge;
/* 135 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 136 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 137 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
