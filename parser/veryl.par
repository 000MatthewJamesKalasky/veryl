
%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%block_comment  "/\*" "\*/"

%%

// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------

// Number
BasedBinary : /'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/;
BasedOctal  : /'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/;
BasedDecimal: /'d[0-9]+(?:_[0-9]+)*/;
BasedHex    : /'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/;
BaseLess    : /[0-9]+(?:_[0-9]+)*/;

// Symbol
Plus     : '+';
Minus    : '-';
Mul      : '*';
Div      : '/';
Colon    : ':';
SemiColon: ';';
Comma    : ',';
LParen   : '(';
RParen   : ')';
LBracket : '[';
RBracket : ']';
LBrace   : '{';
RBrace   : '}';
//Equal     : '==';
Assignment: '=';
Sharp    : '#';

// Keyword
Logic     : 'logic';
Bit       : 'bit';
AlwaysFF  : 'always_ff';
AlwaysComb: 'always_comb';
Posedge   : 'posedge';
Negedge   : 'negedge';
If        : 'if';
Else      : 'else';
Parameter : 'parameter';
Localparam: 'localparam';
Module    : 'module';
Interface : 'interface';
Input     : 'input';
Output    : 'output';
Inout     : 'inout';
Modport   : 'modport';
U32       : 'u32';
U64       : 'u64';
I32       : 'i32';
I64       : 'i64';
F32       : 'f32';
F64       : 'f64';

// Identifier
Identifier: /[a-zA-Z_][0-9a-zA-Z_]*/;

// ----------------------------------------------------------------------------
// SourceCode
// ----------------------------------------------------------------------------

Veryl: { Description };

// ----------------------------------------------------------------------------
// Description
// ----------------------------------------------------------------------------

Description: ModuleDeclaration
           | InterfaceDeclaration
           ;

// ----------------------------------------------------------------------------
// Number
// ----------------------------------------------------------------------------

Number: IntegralNumber
//      | RealNumber
      ;

IntegralNumber: BinaryNumber
              | OctalNumber
              | DecimalNumber
              | HexNumber
              | BaseLessNumber
              ;

BinaryNumber  : BaseLess BasedBinary;
OctalNumber   : BaseLess BasedOctal;
DecimalNumber : BaseLess BasedDecimal;
HexNumber     : BaseLess BasedHex;
BaseLessNumber: BaseLess;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------

OperatorPrecedence1: Plus | Minus;
OperatorPrecedence2: Mul | Div;

Expression : Expression0;
Expression0: Expression1 { OperatorPrecedence1 Expression1 };
Expression1: Expression2 { OperatorPrecedence2 Expression2 };
Expression2: Factor;

Factor: Number
      | Identifier [ Range ]
      | LParen Expression RParen
      ;

// ----------------------------------------------------------------------------
// Statement
// ----------------------------------------------------------------------------

Statement: AssignmentStatement
         | IfStatement
         ;

AssignmentStatement: Identifier Assignment Expression SemiColon;

IfStatement: If Expression LBrace Statement RBrace { Else If Expression LBrace Statement RBrace } [ Else LBrace Statement RBrace ];

// ----------------------------------------------------------------------------
// Range / Width
// ----------------------------------------------------------------------------

Range: LBracket Expression [ Colon Expression ] RBracket;

Width: LBracket Expression RBracket;

// ----------------------------------------------------------------------------
// Type
// ----------------------------------------------------------------------------

BuiltinType: Logic
           | Bit
           | U32 | U64 | I32 | I64 | F32 | F64
           ;

Type: ( BuiltinType | Identifier ) { Width };

// ----------------------------------------------------------------------------
// WithParameter
// ----------------------------------------------------------------------------

WithParameter: Sharp LParen [ WithParameterList ] RParen;

WithParameterList: WithParameterItem { Comma WithParameterItem } [ Comma ];

WithParameterItem: ( Parameter | Localparam ) Identifier Colon Type Assignment Expression;


// ----------------------------------------------------------------------------
// Module
// ----------------------------------------------------------------------------

ModuleDeclaration: Module Identifier [ WithParameter ] [ ModulePort ] LBrace { ModuleItem } RBrace;

ModulePort: LParen [ ModulePortList ] RParen;

ModulePortList: ModulePortItem { Comma ModulePortItem } [ Comma ];

ModulePortItem: Identifier Colon Direction Type;

Direction: Input
         | Output
         | Inout
         ;

ModuleItem: VariableDeclaration
          | ParameterDeclaration
          | LocalparamDeclaration
          | AlwaysFFDeclaration
          | AlwaysCombDeclaration
          ;

// ----------------------------------------------------------------------------
// Interface
// ----------------------------------------------------------------------------

InterfaceDeclaration: Interface Identifier [ WithParameter ] LBrace { InterfaceItem } RBrace;

InterfaceItem: VariableDeclaration
             | ParameterDeclaration
             | LocalparamDeclaration
             | ModportDeclaration
             ;

// ----------------------------------------------------------------------------
// Declaration
// ----------------------------------------------------------------------------

VariableDeclaration: Identifier Colon Type SemiColon;

ParameterDeclaration: Parameter Identifier Colon Type Assignment Expression SemiColon;

LocalparamDeclaration: Localparam Identifier Colon Type Assignment Expression SemiColon;

AlwaysFFDeclaration: AlwaysFF LParen AlwaysFFConditions RParen LBrace { Statement } RBrace;

AlwaysFFConditions: AlwaysFFCondition { Comma AlwaysFFCondition } [ Comma ];

AlwaysFFCondition: ( Posedge | Negedge ) Identifier;

AlwaysCombDeclaration: AlwaysComb LBrace { Statement } RBrace;

ModportDeclaration: Modport Identifier LBrace ModportList RBrace;

ModportList: ModportItem { Comma ModportItem } [ Comma ];

ModportItem: Identifier Colon Direction;
