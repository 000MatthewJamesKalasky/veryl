
%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type VerylToken = crate::veryl_token::VerylToken
%user_type OwnedToken = crate::veryl_token::OwnedToken

%%

// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------


MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+": OwnedToken;
Comments    : [ MultiComment ];

// Start
StartToken: Comments;
Start     : StartToken: VerylToken;

// Number
BasedBinaryToken : /[0-9]+(?:_[0-9]+)*'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/: OwnedToken Comments;
BasedOctalToken  : /[0-9]+(?:_[0-9]+)*'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/: OwnedToken Comments;
BasedDecimalToken: /[0-9]+(?:_[0-9]+)*'d[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
BasedHexToken    : /[0-9]+(?:_[0-9]+)*'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/: OwnedToken Comments;
BaseLessToken    : /[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;

BasedBinary : BasedBinaryToken : VerylToken;
BasedOctal  : BasedOctalToken  : VerylToken;
BasedDecimal: BasedDecimalToken: VerylToken;
BasedHex    : BasedHexToken    : VerylToken;
BaseLess    : BaseLessToken    : VerylToken;

// Symbol
PlusToken     : '+': OwnedToken Comments;
MinusToken    : '-': OwnedToken Comments;
StarToken     : '*': OwnedToken Comments;
SlashToken    : '/': OwnedToken Comments;
ColonToken    : ':': OwnedToken Comments;
SemicolonToken: ';': OwnedToken Comments;
CommaToken    : ',': OwnedToken Comments;
LParenToken   : '(': OwnedToken Comments;
RParenToken   : ')': OwnedToken Comments;
LBracketToken : '[': OwnedToken Comments;
RBracketToken : ']': OwnedToken Comments;
LBraceToken   : '{': OwnedToken Comments;
RBraceToken   : '}': OwnedToken Comments;
EquToken      : '=': OwnedToken Comments;
HashToken     : '#': OwnedToken Comments;

Plus     : PlusToken     : VerylToken;
Minus    : MinusToken    : VerylToken;
Star     : StarToken     : VerylToken;
Slash    : SlashToken    : VerylToken;
Colon    : ColonToken    : VerylToken;
Semicolon: SemicolonToken: VerylToken;
Comma    : CommaToken    : VerylToken;
LParen   : LParenToken   : VerylToken;
RParen   : RParenToken   : VerylToken;
LBracket : LBracketToken : VerylToken;
RBracket : RBracketToken : VerylToken;
LBrace   : LBraceToken   : VerylToken;
RBrace   : RBraceToken   : VerylToken;
Equ      : EquToken      : VerylToken;
Hash     : HashToken     : VerylToken;

// Keyword
LogicToken     : 'logic'      : OwnedToken Comments;
BitToken       : 'bit'        : OwnedToken Comments;
AlwaysFfToken  : 'always_ff'  : OwnedToken Comments;
AlwaysCombToken: 'always_comb': OwnedToken Comments;
PosedgeToken   : 'posedge'    : OwnedToken Comments;
NegedgeToken   : 'negedge'    : OwnedToken Comments;
IfToken        : 'if'         : OwnedToken Comments;
ElseToken      : 'else'       : OwnedToken Comments;
ParameterToken : 'parameter'  : OwnedToken Comments;
LocalparamToken: 'localparam' : OwnedToken Comments;
ModuleToken    : 'module'     : OwnedToken Comments;
InterfaceToken : 'interface'  : OwnedToken Comments;
InputToken     : 'input'      : OwnedToken Comments;
OutputToken    : 'output'     : OwnedToken Comments;
InoutToken     : 'inout'      : OwnedToken Comments;
ModportToken   : 'modport'    : OwnedToken Comments;
U32Token       : 'u32'        : OwnedToken Comments;
U64Token       : 'u64'        : OwnedToken Comments;
I32Token       : 'i32'        : OwnedToken Comments;
I64Token       : 'i64'        : OwnedToken Comments;
F32Token       : 'f32'        : OwnedToken Comments;
F64Token       : 'f64'        : OwnedToken Comments;

Logic     : LogicToken     : VerylToken;
Bit       : BitToken       : VerylToken;
AlwaysFf  : AlwaysFfToken  : VerylToken;
AlwaysComb: AlwaysCombToken: VerylToken;
Posedge   : PosedgeToken   : VerylToken;
Negedge   : NegedgeToken   : VerylToken;
If        : IfToken        : VerylToken;
Else      : ElseToken      : VerylToken;
Parameter : ParameterToken : VerylToken;
Localparam: LocalparamToken: VerylToken;
Module    : ModuleToken    : VerylToken;
Interface : InterfaceToken : VerylToken;
Input     : InputToken     : VerylToken;
Output    : OutputToken    : VerylToken;
Inout     : InoutToken     : VerylToken;
Modport   : ModportToken   : VerylToken;
U32       : U32Token       : VerylToken;
U64       : U64Token       : VerylToken;
I32       : I32Token       : VerylToken;
I64       : I64Token       : VerylToken;
F32       : F32Token       : VerylToken;
F64       : F64Token       : VerylToken;

// Identifier
IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/: OwnedToken Comments;
Identifier     : IdentifierToken: VerylToken;

// ----------------------------------------------------------------------------
// SourceCode
// ----------------------------------------------------------------------------

Veryl: Start { Description };

// ----------------------------------------------------------------------------
// Description
// ----------------------------------------------------------------------------

Description: ModuleDeclaration
           | InterfaceDeclaration
           ;

// ----------------------------------------------------------------------------
// Number
// ----------------------------------------------------------------------------

Number: IntegralNumber
//      | RealNumber
      ;

IntegralNumber: BasedBinary
              | BasedOctal
              | BasedDecimal
              | BasedHex
              | BaseLess
              ;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------

OperatorPrecedence1: Plus | Minus;
OperatorPrecedence2: Star | Slash;

Expression : Expression0;
Expression0: Expression1 { OperatorPrecedence1 Expression1 };
Expression1: Expression2 { OperatorPrecedence2 Expression2 };
Expression2: Factor;

Factor: Number
      | Identifier { Range }
      | LParen Expression RParen
      ;

// ----------------------------------------------------------------------------
// Statement
// ----------------------------------------------------------------------------

Statement: AssignmentStatement
         | IfStatement
         ;

AssignmentStatement: Identifier Equ Expression Semicolon;

IfStatement: If Expression LBrace Statement RBrace { Else If Expression LBrace Statement RBrace } [ Else LBrace Statement RBrace ];

// ----------------------------------------------------------------------------
// Range / Width
// ----------------------------------------------------------------------------

Range: LBracket Expression [ Colon Expression ] RBracket;

Width: LBracket Expression RBracket;

// ----------------------------------------------------------------------------
// Type
// ----------------------------------------------------------------------------

BuiltinType: Logic
           | Bit
           | U32 | U64 | I32 | I64 | F32 | F64
           ;

Type: ( BuiltinType | Identifier ) { Width };

// ----------------------------------------------------------------------------
// WithParameter
// ----------------------------------------------------------------------------

WithParameter: Hash LParen [ WithParameterList ] RParen;

WithParameterList: WithParameterItem { Comma WithParameterItem } [ Comma ];

WithParameterItem: ( Parameter | Localparam ) Identifier Colon Type Equ Expression;

// ----------------------------------------------------------------------------
// Module
// ----------------------------------------------------------------------------

ModuleDeclaration: Module Identifier [ WithParameter ] [ ModulePort ] LBrace { ModuleItem } RBrace;

ModulePort: LParen [ ModulePortList ] RParen;

ModulePortList: ModulePortItem { Comma ModulePortItem } [ Comma ];

ModulePortItem: Identifier Colon Direction Type;

Direction: Input
         | Output
         | Inout
         ;

ModuleItem: VariableDeclaration
          | ParameterDeclaration
          | LocalparamDeclaration
          | AlwaysFfDeclaration
          | AlwaysCombDeclaration
          ;

// ----------------------------------------------------------------------------
// Interface
// ----------------------------------------------------------------------------

InterfaceDeclaration: Interface Identifier [ WithParameter ] LBrace { InterfaceItem } RBrace;

InterfaceItem: VariableDeclaration
             | ParameterDeclaration
             | LocalparamDeclaration
             | ModportDeclaration
             ;

// ----------------------------------------------------------------------------
// Declaration
// ----------------------------------------------------------------------------

VariableDeclaration: Identifier Colon Type Semicolon;

ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;

LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;

AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfConditions RParen LBrace { Statement } RBrace;

AlwaysFfConditions: AlwaysFfCondition { Comma AlwaysFfCondition } [ Comma ];

AlwaysFfCondition: ( Posedge | Negedge ) Identifier;

AlwaysCombDeclaration: AlwaysComb LBrace { Statement } RBrace;

ModportDeclaration: Modport Identifier LBrace ModportList RBrace;

ModportList: ModportItem { Comma ModportItem } [ Comma ];

ModportItem: Identifier Colon Direction;
