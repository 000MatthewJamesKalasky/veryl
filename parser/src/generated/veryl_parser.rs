// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::miette::Result;
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::veryl_grammar::VerylGrammar;
use crate::veryl_grammar_trait::VerylGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 49] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*"###,
    /*  6 */ r###"'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*"###,
    /*  7 */ r###"'d[0-9]+(?:_[0-9]+)*"###,
    /*  8 */ r###"'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*"###,
    /*  9 */ r###"[0-9]+(?:_[0-9]+)*"###,
    /* 10 */ r###"\+"###,
    /* 11 */ r###"\-"###,
    /* 12 */ r###"\*"###,
    /* 13 */ r###"/"###,
    /* 14 */ r###":"###,
    /* 15 */ r###";"###,
    /* 16 */ r###","###,
    /* 17 */ r###"\("###,
    /* 18 */ r###"\)"###,
    /* 19 */ r###"\["###,
    /* 20 */ r###"\]"###,
    /* 21 */ r###"\{"###,
    /* 22 */ r###"\}"###,
    /* 23 */ r###"="###,
    /* 24 */ r###"\#"###,
    /* 25 */ r###"logic"###,
    /* 26 */ r###"bit"###,
    /* 27 */ r###"always_ff"###,
    /* 28 */ r###"always_comb"###,
    /* 29 */ r###"posedge"###,
    /* 30 */ r###"negedge"###,
    /* 31 */ r###"if"###,
    /* 32 */ r###"else"###,
    /* 33 */ r###"parameter"###,
    /* 34 */ r###"localparam"###,
    /* 35 */ r###"module"###,
    /* 36 */ r###"interface"###,
    /* 37 */ r###"input"###,
    /* 38 */ r###"output"###,
    /* 39 */ r###"inout"###,
    /* 40 */ r###"modport"###,
    /* 41 */ r###"u32"###,
    /* 42 */ r###"u64"###,
    /* 43 */ r###"i32"###,
    /* 44 */ r###"i64"###,
    /* 45 */ r###"f32"###,
    /* 46 */ r###"f64"###,
    /* 47 */ r###"[a-zA-Z_][0-9a-zA-Z_]*"###,
    /* 48 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 49] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "BasedBinary",
    /*  6 */ "BasedOctal",
    /*  7 */ "BasedDecimal",
    /*  8 */ "BasedHex",
    /*  9 */ "BaseLess",
    /* 10 */ "Plus",
    /* 11 */ "Minus",
    /* 12 */ "Star",
    /* 13 */ "Div",
    /* 14 */ "Colon",
    /* 15 */ "SemiColon",
    /* 16 */ "Comma",
    /* 17 */ "LParen",
    /* 18 */ "RParen",
    /* 19 */ "LBracket",
    /* 20 */ "RBracket",
    /* 21 */ "LBrace",
    /* 22 */ "RBrace",
    /* 23 */ "Assignment",
    /* 24 */ "Hash",
    /* 25 */ "Logic",
    /* 26 */ "Bit",
    /* 27 */ "AlwaysFF",
    /* 28 */ "AlwaysComb",
    /* 29 */ "Posedge",
    /* 30 */ "Negedge",
    /* 31 */ "If",
    /* 32 */ "Else",
    /* 33 */ "Parameter",
    /* 34 */ "Localparam",
    /* 35 */ "Module",
    /* 36 */ "Interface",
    /* 37 */ "Input",
    /* 38 */ "Output",
    /* 39 */ "Inout",
    /* 40 */ "Modport",
    /* 41 */ "U32",
    /* 42 */ "U64",
    /* 43 */ "I32",
    /* 44 */ "I64",
    /* 45 */ "F32",
    /* 46 */ "F64",
    /* 47 */ "Identifier",
    /* 48 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 43]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r###"(//.*(\r\n|\r|\n|$))"###,
        /*  4 */ r###"((?ms)/\*.*?\*/)"###,
    ],
    &[
        5,  /* BasedBinary */
        6,  /* BasedOctal */
        7,  /* BasedDecimal */
        8,  /* BasedHex */
        9,  /* BaseLess */
        10, /* Plus */
        11, /* Minus */
        12, /* Star */
        13, /* Div */
        14, /* Colon */
        15, /* SemiColon */
        16, /* Comma */
        17, /* LParen */
        18, /* RParen */
        19, /* LBracket */
        20, /* RBracket */
        21, /* LBrace */
        22, /* RBrace */
        23, /* Assignment */
        24, /* Hash */
        25, /* Logic */
        26, /* Bit */
        27, /* AlwaysFF */
        28, /* AlwaysComb */
        29, /* Posedge */
        30, /* Negedge */
        31, /* If */
        32, /* Else */
        33, /* Parameter */
        34, /* Localparam */
        35, /* Module */
        36, /* Interface */
        37, /* Input */
        38, /* Output */
        39, /* Inout */
        40, /* Modport */
        41, /* U32 */
        42, /* U64 */
        43, /* I32 */
        44, /* I64 */
        45, /* F32 */
        46, /* F64 */
        47, /* Identifier */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 115] = &[
    /*   0 */ "AlwaysComb",
    /*   1 */ "AlwaysCombDeclaration",
    /*   2 */ "AlwaysCombDeclarationList",
    /*   3 */ "AlwaysFF",
    /*   4 */ "AlwaysFFCondition",
    /*   5 */ "AlwaysFFConditionGroup",
    /*   6 */ "AlwaysFFConditions",
    /*   7 */ "AlwaysFFConditionsList",
    /*   8 */ "AlwaysFFConditionsOpt",
    /*   9 */ "AlwaysFFDeclaration",
    /*  10 */ "AlwaysFFDeclarationList",
    /*  11 */ "Assignment",
    /*  12 */ "AssignmentStatement",
    /*  13 */ "BaseLess",
    /*  14 */ "BaseLessNumber",
    /*  15 */ "BasedBinary",
    /*  16 */ "BasedDecimal",
    /*  17 */ "BasedHex",
    /*  18 */ "BasedOctal",
    /*  19 */ "BinaryNumber",
    /*  20 */ "Bit",
    /*  21 */ "BuiltinType",
    /*  22 */ "Colon",
    /*  23 */ "Comma",
    /*  24 */ "DecimalNumber",
    /*  25 */ "Description",
    /*  26 */ "Direction",
    /*  27 */ "Div",
    /*  28 */ "Else",
    /*  29 */ "Expression",
    /*  30 */ "Expression0",
    /*  31 */ "Expression0List",
    /*  32 */ "Expression1",
    /*  33 */ "Expression1List",
    /*  34 */ "Expression2",
    /*  35 */ "F32",
    /*  36 */ "F64",
    /*  37 */ "Factor",
    /*  38 */ "FactorOpt",
    /*  39 */ "HexNumber",
    /*  40 */ "I32",
    /*  41 */ "I64",
    /*  42 */ "Identifier",
    /*  43 */ "If",
    /*  44 */ "IfStatement",
    /*  45 */ "IfStatementList",
    /*  46 */ "IfStatementOpt",
    /*  47 */ "Inout",
    /*  48 */ "Input",
    /*  49 */ "IntegralNumber",
    /*  50 */ "Interface",
    /*  51 */ "InterfaceDeclaration",
    /*  52 */ "InterfaceDeclarationList",
    /*  53 */ "InterfaceDeclarationOpt",
    /*  54 */ "InterfaceItem",
    /*  55 */ "LBrace",
    /*  56 */ "LBracket",
    /*  57 */ "LParen",
    /*  58 */ "Localparam",
    /*  59 */ "LocalparamDeclaration",
    /*  60 */ "Logic",
    /*  61 */ "Minus",
    /*  62 */ "Modport",
    /*  63 */ "ModportDeclaration",
    /*  64 */ "ModportItem",
    /*  65 */ "ModportList",
    /*  66 */ "ModportListList",
    /*  67 */ "ModportListOpt",
    /*  68 */ "Module",
    /*  69 */ "ModuleDeclaration",
    /*  70 */ "ModuleDeclarationList",
    /*  71 */ "ModuleDeclarationOpt",
    /*  72 */ "ModuleDeclarationOpt0",
    /*  73 */ "ModuleItem",
    /*  74 */ "ModulePort",
    /*  75 */ "ModulePortItem",
    /*  76 */ "ModulePortList",
    /*  77 */ "ModulePortListList",
    /*  78 */ "ModulePortListOpt",
    /*  79 */ "ModulePortOpt",
    /*  80 */ "Mul",
    /*  81 */ "Negedge",
    /*  82 */ "Number",
    /*  83 */ "OctalNumber",
    /*  84 */ "OperatorPrecedence1",
    /*  85 */ "OperatorPrecedence2",
    /*  86 */ "Output",
    /*  87 */ "Parameter",
    /*  88 */ "ParameterDeclaration",
    /*  89 */ "Plus",
    /*  90 */ "Posedge",
    /*  91 */ "RBrace",
    /*  92 */ "RBracket",
    /*  93 */ "RParen",
    /*  94 */ "Range",
    /*  95 */ "RangeOpt",
    /*  96 */ "SemiColon",
    /*  97 */ "Sharp",
    /*  98 */ "Statement",
    /*  99 */ "Type",
    /* 100 */ "TypeGroup",
    /* 101 */ "TypeList",
    /* 102 */ "U32",
    /* 103 */ "U64",
    /* 104 */ "VariableDeclaration",
    /* 105 */ "Veryl",
    /* 106 */ "VerylList",
    /* 107 */ "Width",
    /* 108 */ "WithParameter",
    /* 109 */ "WithParameterItem",
    /* 110 */ "WithParameterItemGroup",
    /* 111 */ "WithParameterList",
    /* 112 */ "WithParameterListList",
    /* 113 */ "WithParameterListOpt",
    /* 114 */ "WithParameterOpt",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 115] = &[
    /* 0 - "AlwaysComb" */
    LookaheadDFA {
        states: &[Some(23)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "AlwaysCombDeclaration" */
    LookaheadDFA {
        states: &[Some(159)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "AlwaysCombDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(160), Some(161)],
        transitions: &[
            DFATransition(0, 22, 2),
            DFATransition(0, 31, 1),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 3 - "AlwaysFF" */
    LookaheadDFA {
        states: &[Some(22)],
        transitions: &[],
        k: 0,
    },
    /* 4 - "AlwaysFFCondition" */
    LookaheadDFA {
        states: &[Some(156)],
        transitions: &[],
        k: 0,
    },
    /* 5 - "AlwaysFFConditionGroup" */
    LookaheadDFA {
        states: &[None, Some(157), Some(158)],
        transitions: &[DFATransition(0, 29, 1), DFATransition(0, 30, 2)],
        k: 1,
    },
    /* 6 - "AlwaysFFConditions" */
    LookaheadDFA {
        states: &[Some(151)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "AlwaysFFConditionsList" */
    LookaheadDFA {
        states: &[None, None, Some(152), None, Some(153)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 18, 3),
            DFATransition(1, 18, 4),
            DFATransition(1, 29, 2),
            DFATransition(1, 30, 2),
            DFATransition(3, 21, 4),
        ],
        k: 2,
    },
    /* 8 - "AlwaysFFConditionsOpt" */
    LookaheadDFA {
        states: &[None, Some(154), Some(155)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 18, 2)],
        k: 1,
    },
    /* 9 - "AlwaysFFDeclaration" */
    LookaheadDFA {
        states: &[Some(148)],
        transitions: &[],
        k: 0,
    },
    /* 10 - "AlwaysFFDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(149), Some(150)],
        transitions: &[
            DFATransition(0, 22, 2),
            DFATransition(0, 31, 1),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 11 - "Assignment" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 12 - "AssignmentStatement" */
    LookaheadDFA {
        states: &[Some(78)],
        transitions: &[],
        k: 0,
    },
    /* 13 - "BaseLess" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "BaseLessNumber" */
    LookaheadDFA {
        states: &[Some(58)],
        transitions: &[],
        k: 0,
    },
    /* 15 - "BasedBinary" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 16 - "BasedDecimal" */
    LookaheadDFA {
        states: &[Some(2)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "BasedHex" */
    LookaheadDFA {
        states: &[Some(3)],
        transitions: &[],
        k: 0,
    },
    /* 18 - "BasedOctal" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "BinaryNumber" */
    LookaheadDFA {
        states: &[Some(54)],
        transitions: &[],
        k: 0,
    },
    /* 20 - "Bit" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "BuiltinType" */
    LookaheadDFA {
        states: &[
            None,
            Some(88),
            Some(89),
            Some(90),
            Some(91),
            Some(92),
            Some(93),
            Some(94),
            Some(95),
        ],
        transitions: &[
            DFATransition(0, 25, 1),
            DFATransition(0, 26, 2),
            DFATransition(0, 41, 3),
            DFATransition(0, 42, 4),
            DFATransition(0, 43, 5),
            DFATransition(0, 44, 6),
            DFATransition(0, 45, 7),
            DFATransition(0, 46, 8),
        ],
        k: 1,
    },
    /* 22 - "Colon" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "Comma" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "DecimalNumber" */
    LookaheadDFA {
        states: &[Some(56)],
        transitions: &[],
        k: 0,
    },
    /* 25 - "Description" */
    LookaheadDFA {
        states: &[None, Some(46), Some(47)],
        transitions: &[DFATransition(0, 35, 1), DFATransition(0, 36, 2)],
        k: 1,
    },
    /* 26 - "Direction" */
    LookaheadDFA {
        states: &[None, Some(128), Some(129), Some(130)],
        transitions: &[
            DFATransition(0, 37, 1),
            DFATransition(0, 38, 2),
            DFATransition(0, 39, 3),
        ],
        k: 1,
    },
    /* 27 - "Div" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 28 - "Else" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 29 - "Expression" */
    LookaheadDFA {
        states: &[Some(63)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "Expression0" */
    LookaheadDFA {
        states: &[Some(64)],
        transitions: &[],
        k: 0,
    },
    /* 31 - "Expression0List" */
    LookaheadDFA {
        states: &[None, Some(65), Some(66)],
        transitions: &[
            DFATransition(0, 10, 1),
            DFATransition(0, 11, 1),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
        ],
        k: 1,
    },
    /* 32 - "Expression1" */
    LookaheadDFA {
        states: &[Some(67)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "Expression1List" */
    LookaheadDFA {
        states: &[None, Some(68), Some(69)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 1),
            DFATransition(0, 13, 1),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
        ],
        k: 1,
    },
    /* 34 - "Expression2" */
    LookaheadDFA {
        states: &[Some(70)],
        transitions: &[],
        k: 0,
    },
    /* 35 - "F32" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "F64" */
    LookaheadDFA {
        states: &[Some(41)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(71), Some(72), Some(73)],
        transitions: &[
            DFATransition(0, 9, 1),
            DFATransition(0, 17, 3),
            DFATransition(0, 47, 2),
        ],
        k: 1,
    },
    /* 38 - "FactorOpt" */
    LookaheadDFA {
        states: &[None, Some(74), Some(75)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 1),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
        ],
        k: 1,
    },
    /* 39 - "HexNumber" */
    LookaheadDFA {
        states: &[Some(57)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "I32" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 41 - "I64" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "Identifier" */
    LookaheadDFA {
        states: &[Some(42)],
        transitions: &[],
        k: 0,
    },
    /* 43 - "If" */
    LookaheadDFA {
        states: &[Some(26)],
        transitions: &[],
        k: 0,
    },
    /* 44 - "IfStatement" */
    LookaheadDFA {
        states: &[Some(79)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "IfStatementList" */
    LookaheadDFA {
        states: &[None, None, Some(80), None, None, None, Some(81)],
        transitions: &[
            DFATransition(0, 22, 3),
            DFATransition(0, 31, 4),
            DFATransition(0, 32, 1),
            DFATransition(0, 47, 5),
            DFATransition(1, 21, 6),
            DFATransition(1, 31, 2),
            DFATransition(3, 22, 6),
            DFATransition(3, 27, 6),
            DFATransition(3, 28, 6),
            DFATransition(3, 31, 6),
            DFATransition(3, 32, 6),
            DFATransition(3, 33, 6),
            DFATransition(3, 34, 6),
            DFATransition(3, 47, 6),
            DFATransition(4, 9, 6),
            DFATransition(4, 17, 6),
            DFATransition(4, 47, 6),
            DFATransition(5, 23, 6),
        ],
        k: 2,
    },
    /* 46 - "IfStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(82), Some(83)],
        transitions: &[
            DFATransition(0, 22, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 1),
            DFATransition(0, 47, 2),
        ],
        k: 1,
    },
    /* 47 - "Inout" */
    LookaheadDFA {
        states: &[Some(34)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "Input" */
    LookaheadDFA {
        states: &[Some(32)],
        transitions: &[],
        k: 0,
    },
    /* 49 - "IntegralNumber" */
    LookaheadDFA {
        states: &[None, None, Some(49), Some(50), Some(51), Some(52), Some(53)],
        transitions: &[
            DFATransition(0, 9, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 6, 3),
            DFATransition(1, 7, 4),
            DFATransition(1, 8, 5),
            DFATransition(1, 10, 6),
            DFATransition(1, 11, 6),
            DFATransition(1, 12, 6),
            DFATransition(1, 13, 6),
            DFATransition(1, 14, 6),
            DFATransition(1, 15, 6),
            DFATransition(1, 16, 6),
            DFATransition(1, 18, 6),
            DFATransition(1, 20, 6),
            DFATransition(1, 21, 6),
        ],
        k: 2,
    },
    /* 50 - "Interface" */
    LookaheadDFA {
        states: &[Some(31)],
        transitions: &[],
        k: 0,
    },
    /* 51 - "InterfaceDeclaration" */
    LookaheadDFA {
        states: &[Some(136)],
        transitions: &[],
        k: 0,
    },
    /* 52 - "InterfaceDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(137), Some(138)],
        transitions: &[
            DFATransition(0, 22, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 34, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 53 - "InterfaceDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(139), Some(140)],
        transitions: &[DFATransition(0, 21, 2), DFATransition(0, 24, 1)],
        k: 1,
    },
    /* 54 - "InterfaceItem" */
    LookaheadDFA {
        states: &[None, Some(141), Some(142), Some(143), Some(144)],
        transitions: &[
            DFATransition(0, 33, 2),
            DFATransition(0, 34, 3),
            DFATransition(0, 40, 4),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 55 - "LBrace" */
    LookaheadDFA {
        states: &[Some(16)],
        transitions: &[],
        k: 0,
    },
    /* 56 - "LBracket" */
    LookaheadDFA {
        states: &[Some(14)],
        transitions: &[],
        k: 0,
    },
    /* 57 - "LParen" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 58 - "Localparam" */
    LookaheadDFA {
        states: &[Some(29)],
        transitions: &[],
        k: 0,
    },
    /* 59 - "LocalparamDeclaration" */
    LookaheadDFA {
        states: &[Some(147)],
        transitions: &[],
        k: 0,
    },
    /* 60 - "Logic" */
    LookaheadDFA {
        states: &[Some(20)],
        transitions: &[],
        k: 0,
    },
    /* 61 - "Minus" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 62 - "Modport" */
    LookaheadDFA {
        states: &[Some(35)],
        transitions: &[],
        k: 0,
    },
    /* 63 - "ModportDeclaration" */
    LookaheadDFA {
        states: &[Some(162)],
        transitions: &[],
        k: 0,
    },
    /* 64 - "ModportItem" */
    LookaheadDFA {
        states: &[Some(168)],
        transitions: &[],
        k: 0,
    },
    /* 65 - "ModportList" */
    LookaheadDFA {
        states: &[Some(163)],
        transitions: &[],
        k: 0,
    },
    /* 66 - "ModportListList" */
    LookaheadDFA {
        states: &[None, None, Some(164), None, Some(165)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 22, 3),
            DFATransition(1, 22, 4),
            DFATransition(1, 47, 2),
            DFATransition(3, 22, 4),
            DFATransition(3, 33, 4),
            DFATransition(3, 34, 4),
            DFATransition(3, 40, 4),
            DFATransition(3, 47, 4),
        ],
        k: 2,
    },
    /* 67 - "ModportListOpt" */
    LookaheadDFA {
        states: &[None, Some(166), Some(167)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 22, 2)],
        k: 1,
    },
    /* 68 - "Module" */
    LookaheadDFA {
        states: &[Some(30)],
        transitions: &[],
        k: 0,
    },
    /* 69 - "ModuleDeclaration" */
    LookaheadDFA {
        states: &[Some(112)],
        transitions: &[],
        k: 0,
    },
    /* 70 - "ModuleDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(113), Some(114)],
        transitions: &[
            DFATransition(0, 22, 2),
            DFATransition(0, 27, 1),
            DFATransition(0, 28, 1),
            DFATransition(0, 33, 1),
            DFATransition(0, 34, 1),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 71 - "ModuleDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(117), Some(118)],
        transitions: &[
            DFATransition(0, 17, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 24, 1),
        ],
        k: 1,
    },
    /* 72 - "ModuleDeclarationOpt0" */
    LookaheadDFA {
        states: &[None, Some(115), Some(116)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 21, 2)],
        k: 1,
    },
    /* 73 - "ModuleItem" */
    LookaheadDFA {
        states: &[None, Some(131), Some(132), Some(133), Some(134), Some(135)],
        transitions: &[
            DFATransition(0, 27, 4),
            DFATransition(0, 28, 5),
            DFATransition(0, 33, 2),
            DFATransition(0, 34, 3),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 74 - "ModulePort" */
    LookaheadDFA {
        states: &[Some(119)],
        transitions: &[],
        k: 0,
    },
    /* 75 - "ModulePortItem" */
    LookaheadDFA {
        states: &[Some(127)],
        transitions: &[],
        k: 0,
    },
    /* 76 - "ModulePortList" */
    LookaheadDFA {
        states: &[Some(122)],
        transitions: &[],
        k: 0,
    },
    /* 77 - "ModulePortListList" */
    LookaheadDFA {
        states: &[None, None, Some(123), None, Some(124)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 18, 3),
            DFATransition(1, 18, 4),
            DFATransition(1, 47, 2),
            DFATransition(3, 21, 4),
        ],
        k: 2,
    },
    /* 78 - "ModulePortListOpt" */
    LookaheadDFA {
        states: &[None, Some(125), Some(126)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 18, 2)],
        k: 1,
    },
    /* 79 - "ModulePortOpt" */
    LookaheadDFA {
        states: &[None, Some(120), Some(121)],
        transitions: &[DFATransition(0, 18, 2), DFATransition(0, 47, 1)],
        k: 1,
    },
    /* 80 - "Mul" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 81 - "Negedge" */
    LookaheadDFA {
        states: &[Some(25)],
        transitions: &[],
        k: 0,
    },
    /* 82 - "Number" */
    LookaheadDFA {
        states: &[Some(48)],
        transitions: &[],
        k: 0,
    },
    /* 83 - "OctalNumber" */
    LookaheadDFA {
        states: &[Some(55)],
        transitions: &[],
        k: 0,
    },
    /* 84 - "OperatorPrecedence1" */
    LookaheadDFA {
        states: &[None, Some(59), Some(60)],
        transitions: &[DFATransition(0, 10, 1), DFATransition(0, 11, 2)],
        k: 1,
    },
    /* 85 - "OperatorPrecedence2" */
    LookaheadDFA {
        states: &[None, Some(61), Some(62)],
        transitions: &[DFATransition(0, 12, 1), DFATransition(0, 13, 2)],
        k: 1,
    },
    /* 86 - "Output" */
    LookaheadDFA {
        states: &[Some(33)],
        transitions: &[],
        k: 0,
    },
    /* 87 - "Parameter" */
    LookaheadDFA {
        states: &[Some(28)],
        transitions: &[],
        k: 0,
    },
    /* 88 - "ParameterDeclaration" */
    LookaheadDFA {
        states: &[Some(146)],
        transitions: &[],
        k: 0,
    },
    /* 89 - "Plus" */
    LookaheadDFA {
        states: &[Some(5)],
        transitions: &[],
        k: 0,
    },
    /* 90 - "Posedge" */
    LookaheadDFA {
        states: &[Some(24)],
        transitions: &[],
        k: 0,
    },
    /* 91 - "RBrace" */
    LookaheadDFA {
        states: &[Some(17)],
        transitions: &[],
        k: 0,
    },
    /* 92 - "RBracket" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 93 - "RParen" */
    LookaheadDFA {
        states: &[Some(13)],
        transitions: &[],
        k: 0,
    },
    /* 94 - "Range" */
    LookaheadDFA {
        states: &[Some(84)],
        transitions: &[],
        k: 0,
    },
    /* 95 - "RangeOpt" */
    LookaheadDFA {
        states: &[None, Some(85), Some(86)],
        transitions: &[DFATransition(0, 14, 1), DFATransition(0, 20, 2)],
        k: 1,
    },
    /* 96 - "SemiColon" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 97 - "Sharp" */
    LookaheadDFA {
        states: &[Some(19)],
        transitions: &[],
        k: 0,
    },
    /* 98 - "Statement" */
    LookaheadDFA {
        states: &[None, Some(76), Some(77)],
        transitions: &[DFATransition(0, 31, 2), DFATransition(0, 47, 1)],
        k: 1,
    },
    /* 99 - "Type" */
    LookaheadDFA {
        states: &[Some(96)],
        transitions: &[],
        k: 0,
    },
    /* 100 - "TypeGroup" */
    LookaheadDFA {
        states: &[None, Some(97), Some(98)],
        transitions: &[
            DFATransition(0, 25, 1),
            DFATransition(0, 26, 1),
            DFATransition(0, 41, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 44, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 47, 2),
        ],
        k: 1,
    },
    /* 101 - "TypeList" */
    LookaheadDFA {
        states: &[None, Some(99), Some(100)],
        transitions: &[
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 1),
            DFATransition(0, 23, 2),
        ],
        k: 1,
    },
    /* 102 - "U32" */
    LookaheadDFA {
        states: &[Some(36)],
        transitions: &[],
        k: 0,
    },
    /* 103 - "U64" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 104 - "VariableDeclaration" */
    LookaheadDFA {
        states: &[Some(145)],
        transitions: &[],
        k: 0,
    },
    /* 105 - "Veryl" */
    LookaheadDFA {
        states: &[Some(43)],
        transitions: &[],
        k: 0,
    },
    /* 106 - "VerylList" */
    LookaheadDFA {
        states: &[None, Some(44), Some(45)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 35, 1),
            DFATransition(0, 36, 1),
        ],
        k: 1,
    },
    /* 107 - "Width" */
    LookaheadDFA {
        states: &[Some(87)],
        transitions: &[],
        k: 0,
    },
    /* 108 - "WithParameter" */
    LookaheadDFA {
        states: &[Some(101)],
        transitions: &[],
        k: 0,
    },
    /* 109 - "WithParameterItem" */
    LookaheadDFA {
        states: &[Some(109)],
        transitions: &[],
        k: 0,
    },
    /* 110 - "WithParameterItemGroup" */
    LookaheadDFA {
        states: &[None, Some(110), Some(111)],
        transitions: &[DFATransition(0, 33, 1), DFATransition(0, 34, 2)],
        k: 1,
    },
    /* 111 - "WithParameterList" */
    LookaheadDFA {
        states: &[Some(104)],
        transitions: &[],
        k: 0,
    },
    /* 112 - "WithParameterListList" */
    LookaheadDFA {
        states: &[None, None, Some(105), None, Some(106)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 18, 3),
            DFATransition(1, 18, 4),
            DFATransition(1, 33, 2),
            DFATransition(1, 34, 2),
            DFATransition(3, 17, 4),
            DFATransition(3, 21, 4),
        ],
        k: 2,
    },
    /* 113 - "WithParameterListOpt" */
    LookaheadDFA {
        states: &[None, Some(107), Some(108)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 18, 2)],
        k: 1,
    },
    /* 114 - "WithParameterOpt" */
    LookaheadDFA {
        states: &[None, Some(102), Some(103)],
        transitions: &[
            DFATransition(0, 18, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 34, 1),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 169] = &[
    // 0 - BasedBinary: /'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/;
    Production {
        lhs: 15,
        production: &[ParseType::T(5)],
    },
    // 1 - BasedOctal: /'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/;
    Production {
        lhs: 18,
        production: &[ParseType::T(6)],
    },
    // 2 - BasedDecimal: /'d[0-9]+(?:_[0-9]+)*/;
    Production {
        lhs: 16,
        production: &[ParseType::T(7)],
    },
    // 3 - BasedHex: /'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/;
    Production {
        lhs: 17,
        production: &[ParseType::T(8)],
    },
    // 4 - BaseLess: /[0-9]+(?:_[0-9]+)*/;
    Production {
        lhs: 13,
        production: &[ParseType::T(9)],
    },
    // 5 - Plus: '+';
    Production {
        lhs: 89,
        production: &[ParseType::T(10)],
    },
    // 6 - Minus: '-';
    Production {
        lhs: 61,
        production: &[ParseType::T(11)],
    },
    // 7 - Mul: '*';
    Production {
        lhs: 80,
        production: &[ParseType::T(12)],
    },
    // 8 - Div: '/';
    Production {
        lhs: 27,
        production: &[ParseType::T(13)],
    },
    // 9 - Colon: ':';
    Production {
        lhs: 22,
        production: &[ParseType::T(14)],
    },
    // 10 - SemiColon: ';';
    Production {
        lhs: 96,
        production: &[ParseType::T(15)],
    },
    // 11 - Comma: ',';
    Production {
        lhs: 23,
        production: &[ParseType::T(16)],
    },
    // 12 - LParen: '(';
    Production {
        lhs: 57,
        production: &[ParseType::T(17)],
    },
    // 13 - RParen: ')';
    Production {
        lhs: 93,
        production: &[ParseType::T(18)],
    },
    // 14 - LBracket: '[';
    Production {
        lhs: 56,
        production: &[ParseType::T(19)],
    },
    // 15 - RBracket: ']';
    Production {
        lhs: 92,
        production: &[ParseType::T(20)],
    },
    // 16 - LBrace: '{';
    Production {
        lhs: 55,
        production: &[ParseType::T(21)],
    },
    // 17 - RBrace: '}';
    Production {
        lhs: 91,
        production: &[ParseType::T(22)],
    },
    // 18 - Assignment: '=';
    Production {
        lhs: 11,
        production: &[ParseType::T(23)],
    },
    // 19 - Sharp: '#';
    Production {
        lhs: 97,
        production: &[ParseType::T(24)],
    },
    // 20 - Logic: 'logic';
    Production {
        lhs: 60,
        production: &[ParseType::T(25)],
    },
    // 21 - Bit: 'bit';
    Production {
        lhs: 20,
        production: &[ParseType::T(26)],
    },
    // 22 - AlwaysFF: 'always_ff';
    Production {
        lhs: 3,
        production: &[ParseType::T(27)],
    },
    // 23 - AlwaysComb: 'always_comb';
    Production {
        lhs: 0,
        production: &[ParseType::T(28)],
    },
    // 24 - Posedge: 'posedge';
    Production {
        lhs: 90,
        production: &[ParseType::T(29)],
    },
    // 25 - Negedge: 'negedge';
    Production {
        lhs: 81,
        production: &[ParseType::T(30)],
    },
    // 26 - If: 'if';
    Production {
        lhs: 43,
        production: &[ParseType::T(31)],
    },
    // 27 - Else: 'else';
    Production {
        lhs: 28,
        production: &[ParseType::T(32)],
    },
    // 28 - Parameter: 'parameter';
    Production {
        lhs: 87,
        production: &[ParseType::T(33)],
    },
    // 29 - Localparam: 'localparam';
    Production {
        lhs: 58,
        production: &[ParseType::T(34)],
    },
    // 30 - Module: 'module';
    Production {
        lhs: 68,
        production: &[ParseType::T(35)],
    },
    // 31 - Interface: 'interface';
    Production {
        lhs: 50,
        production: &[ParseType::T(36)],
    },
    // 32 - Input: 'input';
    Production {
        lhs: 48,
        production: &[ParseType::T(37)],
    },
    // 33 - Output: 'output';
    Production {
        lhs: 86,
        production: &[ParseType::T(38)],
    },
    // 34 - Inout: 'inout';
    Production {
        lhs: 47,
        production: &[ParseType::T(39)],
    },
    // 35 - Modport: 'modport';
    Production {
        lhs: 62,
        production: &[ParseType::T(40)],
    },
    // 36 - U32: 'u32';
    Production {
        lhs: 102,
        production: &[ParseType::T(41)],
    },
    // 37 - U64: 'u64';
    Production {
        lhs: 103,
        production: &[ParseType::T(42)],
    },
    // 38 - I32: 'i32';
    Production {
        lhs: 40,
        production: &[ParseType::T(43)],
    },
    // 39 - I64: 'i64';
    Production {
        lhs: 41,
        production: &[ParseType::T(44)],
    },
    // 40 - F32: 'f32';
    Production {
        lhs: 35,
        production: &[ParseType::T(45)],
    },
    // 41 - F64: 'f64';
    Production {
        lhs: 36,
        production: &[ParseType::T(46)],
    },
    // 42 - Identifier: /[a-zA-Z_][0-9a-zA-Z_]*/;
    Production {
        lhs: 42,
        production: &[ParseType::T(47)],
    },
    // 43 - Veryl: VerylList /* Vec */;
    Production {
        lhs: 105,
        production: &[ParseType::N(106)],
    },
    // 44 - VerylList: Description VerylList;
    Production {
        lhs: 106,
        production: &[ParseType::N(106), ParseType::N(25)],
    },
    // 45 - VerylList: ;
    Production {
        lhs: 106,
        production: &[],
    },
    // 46 - Description: ModuleDeclaration;
    Production {
        lhs: 25,
        production: &[ParseType::N(69)],
    },
    // 47 - Description: InterfaceDeclaration;
    Production {
        lhs: 25,
        production: &[ParseType::N(51)],
    },
    // 48 - Number: IntegralNumber;
    Production {
        lhs: 82,
        production: &[ParseType::N(49)],
    },
    // 49 - IntegralNumber: BinaryNumber;
    Production {
        lhs: 49,
        production: &[ParseType::N(19)],
    },
    // 50 - IntegralNumber: OctalNumber;
    Production {
        lhs: 49,
        production: &[ParseType::N(83)],
    },
    // 51 - IntegralNumber: DecimalNumber;
    Production {
        lhs: 49,
        production: &[ParseType::N(24)],
    },
    // 52 - IntegralNumber: HexNumber;
    Production {
        lhs: 49,
        production: &[ParseType::N(39)],
    },
    // 53 - IntegralNumber: BaseLessNumber;
    Production {
        lhs: 49,
        production: &[ParseType::N(14)],
    },
    // 54 - BinaryNumber: BaseLess BasedBinary;
    Production {
        lhs: 19,
        production: &[ParseType::N(15), ParseType::N(13)],
    },
    // 55 - OctalNumber: BaseLess BasedOctal;
    Production {
        lhs: 83,
        production: &[ParseType::N(18), ParseType::N(13)],
    },
    // 56 - DecimalNumber: BaseLess BasedDecimal;
    Production {
        lhs: 24,
        production: &[ParseType::N(16), ParseType::N(13)],
    },
    // 57 - HexNumber: BaseLess BasedHex;
    Production {
        lhs: 39,
        production: &[ParseType::N(17), ParseType::N(13)],
    },
    // 58 - BaseLessNumber: BaseLess;
    Production {
        lhs: 14,
        production: &[ParseType::N(13)],
    },
    // 59 - OperatorPrecedence1: Plus;
    Production {
        lhs: 84,
        production: &[ParseType::N(89)],
    },
    // 60 - OperatorPrecedence1: Minus;
    Production {
        lhs: 84,
        production: &[ParseType::N(61)],
    },
    // 61 - OperatorPrecedence2: Mul;
    Production {
        lhs: 85,
        production: &[ParseType::N(80)],
    },
    // 62 - OperatorPrecedence2: Div;
    Production {
        lhs: 85,
        production: &[ParseType::N(27)],
    },
    // 63 - Expression: Expression0;
    Production {
        lhs: 29,
        production: &[ParseType::N(30)],
    },
    // 64 - Expression0: Expression1 Expression0List /* Vec */;
    Production {
        lhs: 30,
        production: &[ParseType::N(31), ParseType::N(32)],
    },
    // 65 - Expression0List: OperatorPrecedence1 Expression1 Expression0List;
    Production {
        lhs: 31,
        production: &[ParseType::N(31), ParseType::N(32), ParseType::N(84)],
    },
    // 66 - Expression0List: ;
    Production {
        lhs: 31,
        production: &[],
    },
    // 67 - Expression1: Expression2 Expression1List /* Vec */;
    Production {
        lhs: 32,
        production: &[ParseType::N(33), ParseType::N(34)],
    },
    // 68 - Expression1List: OperatorPrecedence2 Expression2 Expression1List;
    Production {
        lhs: 33,
        production: &[ParseType::N(33), ParseType::N(34), ParseType::N(85)],
    },
    // 69 - Expression1List: ;
    Production {
        lhs: 33,
        production: &[],
    },
    // 70 - Expression2: Factor;
    Production {
        lhs: 34,
        production: &[ParseType::N(37)],
    },
    // 71 - Factor: Number;
    Production {
        lhs: 37,
        production: &[ParseType::N(82)],
    },
    // 72 - Factor: Identifier FactorOpt /* Option */;
    Production {
        lhs: 37,
        production: &[ParseType::N(38), ParseType::N(42)],
    },
    // 73 - Factor: LParen Expression RParen;
    Production {
        lhs: 37,
        production: &[ParseType::N(93), ParseType::N(29), ParseType::N(57)],
    },
    // 74 - FactorOpt: Range;
    Production {
        lhs: 38,
        production: &[ParseType::N(94)],
    },
    // 75 - FactorOpt: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 76 - Statement: AssignmentStatement;
    Production {
        lhs: 98,
        production: &[ParseType::N(12)],
    },
    // 77 - Statement: IfStatement;
    Production {
        lhs: 98,
        production: &[ParseType::N(44)],
    },
    // 78 - AssignmentStatement: Identifier Assignment Expression SemiColon;
    Production {
        lhs: 12,
        production: &[
            ParseType::N(96),
            ParseType::N(29),
            ParseType::N(11),
            ParseType::N(42),
        ],
    },
    // 79 - IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
    Production {
        lhs: 44,
        production: &[
            ParseType::N(46),
            ParseType::N(45),
            ParseType::N(91),
            ParseType::N(98),
            ParseType::N(55),
            ParseType::N(29),
            ParseType::N(43),
        ],
    },
    // 80 - IfStatementList: Else If Expression LBrace Statement RBrace IfStatementList;
    Production {
        lhs: 45,
        production: &[
            ParseType::N(45),
            ParseType::N(91),
            ParseType::N(98),
            ParseType::N(55),
            ParseType::N(29),
            ParseType::N(43),
            ParseType::N(28),
        ],
    },
    // 81 - IfStatementList: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 82 - IfStatementOpt: Else LBrace Statement RBrace;
    Production {
        lhs: 46,
        production: &[
            ParseType::N(91),
            ParseType::N(98),
            ParseType::N(55),
            ParseType::N(28),
        ],
    },
    // 83 - IfStatementOpt: ;
    Production {
        lhs: 46,
        production: &[],
    },
    // 84 - Range: LBracket Expression RangeOpt /* Option */ RBracket;
    Production {
        lhs: 94,
        production: &[
            ParseType::N(92),
            ParseType::N(95),
            ParseType::N(29),
            ParseType::N(56),
        ],
    },
    // 85 - RangeOpt: Colon Expression;
    Production {
        lhs: 95,
        production: &[ParseType::N(29), ParseType::N(22)],
    },
    // 86 - RangeOpt: ;
    Production {
        lhs: 95,
        production: &[],
    },
    // 87 - Width: LBracket Expression RBracket;
    Production {
        lhs: 107,
        production: &[ParseType::N(92), ParseType::N(29), ParseType::N(56)],
    },
    // 88 - BuiltinType: Logic;
    Production {
        lhs: 21,
        production: &[ParseType::N(60)],
    },
    // 89 - BuiltinType: Bit;
    Production {
        lhs: 21,
        production: &[ParseType::N(20)],
    },
    // 90 - BuiltinType: U32;
    Production {
        lhs: 21,
        production: &[ParseType::N(102)],
    },
    // 91 - BuiltinType: U64;
    Production {
        lhs: 21,
        production: &[ParseType::N(103)],
    },
    // 92 - BuiltinType: I32;
    Production {
        lhs: 21,
        production: &[ParseType::N(40)],
    },
    // 93 - BuiltinType: I64;
    Production {
        lhs: 21,
        production: &[ParseType::N(41)],
    },
    // 94 - BuiltinType: F32;
    Production {
        lhs: 21,
        production: &[ParseType::N(35)],
    },
    // 95 - BuiltinType: F64;
    Production {
        lhs: 21,
        production: &[ParseType::N(36)],
    },
    // 96 - Type: TypeGroup TypeList /* Vec */;
    Production {
        lhs: 99,
        production: &[ParseType::N(101), ParseType::N(100)],
    },
    // 97 - TypeGroup: BuiltinType;
    Production {
        lhs: 100,
        production: &[ParseType::N(21)],
    },
    // 98 - TypeGroup: Identifier;
    Production {
        lhs: 100,
        production: &[ParseType::N(42)],
    },
    // 99 - TypeList: Width TypeList;
    Production {
        lhs: 101,
        production: &[ParseType::N(101), ParseType::N(107)],
    },
    // 100 - TypeList: ;
    Production {
        lhs: 101,
        production: &[],
    },
    // 101 - WithParameter: Sharp LParen WithParameterOpt /* Option */ RParen;
    Production {
        lhs: 108,
        production: &[
            ParseType::N(93),
            ParseType::N(114),
            ParseType::N(57),
            ParseType::N(97),
        ],
    },
    // 102 - WithParameterOpt: WithParameterList;
    Production {
        lhs: 114,
        production: &[ParseType::N(111)],
    },
    // 103 - WithParameterOpt: ;
    Production {
        lhs: 114,
        production: &[],
    },
    // 104 - WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
    Production {
        lhs: 111,
        production: &[ParseType::N(113), ParseType::N(112), ParseType::N(109)],
    },
    // 105 - WithParameterListList: Comma WithParameterItem WithParameterListList;
    Production {
        lhs: 112,
        production: &[ParseType::N(112), ParseType::N(109), ParseType::N(23)],
    },
    // 106 - WithParameterListList: ;
    Production {
        lhs: 112,
        production: &[],
    },
    // 107 - WithParameterListOpt: Comma;
    Production {
        lhs: 113,
        production: &[ParseType::N(23)],
    },
    // 108 - WithParameterListOpt: ;
    Production {
        lhs: 113,
        production: &[],
    },
    // 109 - WithParameterItem: WithParameterItemGroup Identifier Colon Type Assignment Expression;
    Production {
        lhs: 109,
        production: &[
            ParseType::N(29),
            ParseType::N(11),
            ParseType::N(99),
            ParseType::N(22),
            ParseType::N(42),
            ParseType::N(110),
        ],
    },
    // 110 - WithParameterItemGroup: Parameter;
    Production {
        lhs: 110,
        production: &[ParseType::N(87)],
    },
    // 111 - WithParameterItemGroup: Localparam;
    Production {
        lhs: 110,
        production: &[ParseType::N(58)],
    },
    // 112 - ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 69,
        production: &[
            ParseType::N(91),
            ParseType::N(70),
            ParseType::N(55),
            ParseType::N(72),
            ParseType::N(71),
            ParseType::N(42),
            ParseType::N(68),
        ],
    },
    // 113 - ModuleDeclarationList: ModuleItem ModuleDeclarationList;
    Production {
        lhs: 70,
        production: &[ParseType::N(70), ParseType::N(73)],
    },
    // 114 - ModuleDeclarationList: ;
    Production {
        lhs: 70,
        production: &[],
    },
    // 115 - ModuleDeclarationOpt0: ModulePort;
    Production {
        lhs: 72,
        production: &[ParseType::N(74)],
    },
    // 116 - ModuleDeclarationOpt0: ;
    Production {
        lhs: 72,
        production: &[],
    },
    // 117 - ModuleDeclarationOpt: WithParameter;
    Production {
        lhs: 71,
        production: &[ParseType::N(108)],
    },
    // 118 - ModuleDeclarationOpt: ;
    Production {
        lhs: 71,
        production: &[],
    },
    // 119 - ModulePort: LParen ModulePortOpt /* Option */ RParen;
    Production {
        lhs: 74,
        production: &[ParseType::N(93), ParseType::N(79), ParseType::N(57)],
    },
    // 120 - ModulePortOpt: ModulePortList;
    Production {
        lhs: 79,
        production: &[ParseType::N(76)],
    },
    // 121 - ModulePortOpt: ;
    Production {
        lhs: 79,
        production: &[],
    },
    // 122 - ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
    Production {
        lhs: 76,
        production: &[ParseType::N(78), ParseType::N(77), ParseType::N(75)],
    },
    // 123 - ModulePortListList: Comma ModulePortItem ModulePortListList;
    Production {
        lhs: 77,
        production: &[ParseType::N(77), ParseType::N(75), ParseType::N(23)],
    },
    // 124 - ModulePortListList: ;
    Production {
        lhs: 77,
        production: &[],
    },
    // 125 - ModulePortListOpt: Comma;
    Production {
        lhs: 78,
        production: &[ParseType::N(23)],
    },
    // 126 - ModulePortListOpt: ;
    Production {
        lhs: 78,
        production: &[],
    },
    // 127 - ModulePortItem: Identifier Colon Direction Type;
    Production {
        lhs: 75,
        production: &[
            ParseType::N(99),
            ParseType::N(26),
            ParseType::N(22),
            ParseType::N(42),
        ],
    },
    // 128 - Direction: Input;
    Production {
        lhs: 26,
        production: &[ParseType::N(48)],
    },
    // 129 - Direction: Output;
    Production {
        lhs: 26,
        production: &[ParseType::N(86)],
    },
    // 130 - Direction: Inout;
    Production {
        lhs: 26,
        production: &[ParseType::N(47)],
    },
    // 131 - ModuleItem: VariableDeclaration;
    Production {
        lhs: 73,
        production: &[ParseType::N(104)],
    },
    // 132 - ModuleItem: ParameterDeclaration;
    Production {
        lhs: 73,
        production: &[ParseType::N(88)],
    },
    // 133 - ModuleItem: LocalparamDeclaration;
    Production {
        lhs: 73,
        production: &[ParseType::N(59)],
    },
    // 134 - ModuleItem: AlwaysFFDeclaration;
    Production {
        lhs: 73,
        production: &[ParseType::N(9)],
    },
    // 135 - ModuleItem: AlwaysCombDeclaration;
    Production {
        lhs: 73,
        production: &[ParseType::N(1)],
    },
    // 136 - InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 51,
        production: &[
            ParseType::N(91),
            ParseType::N(52),
            ParseType::N(55),
            ParseType::N(53),
            ParseType::N(42),
            ParseType::N(50),
        ],
    },
    // 137 - InterfaceDeclarationList: InterfaceItem InterfaceDeclarationList;
    Production {
        lhs: 52,
        production: &[ParseType::N(52), ParseType::N(54)],
    },
    // 138 - InterfaceDeclarationList: ;
    Production {
        lhs: 52,
        production: &[],
    },
    // 139 - InterfaceDeclarationOpt: WithParameter;
    Production {
        lhs: 53,
        production: &[ParseType::N(108)],
    },
    // 140 - InterfaceDeclarationOpt: ;
    Production {
        lhs: 53,
        production: &[],
    },
    // 141 - InterfaceItem: VariableDeclaration;
    Production {
        lhs: 54,
        production: &[ParseType::N(104)],
    },
    // 142 - InterfaceItem: ParameterDeclaration;
    Production {
        lhs: 54,
        production: &[ParseType::N(88)],
    },
    // 143 - InterfaceItem: LocalparamDeclaration;
    Production {
        lhs: 54,
        production: &[ParseType::N(59)],
    },
    // 144 - InterfaceItem: ModportDeclaration;
    Production {
        lhs: 54,
        production: &[ParseType::N(63)],
    },
    // 145 - VariableDeclaration: Identifier Colon Type SemiColon;
    Production {
        lhs: 104,
        production: &[
            ParseType::N(96),
            ParseType::N(99),
            ParseType::N(22),
            ParseType::N(42),
        ],
    },
    // 146 - ParameterDeclaration: Parameter Identifier Colon Type Assignment Expression SemiColon;
    Production {
        lhs: 88,
        production: &[
            ParseType::N(96),
            ParseType::N(29),
            ParseType::N(11),
            ParseType::N(99),
            ParseType::N(22),
            ParseType::N(42),
            ParseType::N(87),
        ],
    },
    // 147 - LocalparamDeclaration: Localparam Identifier Colon Type Assignment Expression SemiColon;
    Production {
        lhs: 59,
        production: &[
            ParseType::N(96),
            ParseType::N(29),
            ParseType::N(11),
            ParseType::N(99),
            ParseType::N(22),
            ParseType::N(42),
            ParseType::N(58),
        ],
    },
    // 148 - AlwaysFFDeclaration: AlwaysFF LParen AlwaysFFConditions RParen LBrace AlwaysFFDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 9,
        production: &[
            ParseType::N(91),
            ParseType::N(10),
            ParseType::N(55),
            ParseType::N(93),
            ParseType::N(6),
            ParseType::N(57),
            ParseType::N(3),
        ],
    },
    // 149 - AlwaysFFDeclarationList: Statement AlwaysFFDeclarationList;
    Production {
        lhs: 10,
        production: &[ParseType::N(10), ParseType::N(98)],
    },
    // 150 - AlwaysFFDeclarationList: ;
    Production {
        lhs: 10,
        production: &[],
    },
    // 151 - AlwaysFFConditions: AlwaysFFCondition AlwaysFFConditionsList /* Vec */ AlwaysFFConditionsOpt /* Option */;
    Production {
        lhs: 6,
        production: &[ParseType::N(8), ParseType::N(7), ParseType::N(4)],
    },
    // 152 - AlwaysFFConditionsList: Comma AlwaysFFCondition AlwaysFFConditionsList;
    Production {
        lhs: 7,
        production: &[ParseType::N(7), ParseType::N(4), ParseType::N(23)],
    },
    // 153 - AlwaysFFConditionsList: ;
    Production {
        lhs: 7,
        production: &[],
    },
    // 154 - AlwaysFFConditionsOpt: Comma;
    Production {
        lhs: 8,
        production: &[ParseType::N(23)],
    },
    // 155 - AlwaysFFConditionsOpt: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 156 - AlwaysFFCondition: AlwaysFFConditionGroup Identifier;
    Production {
        lhs: 4,
        production: &[ParseType::N(42), ParseType::N(5)],
    },
    // 157 - AlwaysFFConditionGroup: Posedge;
    Production {
        lhs: 5,
        production: &[ParseType::N(90)],
    },
    // 158 - AlwaysFFConditionGroup: Negedge;
    Production {
        lhs: 5,
        production: &[ParseType::N(81)],
    },
    // 159 - AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 1,
        production: &[
            ParseType::N(91),
            ParseType::N(2),
            ParseType::N(55),
            ParseType::N(0),
        ],
    },
    // 160 - AlwaysCombDeclarationList: Statement AlwaysCombDeclarationList;
    Production {
        lhs: 2,
        production: &[ParseType::N(2), ParseType::N(98)],
    },
    // 161 - AlwaysCombDeclarationList: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 162 - ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
    Production {
        lhs: 63,
        production: &[
            ParseType::N(91),
            ParseType::N(65),
            ParseType::N(55),
            ParseType::N(42),
            ParseType::N(62),
        ],
    },
    // 163 - ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
    Production {
        lhs: 65,
        production: &[ParseType::N(67), ParseType::N(66), ParseType::N(64)],
    },
    // 164 - ModportListList: Comma ModportItem ModportListList;
    Production {
        lhs: 66,
        production: &[ParseType::N(66), ParseType::N(64), ParseType::N(23)],
    },
    // 165 - ModportListList: ;
    Production {
        lhs: 66,
        production: &[],
    },
    // 166 - ModportListOpt: Comma;
    Production {
        lhs: 67,
        production: &[ParseType::N(23)],
    },
    // 167 - ModportListOpt: ;
    Production {
        lhs: 67,
        production: &[],
    },
    // 168 - ModportItem: Identifier Colon Direction;
    Production {
        lhs: 64,
        production: &[ParseType::N(26), ParseType::N(22), ParseType::N(42)],
    },
];

parol_runtime::lazy_static::lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![
        ("INITIAL", Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()),

    ];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut VerylGrammar<'t>,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        105,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = VerylGrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
