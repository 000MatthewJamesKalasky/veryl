%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*   0 */ BasedBinary: /'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/;
/*   1 */ BasedOctal: /'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/;
/*   2 */ BasedDecimal: /'d[0-9]+(?:_[0-9]+)*/;
/*   3 */ BasedHex: /'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/;
/*   4 */ BaseLess: /[0-9]+(?:_[0-9]+)*/;
/*   5 */ Plus: '+';
/*   6 */ Minus: '-';
/*   7 */ Mul: '*';
/*   8 */ Div: '/';
/*   9 */ Colon: ':';
/*  10 */ SemiColon: ';';
/*  11 */ Comma: ',';
/*  12 */ LParen: '(';
/*  13 */ RParen: ')';
/*  14 */ LBracket: '[';
/*  15 */ RBracket: ']';
/*  16 */ LBrace: '{';
/*  17 */ RBrace: '}';
/*  18 */ Assignment: '=';
/*  19 */ Sharp: '#';
/*  20 */ Logic: 'logic';
/*  21 */ Bit: 'bit';
/*  22 */ AlwaysFF: 'always_ff';
/*  23 */ AlwaysComb: 'always_comb';
/*  24 */ Posedge: 'posedge';
/*  25 */ Negedge: 'negedge';
/*  26 */ If: 'if';
/*  27 */ Else: 'else';
/*  28 */ Parameter: 'parameter';
/*  29 */ Localparam: 'localparam';
/*  30 */ Module: 'module';
/*  31 */ Interface: 'interface';
/*  32 */ Input: 'input';
/*  33 */ Output: 'output';
/*  34 */ Inout: 'inout';
/*  35 */ Modport: 'modport';
/*  36 */ U32: 'u32';
/*  37 */ U64: 'u64';
/*  38 */ I32: 'i32';
/*  39 */ I64: 'i64';
/*  40 */ F32: 'f32';
/*  41 */ F64: 'f64';
/*  42 */ Identifier: /[a-zA-Z_][0-9a-zA-Z_]*/;
/*  43 */ Veryl: VerylList /* Vec */;
/*  44 */ VerylList /* Vec<T>::Push */: Description VerylList;
/*  45 */ VerylList /* Vec<T>::New */: ;
/*  46 */ Description: ModuleDeclaration;
/*  47 */ Description: InterfaceDeclaration;
/*  48 */ Number: IntegralNumber;
/*  49 */ IntegralNumber: BinaryNumber;
/*  50 */ IntegralNumber: OctalNumber;
/*  51 */ IntegralNumber: DecimalNumber;
/*  52 */ IntegralNumber: HexNumber;
/*  53 */ IntegralNumber: BaseLessNumber;
/*  54 */ BinaryNumber: BaseLess BasedBinary;
/*  55 */ OctalNumber: BaseLess BasedOctal;
/*  56 */ DecimalNumber: BaseLess BasedDecimal;
/*  57 */ HexNumber: BaseLess BasedHex;
/*  58 */ BaseLessNumber: BaseLess;
/*  59 */ OperatorPrecedence1: Plus;
/*  60 */ OperatorPrecedence1: Minus;
/*  61 */ OperatorPrecedence2: Mul;
/*  62 */ OperatorPrecedence2: Div;
/*  63 */ Expression: Expression0;
/*  64 */ Expression0: Expression1 Expression0List /* Vec */;
/*  65 */ Expression0List /* Vec<T>::Push */: OperatorPrecedence1 Expression1 Expression0List;
/*  66 */ Expression0List /* Vec<T>::New */: ;
/*  67 */ Expression1: Expression2 Expression1List /* Vec */;
/*  68 */ Expression1List /* Vec<T>::Push */: OperatorPrecedence2 Expression2 Expression1List;
/*  69 */ Expression1List /* Vec<T>::New */: ;
/*  70 */ Expression2: Factor;
/*  71 */ Factor: Number;
/*  72 */ Factor: Identifier FactorOpt /* Option */;
/*  73 */ Factor: LParen Expression RParen;
/*  74 */ FactorOpt /* Option<T>::Some */: Range;
/*  75 */ FactorOpt /* Option<T>::None */: ;
/*  76 */ Statement: AssignmentStatement;
/*  77 */ Statement: IfStatement;
/*  78 */ AssignmentStatement: Identifier Assignment Expression SemiColon;
/*  79 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/*  80 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/*  81 */ IfStatementList /* Vec<T>::New */: ;
/*  82 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/*  83 */ IfStatementOpt /* Option<T>::None */: ;
/*  84 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/*  85 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/*  86 */ RangeOpt /* Option<T>::None */: ;
/*  87 */ Width: LBracket Expression RBracket;
/*  88 */ BuiltinType: Logic;
/*  89 */ BuiltinType: Bit;
/*  90 */ BuiltinType: U32;
/*  91 */ BuiltinType: U64;
/*  92 */ BuiltinType: I32;
/*  93 */ BuiltinType: I64;
/*  94 */ BuiltinType: F32;
/*  95 */ BuiltinType: F64;
/*  96 */ Type: TypeGroup TypeList /* Vec */;
/*  97 */ TypeGroup: BuiltinType;
/*  98 */ TypeGroup: Identifier;
/*  99 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 100 */ TypeList /* Vec<T>::New */: ;
/* 101 */ WithParameter: Sharp LParen WithParameterOpt /* Option */ RParen;
/* 102 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 103 */ WithParameterOpt /* Option<T>::None */: ;
/* 104 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 105 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 106 */ WithParameterListList /* Vec<T>::New */: ;
/* 107 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 108 */ WithParameterListOpt /* Option<T>::None */: ;
/* 109 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Assignment Expression;
/* 110 */ WithParameterItemGroup: Parameter;
/* 111 */ WithParameterItemGroup: Localparam;
/* 112 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 113 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 114 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 115 */ ModuleDeclarationOpt0 /* Option<T>::Some */: ModulePort;
/* 116 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 117 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 118 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 119 */ ModulePort: LParen ModulePortOpt /* Option */ RParen;
/* 120 */ ModulePortOpt /* Option<T>::Some */: ModulePortList;
/* 121 */ ModulePortOpt /* Option<T>::None */: ;
/* 122 */ ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
/* 123 */ ModulePortListList /* Vec<T>::Push */: Comma ModulePortItem ModulePortListList;
/* 124 */ ModulePortListList /* Vec<T>::New */: ;
/* 125 */ ModulePortListOpt /* Option<T>::Some */: Comma;
/* 126 */ ModulePortListOpt /* Option<T>::None */: ;
/* 127 */ ModulePortItem: Identifier Colon Direction Type;
/* 128 */ Direction: Input;
/* 129 */ Direction: Output;
/* 130 */ Direction: Inout;
/* 131 */ ModuleItem: VariableDeclaration;
/* 132 */ ModuleItem: ParameterDeclaration;
/* 133 */ ModuleItem: LocalparamDeclaration;
/* 134 */ ModuleItem: AlwaysFFDeclaration;
/* 135 */ ModuleItem: AlwaysCombDeclaration;
/* 136 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 137 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 138 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 139 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 140 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 141 */ InterfaceItem: VariableDeclaration;
/* 142 */ InterfaceItem: ParameterDeclaration;
/* 143 */ InterfaceItem: LocalparamDeclaration;
/* 144 */ InterfaceItem: ModportDeclaration;
/* 145 */ VariableDeclaration: Identifier Colon Type SemiColon;
/* 146 */ ParameterDeclaration: Parameter Identifier Colon Type Assignment Expression SemiColon;
/* 147 */ LocalparamDeclaration: Localparam Identifier Colon Type Assignment Expression SemiColon;
/* 148 */ AlwaysFFDeclaration: AlwaysFF LParen AlwaysFFConditions RParen LBrace AlwaysFFDeclarationList /* Vec */ RBrace;
/* 149 */ AlwaysFFDeclarationList /* Vec<T>::Push */: Statement AlwaysFFDeclarationList;
/* 150 */ AlwaysFFDeclarationList /* Vec<T>::New */: ;
/* 151 */ AlwaysFFConditions: AlwaysFFCondition AlwaysFFConditionsList /* Vec */ AlwaysFFConditionsOpt /* Option */;
/* 152 */ AlwaysFFConditionsList /* Vec<T>::Push */: Comma AlwaysFFCondition AlwaysFFConditionsList;
/* 153 */ AlwaysFFConditionsList /* Vec<T>::New */: ;
/* 154 */ AlwaysFFConditionsOpt /* Option<T>::Some */: Comma;
/* 155 */ AlwaysFFConditionsOpt /* Option<T>::None */: ;
/* 156 */ AlwaysFFCondition: AlwaysFFConditionGroup Identifier;
/* 157 */ AlwaysFFConditionGroup: Posedge;
/* 158 */ AlwaysFFConditionGroup: Negedge;
/* 159 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 160 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 161 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 162 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 163 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 164 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 165 */ ModportListList /* Vec<T>::New */: ;
/* 166 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 167 */ ModportListOpt /* Option<T>::None */: ;
/* 168 */ ModportItem: Identifier Colon Direction;
