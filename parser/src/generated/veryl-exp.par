%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*   0 */ BasedBinary: /'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/;
/*   1 */ BasedOctal: /'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/;
/*   2 */ BasedDecimal: /'d[0-9]+(?:_[0-9]+)*/;
/*   3 */ BasedHex: /'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/;
/*   4 */ BaseLess: /[0-9]+(?:_[0-9]+)*/;
/*   5 */ Plus: '+';
/*   6 */ Minus: '-';
/*   7 */ Mul: '*';
/*   8 */ Div: '/';
/*   9 */ Colon: ':';
/*  10 */ SemiColon: ';';
/*  11 */ Comma: ',';
/*  12 */ LParen: '(';
/*  13 */ RParen: ')';
/*  14 */ LBracket: '[';
/*  15 */ RBracket: ']';
/*  16 */ LBrace: '{';
/*  17 */ RBrace: '}';
/*  18 */ Assignment: '=';
/*  19 */ Sharp: '#';
/*  20 */ Logic: 'logic';
/*  21 */ Bit: 'bit';
/*  22 */ AlwaysFF: 'always_ff';
/*  23 */ AlwaysComb: 'always_comb';
/*  24 */ Posedge: 'posedge';
/*  25 */ Negedge: 'negedge';
/*  26 */ If: 'if';
/*  27 */ Else: 'else';
/*  28 */ Parameter: 'parameter';
/*  29 */ Localparam: 'localparam';
/*  30 */ Module: 'module';
/*  31 */ Interface: 'interface';
/*  32 */ Input: 'input';
/*  33 */ Output: 'output';
/*  34 */ Inout: 'inout';
/*  35 */ Identifier: /[a-zA-Z_][0-9a-zA-Z_]*/;
/*  36 */ Veryl: VerylList /* Vec */;
/*  37 */ VerylList /* Vec<T>::Push */: Description VerylList;
/*  38 */ VerylList /* Vec<T>::New */: ;
/*  39 */ Description: ModuleDeclaration;
/*  40 */ Description: InterfaceDeclaration;
/*  41 */ Number: IntegralNumber;
/*  42 */ IntegralNumber: BinaryNumber;
/*  43 */ IntegralNumber: OctalNumber;
/*  44 */ IntegralNumber: DecimalNumber;
/*  45 */ IntegralNumber: HexNumber;
/*  46 */ IntegralNumber: BaseLessNumber;
/*  47 */ BinaryNumber: BaseLess BasedBinary;
/*  48 */ OctalNumber: BaseLess BasedOctal;
/*  49 */ DecimalNumber: BaseLess BasedDecimal;
/*  50 */ HexNumber: BaseLess BasedHex;
/*  51 */ BaseLessNumber: BaseLess;
/*  52 */ OperatorPrecedence1: Plus;
/*  53 */ OperatorPrecedence1: Minus;
/*  54 */ OperatorPrecedence2: Mul;
/*  55 */ OperatorPrecedence2: Div;
/*  56 */ Expression: Expression0;
/*  57 */ Expression0: Expression1 Expression0List /* Vec */;
/*  58 */ Expression0List /* Vec<T>::Push */: OperatorPrecedence1 Expression1 Expression0List;
/*  59 */ Expression0List /* Vec<T>::New */: ;
/*  60 */ Expression1: Expression2 Expression1List /* Vec */;
/*  61 */ Expression1List /* Vec<T>::Push */: OperatorPrecedence2 Expression2 Expression1List;
/*  62 */ Expression1List /* Vec<T>::New */: ;
/*  63 */ Expression2: Factor;
/*  64 */ Factor: Number;
/*  65 */ Factor: Identifier FactorOpt /* Option */;
/*  66 */ Factor: LParen Expression RParen;
/*  67 */ FactorOpt /* Option<T>::Some */: Range;
/*  68 */ FactorOpt /* Option<T>::None */: ;
/*  69 */ Statement: AssignmentStatement;
/*  70 */ Statement: IfStatement;
/*  71 */ AssignmentStatement: Identifier Assignment Expression SemiColon;
/*  72 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/*  73 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/*  74 */ IfStatementList /* Vec<T>::New */: ;
/*  75 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/*  76 */ IfStatementOpt /* Option<T>::None */: ;
/*  77 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/*  78 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/*  79 */ RangeOpt /* Option<T>::None */: ;
/*  80 */ Width: LBracket Expression RBracket;
/*  81 */ BuiltinType: Logic;
/*  82 */ BuiltinType: Bit;
/*  83 */ Type: TypeGroup TypeList /* Vec */;
/*  84 */ TypeGroup: BuiltinType;
/*  85 */ TypeGroup: Identifier;
/*  86 */ TypeList /* Vec<T>::Push */: Width TypeList;
/*  87 */ TypeList /* Vec<T>::New */: ;
/*  88 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/*  89 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/*  90 */ ModuleDeclarationList /* Vec<T>::New */: ;
/*  91 */ ModuleDeclarationOpt0 /* Option<T>::Some */: ModulePort;
/*  92 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/*  93 */ ModuleDeclarationOpt /* Option<T>::Some */: ModuleParameter;
/*  94 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/*  95 */ ModuleParameter: Sharp LParen ModuleParameterOpt /* Option */ RParen;
/*  96 */ ModuleParameterOpt /* Option<T>::Some */: ModuleParameterList;
/*  97 */ ModuleParameterOpt /* Option<T>::None */: ;
/*  98 */ ModuleParameterList: ModuleParameterItem ModuleParameterListList /* Vec */ ModuleParameterListOpt /* Option */;
/*  99 */ ModuleParameterListList /* Vec<T>::Push */: Comma^ /* Clipped */ ModuleParameterItem ModuleParameterListList;
/* 100 */ ModuleParameterListList /* Vec<T>::New */: ;
/* 101 */ ModuleParameterListOpt /* Option<T>::Some */: Comma^ /* Clipped */;
/* 102 */ ModuleParameterListOpt /* Option<T>::None */: ;
/* 103 */ ModuleParameterItem: ModuleParameterItemGroup Identifier Colon Type Assignment Expression;
/* 104 */ ModuleParameterItemGroup: Parameter;
/* 105 */ ModuleParameterItemGroup: Localparam;
/* 106 */ ModulePort: LParen ModulePortOpt /* Option */ RParen;
/* 107 */ ModulePortOpt /* Option<T>::Some */: ModulePortList;
/* 108 */ ModulePortOpt /* Option<T>::None */: ;
/* 109 */ ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
/* 110 */ ModulePortListList /* Vec<T>::Push */: Comma ModulePortItem ModulePortListList;
/* 111 */ ModulePortListList /* Vec<T>::New */: ;
/* 112 */ ModulePortListOpt /* Option<T>::Some */: Comma;
/* 113 */ ModulePortListOpt /* Option<T>::None */: ;
/* 114 */ ModulePortItem: Identifier Colon Direction Type;
/* 115 */ Direction: Input;
/* 116 */ Direction: Output;
/* 117 */ Direction: Inout;
/* 118 */ ModuleItem: VariableDeclaration;
/* 119 */ ModuleItem: ParameterDeclaration;
/* 120 */ ModuleItem: LocalparamDeclaration;
/* 121 */ ModuleItem: AlwaysFFDeclaration;
/* 122 */ ModuleItem: AlwaysCombDeclaration;
/* 123 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 124 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 125 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 126 */ InterfaceDeclarationOpt /* Option<T>::Some */: InterfaceParameter;
/* 127 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 128 */ InterfaceParameter: Sharp LParen InterfaceParameterOpt /* Option */ RParen;
/* 129 */ InterfaceParameterOpt /* Option<T>::Some */: InterfaceParameterList;
/* 130 */ InterfaceParameterOpt /* Option<T>::None */: ;
/* 131 */ InterfaceParameterList: InterfaceParameterItem InterfaceParameterListList /* Vec */ InterfaceParameterListOpt /* Option */;
/* 132 */ InterfaceParameterListList /* Vec<T>::Push */: Comma InterfaceParameterItem InterfaceParameterListList;
/* 133 */ InterfaceParameterListList /* Vec<T>::New */: ;
/* 134 */ InterfaceParameterListOpt /* Option<T>::Some */: Comma;
/* 135 */ InterfaceParameterListOpt /* Option<T>::None */: ;
/* 136 */ InterfaceParameterItem: InterfaceParameterItemGroup Identifier Colon Type Assignment Expression;
/* 137 */ InterfaceParameterItemGroup: Parameter;
/* 138 */ InterfaceParameterItemGroup: Localparam;
/* 139 */ InterfaceItem: ParameterDeclaration;
/* 140 */ InterfaceItem: LocalparamDeclaration;
/* 141 */ VariableDeclaration: Identifier Colon Type SemiColon;
/* 142 */ ParameterDeclaration: Parameter Identifier Colon Type Assignment Expression SemiColon;
/* 143 */ LocalparamDeclaration: Localparam Identifier Colon Type Assignment Expression SemiColon;
/* 144 */ AlwaysFFDeclaration: AlwaysFF LParen AlwaysFFConditions RParen LBrace AlwaysFFDeclarationList /* Vec */ RBrace;
/* 145 */ AlwaysFFDeclarationList /* Vec<T>::Push */: Statement AlwaysFFDeclarationList;
/* 146 */ AlwaysFFDeclarationList /* Vec<T>::New */: ;
/* 147 */ AlwaysFFConditions: AlwaysFFCondition AlwaysFFConditionsList /* Vec */ AlwaysFFConditionsOpt /* Option */;
/* 148 */ AlwaysFFConditionsList /* Vec<T>::Push */: Comma AlwaysFFCondition AlwaysFFConditionsList;
/* 149 */ AlwaysFFConditionsList /* Vec<T>::New */: ;
/* 150 */ AlwaysFFConditionsOpt /* Option<T>::Some */: Comma;
/* 151 */ AlwaysFFConditionsOpt /* Option<T>::None */: ;
/* 152 */ AlwaysFFCondition: AlwaysFFConditionGroup Identifier;
/* 153 */ AlwaysFFConditionGroup: Posedge;
/* 154 */ AlwaysFFConditionGroup: Negedge;
/* 155 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 156 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 157 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
