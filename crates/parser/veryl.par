
%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type VerylToken = crate::veryl_token::VerylToken
%user_type OwnedToken = crate::veryl_token::OwnedToken

%%

// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------

MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+": OwnedToken;
Comments    : [ MultiComment ];

StartToken: Comments;

ExponentToken    : /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
FixedPointToken  : /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
BasedToken       : /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/: OwnedToken Comments;
BaseLessToken    : /[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
AllBitToken      : /'[01]/: OwnedToken Comments;

// '->' should be before '-'
MinusGTToken: '->': OwnedToken Comments;

AssignmentOperatorToken: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>="                      : OwnedToken Comments;
BinaryOperatorToken    : "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|": OwnedToken Comments;
CommonOperatorToken    : "\+|-|&|\||\^~|\^|~\^|~&|~\|"                                        : OwnedToken Comments;
UnaryOperatorToken     : "!|~"                                                                : OwnedToken Comments;

ColonToken    : ':' : OwnedToken Comments;
CommaToken    : ',' : OwnedToken Comments;
DollarToken   : '$' : OwnedToken Comments;
DotDotToken   : '..': OwnedToken Comments;
DotToken      : '.' : OwnedToken Comments;
EquToken      : '=' : OwnedToken Comments;
HashToken     : '#' : OwnedToken Comments;
LBraceToken   : '{' : OwnedToken Comments;
LBracketToken : '[' : OwnedToken Comments;
LParenToken   : '(' : OwnedToken Comments;
RBraceToken   : '}' : OwnedToken Comments;
RBracketToken : ']' : OwnedToken Comments;
RParenToken   : ')' : OwnedToken Comments;
SemicolonToken: ';' : OwnedToken Comments;

AlwaysCombToken: /\balways_comb\b/: OwnedToken Comments;
AlwaysFfToken  : /\balways_ff\b/  : OwnedToken Comments;
AssignToken    : /\bassign\b/     : OwnedToken Comments;
AsyncHighToken : /\basync_high\b/ : OwnedToken Comments;
AsyncLowToken  : /\basync_low\b/  : OwnedToken Comments;
BitToken       : /\bbit\b/        : OwnedToken Comments;
ElseToken      : /\belse\b/       : OwnedToken Comments;
EnumToken      : /\benum\b/       : OwnedToken Comments;
F32Token       : /\bf32\b/        : OwnedToken Comments;
F64Token       : /\bf64\b/        : OwnedToken Comments;
ForToken       : /\bfor\b/        : OwnedToken Comments;
FunctionToken  : /\bfunction\b/   : OwnedToken Comments;
I32Token       : /\bi32\b/        : OwnedToken Comments;
I64Token       : /\bi64\b/        : OwnedToken Comments;
IfResetToken   : /\bif_reset\b/   : OwnedToken Comments;
IfToken        : /\bif\b/         : OwnedToken Comments;
InoutToken     : /\binout\b/      : OwnedToken Comments;
InputToken     : /\binput\b/      : OwnedToken Comments;
InstToken      : /\binst\b/       : OwnedToken Comments;
InterfaceToken : /\binterface\b/  : OwnedToken Comments;
InToken        : /\bin\b/         : OwnedToken Comments;
LetToken       : /\blet\b/        : OwnedToken Comments;
LocalparamToken: /\blocalparam\b/ : OwnedToken Comments;
LogicToken     : /\blogic\b/      : OwnedToken Comments;
ModportToken   : /\bmodport\b/    : OwnedToken Comments;
ModuleToken    : /\bmodule\b/     : OwnedToken Comments;
NegedgeToken   : /\bnegedge\b/    : OwnedToken Comments;
OutputToken    : /\boutput\b/     : OwnedToken Comments;
ParameterToken : /\bparameter\b/  : OwnedToken Comments;
PosedgeToken   : /\bposedge\b/    : OwnedToken Comments;
RefToken       : /\bref\b/        : OwnedToken Comments;
ReturnToken    : /\breturn\b/     : OwnedToken Comments;
StepToken      : /\bstep\b/       : OwnedToken Comments;
StructToken    : /\bstruct\b/     : OwnedToken Comments;
SyncHighToken  : /\bsync_high\b/  : OwnedToken Comments;
SyncLowToken   : /\bsync_low\b/   : OwnedToken Comments;
U32Token       : /\bu32\b/        : OwnedToken Comments;
U64Token       : /\bu64\b/        : OwnedToken Comments;

IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/: OwnedToken Comments;

// ----------------------------------------------------------------------------
// VerylToken
// ----------------------------------------------------------------------------

// Start
Start: StartToken: VerylToken;

// Number
Exponent  : ExponentToken  : VerylToken;
FixedPoint: FixedPointToken: VerylToken;
Based     : BasedToken     : VerylToken;
BaseLess  : BaseLessToken  : VerylToken;
AllBit    : AllBitToken    : VerylToken;

// Operator
AssignmentOperator: AssignmentOperatorToken: VerylToken;
CommonOperator    : CommonOperatorToken    : VerylToken;
BinaryOperator    : BinaryOperatorToken    : VerylToken;
UnaryOperator     : UnaryOperatorToken     : VerylToken;

// Symbol
Colon    : ColonToken    : VerylToken;
Comma    : CommaToken    : VerylToken;
Dollar   : DollarToken   : VerylToken;
DotDot   : DotDotToken   : VerylToken;
Dot      : DotToken      : VerylToken;
Equ      : EquToken      : VerylToken;
Hash     : HashToken     : VerylToken;
LBrace   : LBraceToken   : VerylToken;
LBracket : LBracketToken : VerylToken;
LParen   : LParenToken   : VerylToken;
MinusGT  : MinusGTToken  : VerylToken;
RBrace   : RBraceToken   : VerylToken;
RBracket : RBracketToken : VerylToken;
RParen   : RParenToken   : VerylToken;
Semicolon: SemicolonToken: VerylToken;

// Keyword
AlwaysComb: AlwaysCombToken: VerylToken;
AlwaysFf  : AlwaysFfToken  : VerylToken;
Assign    : AssignToken    : VerylToken;
AsyncHigh : AsyncHighToken : VerylToken;
AsyncLow  : AsyncLowToken  : VerylToken;
Bit       : BitToken       : VerylToken;
Else      : ElseToken      : VerylToken;
Enum      : EnumToken      : VerylToken;
F32       : F32Token       : VerylToken;
F64       : F64Token       : VerylToken;
For       : ForToken       : VerylToken;
Function  : FunctionToken  : VerylToken;
I32       : I32Token       : VerylToken;
I64       : I64Token       : VerylToken;
If        : IfToken        : VerylToken;
IfReset   : IfResetToken   : VerylToken;
In        : InToken        : VerylToken;
Inout     : InoutToken     : VerylToken;
Input     : InputToken     : VerylToken;
Inst      : InstToken      : VerylToken;
Interface : InterfaceToken : VerylToken;
Let       : LetToken       : VerylToken;
Localparam: LocalparamToken: VerylToken;
Logic     : LogicToken     : VerylToken;
Modport   : ModportToken   : VerylToken;
Module    : ModuleToken    : VerylToken;
Negedge   : NegedgeToken   : VerylToken;
Output    : OutputToken    : VerylToken;
Parameter : ParameterToken : VerylToken;
Posedge   : PosedgeToken   : VerylToken;
Ref       : RefToken       : VerylToken;
Return    : ReturnToken    : VerylToken;
Step      : StepToken      : VerylToken;
Struct    : StructToken    : VerylToken;
SyncHigh  : SyncHighToken  : VerylToken;
SyncLow   : SyncLowToken   : VerylToken;
U32       : U32Token       : VerylToken;
U64       : U64Token       : VerylToken;

// Identifier
Identifier: IdentifierToken: VerylToken;

// ----------------------------------------------------------------------------
// Number
// ----------------------------------------------------------------------------

Number: IntegralNumber
      | RealNumber
      ;

IntegralNumber: Based
              | BaseLess
              | AllBit
              ;

RealNumber: FixedPoint
          | Exponent
          ;

// ----------------------------------------------------------------------------
// Hierarchical Identifier
// ----------------------------------------------------------------------------

HierarchicalIdentifier: Identifier { Dot Identifier };

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------

Expression : Expression1 { ( BinaryOperator | CommonOperator ) Expression1 };
Expression1: [ ( UnaryOperator | CommonOperator ) ] Factor;

Factor: Number
      | [ Dollar ] HierarchicalIdentifier ( { Range } | LParen [ FunctionCallArg ] RParen )
      | LParen Expression RParen
      ;

FunctionCallArg: Expression { Comma Expression } [ Comma ];

// ----------------------------------------------------------------------------
// Range / Width
// ----------------------------------------------------------------------------

Range: LBracket Expression [ Colon Expression ] RBracket;

Width: LBracket Expression RBracket;

// ----------------------------------------------------------------------------
// Type
// ----------------------------------------------------------------------------

BuiltinType: Logic
           | Bit
           | U32 | U64 | I32 | I64 | F32 | F64
           ;

Type: ( BuiltinType | Identifier ) { Width };

// ----------------------------------------------------------------------------
// Statement
// ----------------------------------------------------------------------------

Statement: AssignmentStatement
         | IfStatement
         | IfResetStatement
         | ReturnStatement
         | ForStatement
         ;

AssignmentStatement: HierarchicalIdentifier ( Equ | AssignmentOperator ) Expression Semicolon;

IfStatement: If Expression LBrace { Statement } RBrace { Else If Expression LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];

IfResetStatement: IfReset LBrace { Statement } RBrace { Else If Expression LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];

ReturnStatement: Return Expression Semicolon;

ForStatement: For Identifier Colon Type In Expression DotDot Expression [ Step AssignmentOperator Expression ] LBrace { Statement } RBrace;

// ----------------------------------------------------------------------------
// Declaration
// ----------------------------------------------------------------------------

LetDeclaration: Let Identifier Colon ( VariableDeclaration | InstanceDeclaration ) Semicolon;

VariableDeclaration: Type [ Equ Expression ];

ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;

LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;

AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock [ Comma AlwaysFfReset ] RParen LBrace { Statement } RBrace;

AlwaysFfClock: [ Posedge | Negedge ] HierarchicalIdentifier;

AlwaysFfReset: [ AsyncLow | AsyncHigh | SyncLow | SyncHigh ] HierarchicalIdentifier;

AlwaysCombDeclaration: AlwaysComb LBrace { Statement } RBrace;

AssignDeclaration: Assign HierarchicalIdentifier Equ Expression Semicolon;

ModportDeclaration: Modport Identifier LBrace ModportList RBrace;

ModportList: ModportItem { Comma ModportItem } [ Comma ];

ModportItem: Identifier Colon Direction;

EnumDeclaration: Enum Identifier Colon Type LBrace EnumList RBrace;

EnumList: EnumItem { Comma EnumItem } [ Comma ];

EnumItem: Identifier [ Equ Expression ];

StructDeclaration: Struct Identifier LBrace StructList RBrace;

StructList: StructItem { Comma StructItem } [ Comma ];

StructItem: Identifier Colon Type;

// ----------------------------------------------------------------------------
// InstanceDeclaration
// ----------------------------------------------------------------------------

InstanceDeclaration: Inst Identifier [ Width ] [ InstanceParameter ] [ LBrace [ InstancePortList ] RBrace ];

InstanceParameter: Hash LParen [ InstanceParameterList ] RParen;

InstanceParameterList: InstanceParameterItem { Comma InstanceParameterItem } [ Comma ];

InstanceParameterItem: Identifier [ Colon Expression ];

InstancePortList: InstancePortItem { Comma InstancePortItem } [ Comma ];

InstancePortItem: Identifier [ Colon Expression ];

// ----------------------------------------------------------------------------
// WithParameter
// ----------------------------------------------------------------------------

WithParameter: Hash LParen [ WithParameterList ] RParen;

WithParameterList: WithParameterItem { Comma WithParameterItem } [ Comma ];

WithParameterItem: ( Parameter | Localparam ) Identifier Colon Type Equ Expression;

// ----------------------------------------------------------------------------
// PortDeclaration
// ----------------------------------------------------------------------------

PortDeclaration: LParen [ PortDeclarationList ] RParen;

PortDeclarationList: PortDeclarationItem { Comma PortDeclarationItem } [ Comma ];

PortDeclarationItem: Identifier Colon Direction Type;

Direction: Input
         | Output
         | Inout
         | Ref
         ;

// ----------------------------------------------------------------------------
// Function
// ----------------------------------------------------------------------------

FunctionDeclaration: Function Identifier [ WithParameter ] [ PortDeclaration ] MinusGT Type LBrace { FunctionItem } RBrace;

FunctionItem: LetDeclaration
            | Statement
            ;

// ----------------------------------------------------------------------------
// Module
// ----------------------------------------------------------------------------

ModuleDeclaration: Module Identifier [ WithParameter ] [ PortDeclaration ] LBrace { ModuleItem } RBrace;

ModuleIfDeclaration: If Expression Colon Identifier LBrace { ModuleItem } RBrace { Else If Expression [ Colon Identifier ] LBrace { ModuleItem } RBrace } [ Else [ Colon Identifier ] LBrace { ModuleItem } RBrace ];

ModuleForDeclaration: For Identifier In Expression DotDot Expression [ Step AssignmentOperator Expression ] Colon Identifier LBrace { ModuleItem } RBrace;

ModuleItem: LetDeclaration
          | ParameterDeclaration
          | LocalparamDeclaration
          | AlwaysFfDeclaration
          | AlwaysCombDeclaration
          | AssignDeclaration
          | FunctionDeclaration
          | ModuleIfDeclaration
          | ModuleForDeclaration
          | EnumDeclaration
          | StructDeclaration
          ;

// ----------------------------------------------------------------------------
// Interface
// ----------------------------------------------------------------------------

InterfaceDeclaration: Interface Identifier [ WithParameter ] LBrace { InterfaceItem } RBrace;

InterfaceIfDeclaration: If Expression Colon Identifier LBrace { InterfaceItem } RBrace { Else If Expression [ Colon Identifier ] LBrace { InterfaceItem } RBrace } [ Else [ Colon Identifier ] LBrace { InterfaceItem } RBrace ];

InterfaceForDeclaration: For Identifier In Expression DotDot Expression [ Step AssignmentOperator Expression ] Colon Identifier LBrace { InterfaceItem } RBrace;

InterfaceItem: LetDeclaration
             | ParameterDeclaration
             | LocalparamDeclaration
             | ModportDeclaration
             | InterfaceIfDeclaration
             | InterfaceForDeclaration
             | EnumDeclaration
             | StructDeclaration
             ;

// ----------------------------------------------------------------------------
// Description
// ----------------------------------------------------------------------------

Description: ModuleDeclaration
           | InterfaceDeclaration
           ;

// ----------------------------------------------------------------------------
// SourceCode
// ----------------------------------------------------------------------------

Veryl: Start { Description };
