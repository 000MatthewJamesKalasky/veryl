
%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type VerylToken = crate::veryl_token::VerylToken
%user_type OwnedToken = crate::veryl_token::OwnedToken

%%

// ----------------------------------------------------------------------------
// Terminals
// ----------------------------------------------------------------------------

MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+": OwnedToken;
Comments    : [ MultiComment ];

// Start
StartToken: Comments;
Start     : StartToken: VerylToken;

// Number
ExponentToken    : /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
FixedPointToken  : /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
BasedToken       : /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/: OwnedToken Comments;
BaseLessToken    : /[0-9]+(?:_[0-9]+)*/: OwnedToken Comments;
AllBitToken      : /'[01]/: OwnedToken Comments;

Exponent  : ExponentToken  : VerylToken;
FixedPoint: FixedPointToken: VerylToken;
Based     : BasedToken     : VerylToken;
BaseLess  : BaseLessToken  : VerylToken;
AllBit    : AllBitToken    : VerylToken;

// Before '-' Operator
MinusGTToken: '->': OwnedToken Comments;

// Operator
BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|": OwnedToken Comments;
CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|"                                        : OwnedToken Comments;
UnaryOperatorToken : "!|~"                                                                : OwnedToken Comments;

CommonOperator: CommonOperatorToken: VerylToken;
BinaryOperator: BinaryOperatorToken: VerylToken;
UnaryOperator : UnaryOperatorToken : VerylToken;

// Symbol
ColonColonColonToken: ':::': OwnedToken Comments;
ColonToken          : ':' : OwnedToken Comments;
CommaToken          : ',' : OwnedToken Comments;
EquToken            : '=' : OwnedToken Comments;
HashToken           : '#' : OwnedToken Comments;
LBraceToken         : '{' : OwnedToken Comments;
LBracketToken       : '[' : OwnedToken Comments;
LParenToken         : '(' : OwnedToken Comments;
RBraceToken         : '}' : OwnedToken Comments;
RBracketToken       : ']' : OwnedToken Comments;
RParenToken         : ')' : OwnedToken Comments;
SemicolonToken      : ';' : OwnedToken Comments;

ColonColonColon: ColonColonColonToken: VerylToken;
Colon          : ColonToken          : VerylToken;
Comma          : CommaToken          : VerylToken;
Equ            : EquToken            : VerylToken;
Hash           : HashToken           : VerylToken;
LBrace         : LBraceToken         : VerylToken;
LBracket       : LBracketToken       : VerylToken;
LParen         : LParenToken         : VerylToken;
MinusGT        : MinusGTToken        : VerylToken;
RBrace         : RBraceToken         : VerylToken;
RBracket       : RBracketToken       : VerylToken;
RParen         : RParenToken         : VerylToken;
Semicolon      : SemicolonToken      : VerylToken;

// Keyword
AlwaysCombToken: 'always_comb': OwnedToken Comments;
AlwaysFfToken  : 'always_ff'  : OwnedToken Comments;
AssignToken    : 'assign'     : OwnedToken Comments;
AsyncHighToken : 'async_high' : OwnedToken Comments;
AsyncLowToken  : 'async_low'  : OwnedToken Comments;
BitToken       : 'bit'        : OwnedToken Comments;
ElseToken      : 'else'       : OwnedToken Comments;
F32Token       : 'f32'        : OwnedToken Comments;
F64Token       : 'f64'        : OwnedToken Comments;
FunctionToken  : 'function'   : OwnedToken Comments;
I32Token       : 'i32'        : OwnedToken Comments;
I64Token       : 'i64'        : OwnedToken Comments;
IfResetToken   : 'if_reset'   : OwnedToken Comments;
IfToken        : 'if'         : OwnedToken Comments;
InoutToken     : 'inout'      : OwnedToken Comments;
InputToken     : 'input'      : OwnedToken Comments;
InterfaceToken : 'interface'  : OwnedToken Comments;
LocalparamToken: 'localparam' : OwnedToken Comments;
LogicToken     : 'logic'      : OwnedToken Comments;
ModportToken   : 'modport'    : OwnedToken Comments;
ModuleToken    : 'module'     : OwnedToken Comments;
NegedgeToken   : 'negedge'    : OwnedToken Comments;
OutputToken    : 'output'     : OwnedToken Comments;
ParameterToken : 'parameter'  : OwnedToken Comments;
PosedgeToken   : 'posedge'    : OwnedToken Comments;
RefToken       : 'ref'        : OwnedToken Comments;
ReturnToken    : 'return'     : OwnedToken Comments;
SyncHighToken  : 'sync_high'  : OwnedToken Comments;
SyncLowToken   : 'sync_low'   : OwnedToken Comments;
U32Token       : 'u32'        : OwnedToken Comments;
U64Token       : 'u64'        : OwnedToken Comments;

AlwaysComb: AlwaysCombToken: VerylToken;
AlwaysFf  : AlwaysFfToken  : VerylToken;
Assign    : AssignToken    : VerylToken;
AsyncHigh : AsyncHighToken : VerylToken;
AsyncLow  : AsyncLowToken  : VerylToken;
Bit       : BitToken       : VerylToken;
Else      : ElseToken      : VerylToken;
F32       : F32Token       : VerylToken;
F64       : F64Token       : VerylToken;
Function  : FunctionToken  : VerylToken;
I32       : I32Token       : VerylToken;
I64       : I64Token       : VerylToken;
IfReset   : IfResetToken   : VerylToken;
If        : IfToken        : VerylToken;
Inout     : InoutToken     : VerylToken;
Input     : InputToken     : VerylToken;
Interface : InterfaceToken : VerylToken;
Localparam: LocalparamToken: VerylToken;
Logic     : LogicToken     : VerylToken;
Modport   : ModportToken   : VerylToken;
Module    : ModuleToken    : VerylToken;
Negedge   : NegedgeToken   : VerylToken;
Output    : OutputToken    : VerylToken;
Parameter : ParameterToken : VerylToken;
Posedge   : PosedgeToken   : VerylToken;
Ref       : RefToken       : VerylToken;
Return    : ReturnToken    : VerylToken;
SyncHigh  : SyncHighToken  : VerylToken;
SyncLow   : SyncLowToken   : VerylToken;
U32       : U32Token       : VerylToken;
U64       : U64Token       : VerylToken;

// Identifier
IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/: OwnedToken Comments;
Identifier     : IdentifierToken: VerylToken;

// ----------------------------------------------------------------------------
// Number
// ----------------------------------------------------------------------------

Number: IntegralNumber
      | RealNumber
      ;

IntegralNumber: Based
              | BaseLess
              | AllBit
              ;

RealNumber: FixedPoint
          | Exponent
          ;

// ----------------------------------------------------------------------------
// Expression
// ----------------------------------------------------------------------------

Expression : Expression1 { ( BinaryOperator | CommonOperator ) Expression1 };
Expression1: [ ( UnaryOperator | CommonOperator ) ] Factor;

Factor: Number
      | Identifier { Range }
      | LParen Expression RParen
      ;

// ----------------------------------------------------------------------------
// Range / Width
// ----------------------------------------------------------------------------

Range: LBracket Expression [ Colon Expression ] RBracket;

Width: LBracket Expression RBracket;

// ----------------------------------------------------------------------------
// Type
// ----------------------------------------------------------------------------

BuiltinType: Logic
           | Bit
           | U32 | U64 | I32 | I64 | F32 | F64
           ;

Type: ( BuiltinType | Identifier ) { Width };

// ----------------------------------------------------------------------------
// Statement
// ----------------------------------------------------------------------------

Statement: AssignmentStatement
         | IfStatement
         | IfResetStatement
         | ReturnStatement
         ;

AssignmentStatement: Identifier Equ Expression Semicolon;

IfStatement: If Expression LBrace { Statement } RBrace { Else If Expression LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];

IfResetStatement: IfReset LBrace { Statement } RBrace { Else If Expression LBrace { Statement } RBrace } [ Else LBrace { Statement } RBrace ];

ReturnStatement: Return Expression Semicolon;

// ----------------------------------------------------------------------------
// Declaration
// ----------------------------------------------------------------------------

VariableDeclaration: Identifier Colon Type Semicolon;

ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;

LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;

AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock [ Comma AlwaysFfReset ] RParen LBrace { Statement } RBrace;

AlwaysFfClock: [ Posedge | Negedge ] Identifier;

AlwaysFfReset: [ AsyncLow | AsyncHigh | SyncLow | SyncHigh ] Identifier;

AlwaysCombDeclaration: AlwaysComb LBrace { Statement } RBrace;

AssignDeclaration: Assign Identifier [ Colon Type ] Equ Expression Semicolon;

ModportDeclaration: Modport Identifier LBrace ModportList RBrace;

ModportList: ModportItem { Comma ModportItem } [ Comma ];

ModportItem: Identifier Colon Direction;

// ----------------------------------------------------------------------------
// Instantiation
// ----------------------------------------------------------------------------

Instantiation: Identifier ColonColonColon Identifier [ InstanceParameter ] LBrace [ InstancePortList ] RBrace;

InstanceParameter: Hash LParen [ InstanceParameterList ] RParen;

InstanceParameterList: InstanceParameterItem { Comma InstanceParameterItem } [ Comma ];

InstanceParameterItem: Identifier [ Colon Expression ];

InstancePortList: InstancePortItem { Comma InstancePortItem } [ Comma ];

InstancePortItem: Identifier [ Colon Expression ];

// ----------------------------------------------------------------------------
// WithParameter
// ----------------------------------------------------------------------------

WithParameter: Hash LParen [ WithParameterList ] RParen;

WithParameterList: WithParameterItem { Comma WithParameterItem } [ Comma ];

WithParameterItem: ( Parameter | Localparam ) Identifier Colon Type Equ Expression;

// ----------------------------------------------------------------------------
// PortDeclaration
// ----------------------------------------------------------------------------

PortDeclaration: LParen [ PortDeclarationList ] RParen;

PortDeclarationList: PortDeclarationItem { Comma PortDeclarationItem } [ Comma ];

PortDeclarationItem: Identifier Colon Direction Type;

Direction: Input
         | Output
         | Inout
         | Ref
         ;

// ----------------------------------------------------------------------------
// Function
// ----------------------------------------------------------------------------

FunctionDeclaration: Function Identifier [ WithParameter ] [ PortDeclaration ] MinusGT Type LBrace { FunctionItem } RBrace;

FunctionItem: VariableDeclaration
            | Statement
            ;

// ----------------------------------------------------------------------------
// Module
// ----------------------------------------------------------------------------

ModuleDeclaration: Module Identifier [ WithParameter ] [ PortDeclaration ] LBrace { ModuleItem } RBrace;

ModuleItem: VariableDeclaration
          | ParameterDeclaration
          | LocalparamDeclaration
          | AlwaysFfDeclaration
          | AlwaysCombDeclaration
          | AssignDeclaration
          | Instantiation
          | FunctionDeclaration
          ;

// ----------------------------------------------------------------------------
// Interface
// ----------------------------------------------------------------------------

InterfaceDeclaration: Interface Identifier [ WithParameter ] LBrace { InterfaceItem } RBrace;

InterfaceItem: VariableDeclaration
             | ParameterDeclaration
             | LocalparamDeclaration
             | ModportDeclaration
             ;

// ----------------------------------------------------------------------------
// Description
// ----------------------------------------------------------------------------

Description: ModuleDeclaration
           | InterfaceDeclaration
           ;

// ----------------------------------------------------------------------------
// SourceCode
// ----------------------------------------------------------------------------

Veryl: Start { Description };
