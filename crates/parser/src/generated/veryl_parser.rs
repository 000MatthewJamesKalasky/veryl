// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::miette::Result;
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::veryl_grammar::VerylGrammar;
use crate::veryl_grammar_trait::VerylGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 60] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+"###,
    /*  6 */ r###"[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*"###,
    /*  7 */ r###"[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*"###,
    /*  8 */ r###"[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*"###,
    /*  9 */ r###"[0-9]+(?:_[0-9]+)*"###,
    /* 10 */ r###"'[01]"###,
    /* 11 */ r###"\->"###,
    /* 12 */ r###"\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|"###,
    /* 13 */ r###"\+|-|&|\||\^~|\^|~\^|~&|~\|"###,
    /* 14 */ r###"!|~"###,
    /* 15 */ r###":::"###,
    /* 16 */ r###":"###,
    /* 17 */ r###","###,
    /* 18 */ r###"="###,
    /* 19 */ r###"\#"###,
    /* 20 */ r###"\{"###,
    /* 21 */ r###"\["###,
    /* 22 */ r###"\("###,
    /* 23 */ r###"\}"###,
    /* 24 */ r###"\]"###,
    /* 25 */ r###"\)"###,
    /* 26 */ r###";"###,
    /* 27 */ r###"always_comb"###,
    /* 28 */ r###"always_ff"###,
    /* 29 */ r###"assign"###,
    /* 30 */ r###"async_high"###,
    /* 31 */ r###"async_low"###,
    /* 32 */ r###"bit"###,
    /* 33 */ r###"else"###,
    /* 34 */ r###"f32"###,
    /* 35 */ r###"f64"###,
    /* 36 */ r###"function"###,
    /* 37 */ r###"i32"###,
    /* 38 */ r###"i64"###,
    /* 39 */ r###"if_reset"###,
    /* 40 */ r###"if"###,
    /* 41 */ r###"inout"###,
    /* 42 */ r###"input"###,
    /* 43 */ r###"interface"###,
    /* 44 */ r###"localparam"###,
    /* 45 */ r###"logic"###,
    /* 46 */ r###"modport"###,
    /* 47 */ r###"module"###,
    /* 48 */ r###"negedge"###,
    /* 49 */ r###"output"###,
    /* 50 */ r###"parameter"###,
    /* 51 */ r###"posedge"###,
    /* 52 */ r###"ref"###,
    /* 53 */ r###"return"###,
    /* 54 */ r###"sync_high"###,
    /* 55 */ r###"sync_low"###,
    /* 56 */ r###"u32"###,
    /* 57 */ r###"u64"###,
    /* 58 */ r###"[a-zA-Z_][0-9a-zA-Z_]*"###,
    /* 59 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 60] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "MultiComment",
    /*  6 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarLBracketEERBracketLBracketPlusMinusRBracketQuestLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /*  7 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /*  8 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarTickLBracketBodhRBracketLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusLParenQuestColonUnderscoreLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusRParenStar",
    /*  9 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /* 10 */ "TickLBracket01RBracket",
    /* 11 */ "MinusGT",
    /* 12 */ "StarStarOrStarOrSlashOrPercentOrLTLTLTOrGTGTGTOrLTLTOrGTGTOrLTEquOrGTEquOrLTOrGTOrEquEquEquOrEquEquQuestOrBangEquEquOrBangEquQuestOrEquEquOrBangEquOrAmpAmpOrOrOr",
    /* 13 */ "PlusOrMinusOrAmpOrOrOrCircumflexTildeOrCircumflexOrTildeCircumflexOrTildeAmpOrTildeOr",
    /* 14 */ "BangOrTilde",
    /* 15 */ "ColonColonColon",
    /* 16 */ "Colon",
    /* 17 */ "Comma",
    /* 18 */ "Equ",
    /* 19 */ "Hash",
    /* 20 */ "LBrace",
    /* 21 */ "LBracket",
    /* 22 */ "LParen",
    /* 23 */ "RBrace",
    /* 24 */ "RBracket",
    /* 25 */ "RParen",
    /* 26 */ "Semicolon",
    /* 27 */ "AlwaysUnderscoreComb",
    /* 28 */ "AlwaysUnderscoreFf",
    /* 29 */ "Assign",
    /* 30 */ "AsyncUnderscoreHigh",
    /* 31 */ "AsyncUnderscoreLow",
    /* 32 */ "Bit",
    /* 33 */ "Else",
    /* 34 */ "F32",
    /* 35 */ "F64",
    /* 36 */ "Function",
    /* 37 */ "I32",
    /* 38 */ "I64",
    /* 39 */ "IfUnderscoreReset",
    /* 40 */ "If",
    /* 41 */ "Inout",
    /* 42 */ "Input",
    /* 43 */ "Interface",
    /* 44 */ "Localparam",
    /* 45 */ "Logic",
    /* 46 */ "Modport",
    /* 47 */ "Module",
    /* 48 */ "Negedge",
    /* 49 */ "Output",
    /* 50 */ "Parameter",
    /* 51 */ "Posedge",
    /* 52 */ "Ref",
    /* 53 */ "Return",
    /* 54 */ "SyncUnderscoreHigh",
    /* 55 */ "SyncUnderscoreLow",
    /* 56 */ "U32",
    /* 57 */ "U64",
    /* 58 */ "LBracketAMinusZAMinusZUnderscoreRBracketLBracket0Minus9aMinusZAMinusZUnderscoreRBracketStar",
    /* 59 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 54]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* MultiComment */
        6, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarLBracketEERBracketLBracketPlusMinusRBracketQuestLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        7, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        8, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarTickLBracketBodhRBracketLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusLParenQuestColonUnderscoreLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusRParenStar */
        9, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        10, /* TickLBracket01RBracket */
        11, /* MinusGT */
        12, /* StarStarOrStarOrSlashOrPercentOrLTLTLTOrGTGTGTOrLTLTOrGTGTOrLTEquOrGTEquOrLTOrGTOrEquEquEquOrEquEquQuestOrBangEquEquOrBangEquQuestOrEquEquOrBangEquOrAmpAmpOrOrOr */
        13, /* PlusOrMinusOrAmpOrOrOrCircumflexTildeOrCircumflexOrTildeCircumflexOrTildeAmpOrTildeOr */
        14, /* BangOrTilde */
        15, /* ColonColonColon */
        16, /* Colon */
        17, /* Comma */
        18, /* Equ */
        19, /* Hash */
        20, /* LBrace */
        21, /* LBracket */
        22, /* LParen */
        23, /* RBrace */
        24, /* RBracket */
        25, /* RParen */
        26, /* Semicolon */
        27, /* AlwaysUnderscoreComb */
        28, /* AlwaysUnderscoreFf */
        29, /* Assign */
        30, /* AsyncUnderscoreHigh */
        31, /* AsyncUnderscoreLow */
        32, /* Bit */
        33, /* Else */
        34, /* F32 */
        35, /* F64 */
        36, /* Function */
        37, /* I32 */
        38, /* I64 */
        39, /* IfUnderscoreReset */
        40, /* If */
        41, /* Inout */
        42, /* Input */
        43, /* Interface */
        44, /* Localparam */
        45, /* Logic */
        46, /* Modport */
        47, /* Module */
        48, /* Negedge */
        49, /* Output */
        50, /* Parameter */
        51, /* Posedge */
        52, /* Ref */
        53, /* Return */
        54, /* SyncUnderscoreHigh */
        55, /* SyncUnderscoreLow */
        56, /* U32 */
        57, /* U64 */
        58, /* LBracketAMinusZAMinusZUnderscoreRBracketLBracket0Minus9aMinusZAMinusZUnderscoreRBracketStar */
    ],
);

const MAX_K: usize = 3;

pub const NON_TERMINALS: &[&str; 211] = &[
    /*   0 */ "AllBit",
    /*   1 */ "AllBitToken",
    /*   2 */ "AlwaysComb",
    /*   3 */ "AlwaysCombDeclaration",
    /*   4 */ "AlwaysCombDeclarationList",
    /*   5 */ "AlwaysCombToken",
    /*   6 */ "AlwaysFf",
    /*   7 */ "AlwaysFfClock",
    /*   8 */ "AlwaysFfClockOpt",
    /*   9 */ "AlwaysFfClockOptGroup",
    /*  10 */ "AlwaysFfDeclaration",
    /*  11 */ "AlwaysFfDeclarationList",
    /*  12 */ "AlwaysFfDeclarationOpt",
    /*  13 */ "AlwaysFfReset",
    /*  14 */ "AlwaysFfResetOpt",
    /*  15 */ "AlwaysFfResetOptGroup",
    /*  16 */ "AlwaysFfToken",
    /*  17 */ "Assign",
    /*  18 */ "AssignDeclaration",
    /*  19 */ "AssignDeclarationOpt",
    /*  20 */ "AssignToken",
    /*  21 */ "AssignmentStatement",
    /*  22 */ "AsyncHigh",
    /*  23 */ "AsyncHighToken",
    /*  24 */ "AsyncLow",
    /*  25 */ "AsyncLowToken",
    /*  26 */ "BaseLess",
    /*  27 */ "BaseLessToken",
    /*  28 */ "Based",
    /*  29 */ "BasedToken",
    /*  30 */ "BinaryOperator",
    /*  31 */ "BinaryOperatorToken",
    /*  32 */ "Bit",
    /*  33 */ "BitToken",
    /*  34 */ "BuiltinType",
    /*  35 */ "Colon",
    /*  36 */ "ColonColonColon",
    /*  37 */ "ColonColonColonToken",
    /*  38 */ "ColonToken",
    /*  39 */ "Comma",
    /*  40 */ "CommaToken",
    /*  41 */ "Comments",
    /*  42 */ "CommentsOpt",
    /*  43 */ "CommonOperator",
    /*  44 */ "CommonOperatorToken",
    /*  45 */ "Description",
    /*  46 */ "Direction",
    /*  47 */ "Else",
    /*  48 */ "ElseToken",
    /*  49 */ "Equ",
    /*  50 */ "EquToken",
    /*  51 */ "Exponent",
    /*  52 */ "ExponentToken",
    /*  53 */ "Expression",
    /*  54 */ "Expression1",
    /*  55 */ "Expression1Opt",
    /*  56 */ "Expression1OptGroup",
    /*  57 */ "ExpressionList",
    /*  58 */ "ExpressionListGroup",
    /*  59 */ "F32",
    /*  60 */ "F32Token",
    /*  61 */ "F64",
    /*  62 */ "F64Token",
    /*  63 */ "Factor",
    /*  64 */ "FactorList",
    /*  65 */ "FixedPoint",
    /*  66 */ "FixedPointToken",
    /*  67 */ "Function",
    /*  68 */ "FunctionDeclaration",
    /*  69 */ "FunctionDeclarationList",
    /*  70 */ "FunctionDeclarationOpt",
    /*  71 */ "FunctionDeclarationOpt0",
    /*  72 */ "FunctionItem",
    /*  73 */ "FunctionToken",
    /*  74 */ "Hash",
    /*  75 */ "HashToken",
    /*  76 */ "I32",
    /*  77 */ "I32Token",
    /*  78 */ "I64",
    /*  79 */ "I64Token",
    /*  80 */ "Identifier",
    /*  81 */ "IdentifierToken",
    /*  82 */ "If",
    /*  83 */ "IfReset",
    /*  84 */ "IfResetStatement",
    /*  85 */ "IfResetStatementList",
    /*  86 */ "IfResetStatementList0",
    /*  87 */ "IfResetStatementList0List",
    /*  88 */ "IfResetStatementOpt",
    /*  89 */ "IfResetStatementOptList",
    /*  90 */ "IfResetToken",
    /*  91 */ "IfStatement",
    /*  92 */ "IfStatementList",
    /*  93 */ "IfStatementList0",
    /*  94 */ "IfStatementList0List",
    /*  95 */ "IfStatementOpt",
    /*  96 */ "IfStatementOptList",
    /*  97 */ "IfToken",
    /*  98 */ "Inout",
    /*  99 */ "InoutToken",
    /* 100 */ "Input",
    /* 101 */ "InputToken",
    /* 102 */ "InstanceParameter",
    /* 103 */ "InstanceParameterItem",
    /* 104 */ "InstanceParameterItemOpt",
    /* 105 */ "InstanceParameterList",
    /* 106 */ "InstanceParameterListList",
    /* 107 */ "InstanceParameterListOpt",
    /* 108 */ "InstanceParameterOpt",
    /* 109 */ "InstancePortItem",
    /* 110 */ "InstancePortItemOpt",
    /* 111 */ "InstancePortList",
    /* 112 */ "InstancePortListList",
    /* 113 */ "InstancePortListOpt",
    /* 114 */ "Instantiation",
    /* 115 */ "InstantiationOpt",
    /* 116 */ "InstantiationOpt0",
    /* 117 */ "IntegralNumber",
    /* 118 */ "Interface",
    /* 119 */ "InterfaceDeclaration",
    /* 120 */ "InterfaceDeclarationList",
    /* 121 */ "InterfaceDeclarationOpt",
    /* 122 */ "InterfaceItem",
    /* 123 */ "InterfaceToken",
    /* 124 */ "LBrace",
    /* 125 */ "LBraceToken",
    /* 126 */ "LBracket",
    /* 127 */ "LBracketToken",
    /* 128 */ "LParen",
    /* 129 */ "LParenToken",
    /* 130 */ "Localparam",
    /* 131 */ "LocalparamDeclaration",
    /* 132 */ "LocalparamToken",
    /* 133 */ "Logic",
    /* 134 */ "LogicToken",
    /* 135 */ "MinusGT",
    /* 136 */ "MinusGTToken",
    /* 137 */ "Modport",
    /* 138 */ "ModportDeclaration",
    /* 139 */ "ModportItem",
    /* 140 */ "ModportList",
    /* 141 */ "ModportListList",
    /* 142 */ "ModportListOpt",
    /* 143 */ "ModportToken",
    /* 144 */ "Module",
    /* 145 */ "ModuleDeclaration",
    /* 146 */ "ModuleDeclarationList",
    /* 147 */ "ModuleDeclarationOpt",
    /* 148 */ "ModuleDeclarationOpt0",
    /* 149 */ "ModuleItem",
    /* 150 */ "ModuleToken",
    /* 151 */ "MultiComment",
    /* 152 */ "Negedge",
    /* 153 */ "NegedgeToken",
    /* 154 */ "Number",
    /* 155 */ "Output",
    /* 156 */ "OutputToken",
    /* 157 */ "Parameter",
    /* 158 */ "ParameterDeclaration",
    /* 159 */ "ParameterToken",
    /* 160 */ "PortDeclaration",
    /* 161 */ "PortDeclarationItem",
    /* 162 */ "PortDeclarationList",
    /* 163 */ "PortDeclarationListList",
    /* 164 */ "PortDeclarationListOpt",
    /* 165 */ "PortDeclarationOpt",
    /* 166 */ "Posedge",
    /* 167 */ "PosedgeToken",
    /* 168 */ "RBrace",
    /* 169 */ "RBraceToken",
    /* 170 */ "RBracket",
    /* 171 */ "RBracketToken",
    /* 172 */ "RParen",
    /* 173 */ "RParenToken",
    /* 174 */ "Range",
    /* 175 */ "RangeOpt",
    /* 176 */ "RealNumber",
    /* 177 */ "Ref",
    /* 178 */ "RefToken",
    /* 179 */ "Return",
    /* 180 */ "ReturnStatement",
    /* 181 */ "ReturnToken",
    /* 182 */ "Semicolon",
    /* 183 */ "SemicolonToken",
    /* 184 */ "Start",
    /* 185 */ "StartToken",
    /* 186 */ "Statement",
    /* 187 */ "SyncHigh",
    /* 188 */ "SyncHighToken",
    /* 189 */ "SyncLow",
    /* 190 */ "SyncLowToken",
    /* 191 */ "Type",
    /* 192 */ "TypeGroup",
    /* 193 */ "TypeList",
    /* 194 */ "U32",
    /* 195 */ "U32Token",
    /* 196 */ "U64",
    /* 197 */ "U64Token",
    /* 198 */ "UnaryOperator",
    /* 199 */ "UnaryOperatorToken",
    /* 200 */ "VariableDeclaration",
    /* 201 */ "Veryl",
    /* 202 */ "VerylList",
    /* 203 */ "Width",
    /* 204 */ "WithParameter",
    /* 205 */ "WithParameterItem",
    /* 206 */ "WithParameterItemGroup",
    /* 207 */ "WithParameterList",
    /* 208 */ "WithParameterListList",
    /* 209 */ "WithParameterListOpt",
    /* 210 */ "WithParameterOpt",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 211] = &[
    /* 0 - "AllBit" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "AllBitToken" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "AlwaysComb" */
    LookaheadDFA {
        states: &[Some(79)],
        transitions: &[],
        k: 0,
    },
    /* 3 - "AlwaysCombDeclaration" */
    LookaheadDFA {
        states: &[Some(199)],
        transitions: &[],
        k: 0,
    },
    /* 4 - "AlwaysCombDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(200), Some(201)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 5 - "AlwaysCombToken" */
    LookaheadDFA {
        states: &[Some(48)],
        transitions: &[],
        k: 0,
    },
    /* 6 - "AlwaysFf" */
    LookaheadDFA {
        states: &[Some(80)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "AlwaysFfClock" */
    LookaheadDFA {
        states: &[Some(187)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "AlwaysFfClockOpt" */
    LookaheadDFA {
        states: &[None, Some(188), Some(191)],
        transitions: &[
            DFATransition(0, 48, 1),
            DFATransition(0, 51, 1),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 9 - "AlwaysFfClockOptGroup" */
    LookaheadDFA {
        states: &[None, Some(189), Some(190)],
        transitions: &[DFATransition(0, 48, 2), DFATransition(0, 51, 1)],
        k: 1,
    },
    /* 10 - "AlwaysFfDeclaration" */
    LookaheadDFA {
        states: &[Some(182)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "AlwaysFfDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(183), Some(184)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 12 - "AlwaysFfDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(185), Some(186)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 13 - "AlwaysFfReset" */
    LookaheadDFA {
        states: &[Some(192)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "AlwaysFfResetOpt" */
    LookaheadDFA {
        states: &[None, Some(193), Some(198)],
        transitions: &[
            DFATransition(0, 30, 1),
            DFATransition(0, 31, 1),
            DFATransition(0, 54, 1),
            DFATransition(0, 55, 1),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 15 - "AlwaysFfResetOptGroup" */
    LookaheadDFA {
        states: &[None, Some(194), Some(195), Some(196), Some(197)],
        transitions: &[
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 1),
            DFATransition(0, 54, 4),
            DFATransition(0, 55, 3),
        ],
        k: 1,
    },
    /* 16 - "AlwaysFfToken" */
    LookaheadDFA {
        states: &[Some(49)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "Assign" */
    LookaheadDFA {
        states: &[Some(81)],
        transitions: &[],
        k: 0,
    },
    /* 18 - "AssignDeclaration" */
    LookaheadDFA {
        states: &[Some(202)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "AssignDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(203), Some(204)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 18, 2)],
        k: 1,
    },
    /* 20 - "AssignToken" */
    LookaheadDFA {
        states: &[Some(50)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "AssignmentStatement" */
    LookaheadDFA {
        states: &[Some(155)],
        transitions: &[],
        k: 0,
    },
    /* 22 - "AsyncHigh" */
    LookaheadDFA {
        states: &[Some(82)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "AsyncHighToken" */
    LookaheadDFA {
        states: &[Some(51)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "AsyncLow" */
    LookaheadDFA {
        states: &[Some(83)],
        transitions: &[],
        k: 0,
    },
    /* 25 - "AsyncLowToken" */
    LookaheadDFA {
        states: &[Some(52)],
        transitions: &[],
        k: 0,
    },
    /* 26 - "BaseLess" */
    LookaheadDFA {
        states: &[Some(14)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "BaseLessToken" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 28 - "Based" */
    LookaheadDFA {
        states: &[Some(13)],
        transitions: &[],
        k: 0,
    },
    /* 29 - "BasedToken" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "BinaryOperator" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 31 - "BinaryOperatorToken" */
    LookaheadDFA {
        states: &[Some(17)],
        transitions: &[],
        k: 0,
    },
    /* 32 - "Bit" */
    LookaheadDFA {
        states: &[Some(84)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "BitToken" */
    LookaheadDFA {
        states: &[Some(53)],
        transitions: &[],
        k: 0,
    },
    /* 34 - "BuiltinType" */
    LookaheadDFA {
        states: &[
            None,
            Some(138),
            Some(139),
            Some(140),
            Some(141),
            Some(142),
            Some(143),
            Some(144),
            Some(145),
        ],
        transitions: &[
            DFATransition(0, 32, 2),
            DFATransition(0, 34, 7),
            DFATransition(0, 35, 8),
            DFATransition(0, 37, 5),
            DFATransition(0, 38, 6),
            DFATransition(0, 45, 1),
            DFATransition(0, 56, 3),
            DFATransition(0, 57, 4),
        ],
        k: 1,
    },
    /* 35 - "Colon" */
    LookaheadDFA {
        states: &[Some(36)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "ColonColonColon" */
    LookaheadDFA {
        states: &[Some(35)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "ColonColonColonToken" */
    LookaheadDFA {
        states: &[Some(23)],
        transitions: &[],
        k: 0,
    },
    /* 38 - "ColonToken" */
    LookaheadDFA {
        states: &[Some(24)],
        transitions: &[],
        k: 0,
    },
    /* 39 - "Comma" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "CommaToken" */
    LookaheadDFA {
        states: &[Some(25)],
        transitions: &[],
        k: 0,
    },
    /* 41 - "Comments" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "CommentsOpt" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 1),
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 27, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 33, 2),
            DFATransition(0, 34, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 36, 2),
            DFATransition(0, 37, 2),
            DFATransition(0, 38, 2),
            DFATransition(0, 39, 2),
            DFATransition(0, 40, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 2),
            DFATransition(0, 45, 2),
            DFATransition(0, 46, 2),
            DFATransition(0, 47, 2),
            DFATransition(0, 48, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 43 - "CommonOperator" */
    LookaheadDFA {
        states: &[Some(20)],
        transitions: &[],
        k: 0,
    },
    /* 44 - "CommonOperatorToken" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "Description" */
    LookaheadDFA {
        states: &[None, Some(293), Some(294)],
        transitions: &[DFATransition(0, 43, 2), DFATransition(0, 47, 1)],
        k: 1,
    },
    /* 46 - "Direction" */
    LookaheadDFA {
        states: &[None, Some(256), Some(257), Some(258), Some(259)],
        transitions: &[
            DFATransition(0, 41, 3),
            DFATransition(0, 42, 1),
            DFATransition(0, 49, 2),
            DFATransition(0, 52, 4),
        ],
        k: 1,
    },
    /* 47 - "Else" */
    LookaheadDFA {
        states: &[Some(85)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "ElseToken" */
    LookaheadDFA {
        states: &[Some(54)],
        transitions: &[],
        k: 0,
    },
    /* 49 - "Equ" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 50 - "EquToken" */
    LookaheadDFA {
        states: &[Some(26)],
        transitions: &[],
        k: 0,
    },
    /* 51 - "Exponent" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 52 - "ExponentToken" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 53 - "Expression" */
    LookaheadDFA {
        states: &[Some(119)],
        transitions: &[],
        k: 0,
    },
    /* 54 - "Expression1" */
    LookaheadDFA {
        states: &[Some(124)],
        transitions: &[],
        k: 0,
    },
    /* 55 - "Expression1Opt" */
    LookaheadDFA {
        states: &[None, Some(125), Some(128)],
        transitions: &[
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 13, 1),
            DFATransition(0, 14, 1),
            DFATransition(0, 22, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 56 - "Expression1OptGroup" */
    LookaheadDFA {
        states: &[None, Some(126), Some(127)],
        transitions: &[DFATransition(0, 13, 2), DFATransition(0, 14, 1)],
        k: 1,
    },
    /* 57 - "ExpressionList" */
    LookaheadDFA {
        states: &[None, Some(120), Some(123)],
        transitions: &[
            DFATransition(0, 12, 1),
            DFATransition(0, 13, 1),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
        ],
        k: 1,
    },
    /* 58 - "ExpressionListGroup" */
    LookaheadDFA {
        states: &[None, Some(121), Some(122)],
        transitions: &[DFATransition(0, 12, 1), DFATransition(0, 13, 2)],
        k: 1,
    },
    /* 59 - "F32" */
    LookaheadDFA {
        states: &[Some(86)],
        transitions: &[],
        k: 0,
    },
    /* 60 - "F32Token" */
    LookaheadDFA {
        states: &[Some(55)],
        transitions: &[],
        k: 0,
    },
    /* 61 - "F64" */
    LookaheadDFA {
        states: &[Some(87)],
        transitions: &[],
        k: 0,
    },
    /* 62 - "F64Token" */
    LookaheadDFA {
        states: &[Some(56)],
        transitions: &[],
        k: 0,
    },
    /* 63 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(129), Some(130), Some(133)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 1),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 1),
            DFATransition(0, 22, 3),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 64 - "FactorList" */
    LookaheadDFA {
        states: &[None, Some(131), Some(132)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 1),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
        ],
        k: 1,
    },
    /* 65 - "FixedPoint" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 66 - "FixedPointToken" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 67 - "Function" */
    LookaheadDFA {
        states: &[Some(88)],
        transitions: &[],
        k: 0,
    },
    /* 68 - "FunctionDeclaration" */
    LookaheadDFA {
        states: &[Some(260)],
        transitions: &[],
        k: 0,
    },
    /* 69 - "FunctionDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(261), Some(262)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 70 - "FunctionDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(265), Some(266)],
        transitions: &[
            DFATransition(0, 11, 2),
            DFATransition(0, 19, 1),
            DFATransition(0, 22, 2),
        ],
        k: 1,
    },
    /* 71 - "FunctionDeclarationOpt0" */
    LookaheadDFA {
        states: &[None, Some(263), Some(264)],
        transitions: &[DFATransition(0, 11, 2), DFATransition(0, 22, 1)],
        k: 1,
    },
    /* 72 - "FunctionItem" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(267),
            None,
            None,
            None,
            None,
            None,
            None,
            Some(268),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 39, 5),
            DFATransition(0, 40, 6),
            DFATransition(0, 53, 7),
            DFATransition(0, 58, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 16, 4),
            DFATransition(1, 18, 31),
            DFATransition(2, 16, 3),
            DFATransition(2, 18, 10),
            DFATransition(4, 5, 3),
            DFATransition(4, 32, 3),
            DFATransition(4, 34, 3),
            DFATransition(4, 35, 3),
            DFATransition(4, 37, 3),
            DFATransition(4, 38, 3),
            DFATransition(4, 45, 3),
            DFATransition(4, 56, 3),
            DFATransition(4, 57, 3),
            DFATransition(4, 58, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 20, 9),
            DFATransition(6, 5, 11),
            DFATransition(6, 6, 12),
            DFATransition(6, 7, 13),
            DFATransition(6, 8, 14),
            DFATransition(6, 9, 15),
            DFATransition(6, 10, 16),
            DFATransition(6, 13, 17),
            DFATransition(6, 14, 18),
            DFATransition(6, 22, 19),
            DFATransition(6, 58, 20),
            DFATransition(7, 5, 21),
            DFATransition(7, 6, 22),
            DFATransition(7, 7, 23),
            DFATransition(7, 8, 24),
            DFATransition(7, 9, 25),
            DFATransition(7, 10, 26),
            DFATransition(7, 13, 27),
            DFATransition(7, 14, 28),
            DFATransition(7, 22, 29),
            DFATransition(7, 58, 30),
            DFATransition(8, 20, 10),
            DFATransition(9, 5, 10),
            DFATransition(9, 23, 10),
            DFATransition(9, 39, 10),
            DFATransition(9, 40, 10),
            DFATransition(9, 53, 10),
            DFATransition(9, 58, 10),
            DFATransition(11, 6, 10),
            DFATransition(11, 7, 10),
            DFATransition(11, 8, 10),
            DFATransition(11, 9, 10),
            DFATransition(11, 10, 10),
            DFATransition(11, 13, 10),
            DFATransition(11, 14, 10),
            DFATransition(11, 22, 10),
            DFATransition(11, 58, 10),
            DFATransition(12, 5, 10),
            DFATransition(12, 12, 10),
            DFATransition(12, 13, 10),
            DFATransition(12, 20, 10),
            DFATransition(13, 5, 10),
            DFATransition(13, 12, 10),
            DFATransition(13, 13, 10),
            DFATransition(13, 20, 10),
            DFATransition(14, 5, 10),
            DFATransition(14, 12, 10),
            DFATransition(14, 13, 10),
            DFATransition(14, 20, 10),
            DFATransition(15, 5, 10),
            DFATransition(15, 12, 10),
            DFATransition(15, 13, 10),
            DFATransition(15, 20, 10),
            DFATransition(16, 5, 10),
            DFATransition(16, 12, 10),
            DFATransition(16, 13, 10),
            DFATransition(16, 20, 10),
            DFATransition(17, 5, 10),
            DFATransition(17, 6, 10),
            DFATransition(17, 7, 10),
            DFATransition(17, 8, 10),
            DFATransition(17, 9, 10),
            DFATransition(17, 10, 10),
            DFATransition(17, 22, 10),
            DFATransition(17, 58, 10),
            DFATransition(18, 5, 10),
            DFATransition(18, 6, 10),
            DFATransition(18, 7, 10),
            DFATransition(18, 8, 10),
            DFATransition(18, 9, 10),
            DFATransition(18, 10, 10),
            DFATransition(18, 22, 10),
            DFATransition(18, 58, 10),
            DFATransition(19, 5, 10),
            DFATransition(19, 6, 10),
            DFATransition(19, 7, 10),
            DFATransition(19, 8, 10),
            DFATransition(19, 9, 10),
            DFATransition(19, 10, 10),
            DFATransition(19, 13, 10),
            DFATransition(19, 14, 10),
            DFATransition(19, 22, 10),
            DFATransition(19, 58, 10),
            DFATransition(20, 5, 10),
            DFATransition(20, 12, 10),
            DFATransition(20, 13, 10),
            DFATransition(20, 20, 10),
            DFATransition(20, 21, 10),
            DFATransition(21, 6, 10),
            DFATransition(21, 7, 10),
            DFATransition(21, 8, 10),
            DFATransition(21, 9, 10),
            DFATransition(21, 10, 10),
            DFATransition(21, 13, 10),
            DFATransition(21, 14, 10),
            DFATransition(21, 22, 10),
            DFATransition(21, 58, 10),
            DFATransition(22, 5, 10),
            DFATransition(22, 12, 10),
            DFATransition(22, 13, 10),
            DFATransition(22, 26, 10),
            DFATransition(23, 5, 10),
            DFATransition(23, 12, 10),
            DFATransition(23, 13, 10),
            DFATransition(23, 26, 10),
            DFATransition(24, 5, 10),
            DFATransition(24, 12, 10),
            DFATransition(24, 13, 10),
            DFATransition(24, 26, 10),
            DFATransition(25, 5, 10),
            DFATransition(25, 12, 10),
            DFATransition(25, 13, 10),
            DFATransition(25, 26, 10),
            DFATransition(26, 5, 10),
            DFATransition(26, 12, 10),
            DFATransition(26, 13, 10),
            DFATransition(26, 26, 10),
            DFATransition(27, 5, 10),
            DFATransition(27, 6, 10),
            DFATransition(27, 7, 10),
            DFATransition(27, 8, 10),
            DFATransition(27, 9, 10),
            DFATransition(27, 10, 10),
            DFATransition(27, 22, 10),
            DFATransition(27, 58, 10),
            DFATransition(28, 5, 10),
            DFATransition(28, 6, 10),
            DFATransition(28, 7, 10),
            DFATransition(28, 8, 10),
            DFATransition(28, 9, 10),
            DFATransition(28, 10, 10),
            DFATransition(28, 22, 10),
            DFATransition(28, 58, 10),
            DFATransition(29, 5, 10),
            DFATransition(29, 6, 10),
            DFATransition(29, 7, 10),
            DFATransition(29, 8, 10),
            DFATransition(29, 9, 10),
            DFATransition(29, 10, 10),
            DFATransition(29, 13, 10),
            DFATransition(29, 14, 10),
            DFATransition(29, 22, 10),
            DFATransition(29, 58, 10),
            DFATransition(30, 5, 10),
            DFATransition(30, 12, 10),
            DFATransition(30, 13, 10),
            DFATransition(30, 21, 10),
            DFATransition(30, 26, 10),
            DFATransition(31, 5, 10),
            DFATransition(31, 6, 10),
            DFATransition(31, 7, 10),
            DFATransition(31, 8, 10),
            DFATransition(31, 9, 10),
            DFATransition(31, 10, 10),
            DFATransition(31, 13, 10),
            DFATransition(31, 14, 10),
            DFATransition(31, 22, 10),
            DFATransition(31, 58, 10),
        ],
        k: 3,
    },
    /* 73 - "FunctionToken" */
    LookaheadDFA {
        states: &[Some(57)],
        transitions: &[],
        k: 0,
    },
    /* 74 - "Hash" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 75 - "HashToken" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 76 - "I32" */
    LookaheadDFA {
        states: &[Some(89)],
        transitions: &[],
        k: 0,
    },
    /* 77 - "I32Token" */
    LookaheadDFA {
        states: &[Some(58)],
        transitions: &[],
        k: 0,
    },
    /* 78 - "I64" */
    LookaheadDFA {
        states: &[Some(90)],
        transitions: &[],
        k: 0,
    },
    /* 79 - "I64Token" */
    LookaheadDFA {
        states: &[Some(59)],
        transitions: &[],
        k: 0,
    },
    /* 80 - "Identifier" */
    LookaheadDFA {
        states: &[Some(111)],
        transitions: &[],
        k: 0,
    },
    /* 81 - "IdentifierToken" */
    LookaheadDFA {
        states: &[Some(110)],
        transitions: &[],
        k: 0,
    },
    /* 82 - "If" */
    LookaheadDFA {
        states: &[Some(92)],
        transitions: &[],
        k: 0,
    },
    /* 83 - "IfReset" */
    LookaheadDFA {
        states: &[Some(91)],
        transitions: &[],
        k: 0,
    },
    /* 84 - "IfResetStatement" */
    LookaheadDFA {
        states: &[Some(167)],
        transitions: &[],
        k: 0,
    },
    /* 85 - "IfResetStatementList" */
    LookaheadDFA {
        states: &[None, Some(172), Some(173)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 86 - "IfResetStatementList0" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(168),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(171),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 23, 5),
            DFATransition(0, 33, 1),
            DFATransition(0, 39, 6),
            DFATransition(0, 40, 7),
            DFATransition(0, 53, 8),
            DFATransition(0, 58, 9),
            DFATransition(1, 5, 2),
            DFATransition(1, 20, 24),
            DFATransition(1, 40, 4),
            DFATransition(2, 20, 23),
            DFATransition(2, 40, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 6, 3),
            DFATransition(4, 7, 3),
            DFATransition(4, 8, 3),
            DFATransition(4, 9, 3),
            DFATransition(4, 10, 3),
            DFATransition(4, 13, 3),
            DFATransition(4, 14, 3),
            DFATransition(4, 22, 3),
            DFATransition(4, 58, 3),
            DFATransition(5, 5, 10),
            DFATransition(5, 23, 11),
            DFATransition(5, 27, 12),
            DFATransition(5, 28, 13),
            DFATransition(5, 29, 14),
            DFATransition(5, 33, 15),
            DFATransition(5, 36, 16),
            DFATransition(5, 39, 17),
            DFATransition(5, 40, 18),
            DFATransition(5, 44, 19),
            DFATransition(5, 50, 20),
            DFATransition(5, 53, 21),
            DFATransition(5, 58, 22),
            DFATransition(6, 5, 25),
            DFATransition(6, 20, 26),
            DFATransition(7, 5, 27),
            DFATransition(7, 6, 28),
            DFATransition(7, 7, 29),
            DFATransition(7, 8, 30),
            DFATransition(7, 9, 31),
            DFATransition(7, 10, 32),
            DFATransition(7, 13, 33),
            DFATransition(7, 14, 34),
            DFATransition(7, 22, 35),
            DFATransition(7, 58, 36),
            DFATransition(8, 5, 37),
            DFATransition(8, 6, 38),
            DFATransition(8, 7, 39),
            DFATransition(8, 8, 40),
            DFATransition(8, 9, 41),
            DFATransition(8, 10, 42),
            DFATransition(8, 13, 43),
            DFATransition(8, 14, 44),
            DFATransition(8, 22, 45),
            DFATransition(8, 58, 46),
            DFATransition(9, 5, 47),
            DFATransition(9, 16, 48),
            DFATransition(9, 18, 49),
            DFATransition(10, 23, 23),
            DFATransition(10, 27, 23),
            DFATransition(10, 28, 23),
            DFATransition(10, 29, 23),
            DFATransition(10, 33, 23),
            DFATransition(10, 36, 23),
            DFATransition(10, 39, 23),
            DFATransition(10, 40, 23),
            DFATransition(10, 44, 23),
            DFATransition(10, 50, 23),
            DFATransition(10, 53, 23),
            DFATransition(10, 58, 23),
            DFATransition(11, 0, 23),
            DFATransition(11, 5, 23),
            DFATransition(11, 23, 23),
            DFATransition(11, 27, 23),
            DFATransition(11, 28, 23),
            DFATransition(11, 29, 23),
            DFATransition(11, 33, 23),
            DFATransition(11, 36, 23),
            DFATransition(11, 39, 23),
            DFATransition(11, 40, 23),
            DFATransition(11, 43, 23),
            DFATransition(11, 44, 23),
            DFATransition(11, 47, 23),
            DFATransition(11, 50, 23),
            DFATransition(11, 53, 23),
            DFATransition(11, 58, 23),
            DFATransition(12, 5, 23),
            DFATransition(12, 20, 23),
            DFATransition(13, 5, 23),
            DFATransition(13, 22, 23),
            DFATransition(14, 5, 23),
            DFATransition(14, 58, 23),
            DFATransition(15, 5, 23),
            DFATransition(15, 20, 23),
            DFATransition(15, 40, 23),
            DFATransition(16, 5, 23),
            DFATransition(16, 58, 23),
            DFATransition(17, 5, 23),
            DFATransition(17, 20, 23),
            DFATransition(18, 5, 23),
            DFATransition(18, 6, 23),
            DFATransition(18, 7, 23),
            DFATransition(18, 8, 23),
            DFATransition(18, 9, 23),
            DFATransition(18, 10, 23),
            DFATransition(18, 13, 23),
            DFATransition(18, 14, 23),
            DFATransition(18, 22, 23),
            DFATransition(18, 58, 23),
            DFATransition(19, 5, 23),
            DFATransition(19, 58, 23),
            DFATransition(20, 5, 23),
            DFATransition(20, 58, 23),
            DFATransition(21, 5, 23),
            DFATransition(21, 6, 23),
            DFATransition(21, 7, 23),
            DFATransition(21, 8, 23),
            DFATransition(21, 9, 23),
            DFATransition(21, 10, 23),
            DFATransition(21, 13, 23),
            DFATransition(21, 14, 23),
            DFATransition(21, 22, 23),
            DFATransition(21, 58, 23),
            DFATransition(22, 5, 23),
            DFATransition(22, 15, 23),
            DFATransition(22, 16, 23),
            DFATransition(22, 18, 23),
            DFATransition(24, 5, 23),
            DFATransition(24, 23, 23),
            DFATransition(24, 39, 23),
            DFATransition(24, 40, 23),
            DFATransition(24, 53, 23),
            DFATransition(24, 58, 23),
            DFATransition(25, 20, 23),
            DFATransition(26, 5, 23),
            DFATransition(26, 23, 23),
            DFATransition(26, 39, 23),
            DFATransition(26, 40, 23),
            DFATransition(26, 53, 23),
            DFATransition(26, 58, 23),
            DFATransition(27, 6, 23),
            DFATransition(27, 7, 23),
            DFATransition(27, 8, 23),
            DFATransition(27, 9, 23),
            DFATransition(27, 10, 23),
            DFATransition(27, 13, 23),
            DFATransition(27, 14, 23),
            DFATransition(27, 22, 23),
            DFATransition(27, 58, 23),
            DFATransition(28, 5, 23),
            DFATransition(28, 12, 23),
            DFATransition(28, 13, 23),
            DFATransition(28, 20, 23),
            DFATransition(29, 5, 23),
            DFATransition(29, 12, 23),
            DFATransition(29, 13, 23),
            DFATransition(29, 20, 23),
            DFATransition(30, 5, 23),
            DFATransition(30, 12, 23),
            DFATransition(30, 13, 23),
            DFATransition(30, 20, 23),
            DFATransition(31, 5, 23),
            DFATransition(31, 12, 23),
            DFATransition(31, 13, 23),
            DFATransition(31, 20, 23),
            DFATransition(32, 5, 23),
            DFATransition(32, 12, 23),
            DFATransition(32, 13, 23),
            DFATransition(32, 20, 23),
            DFATransition(33, 5, 23),
            DFATransition(33, 6, 23),
            DFATransition(33, 7, 23),
            DFATransition(33, 8, 23),
            DFATransition(33, 9, 23),
            DFATransition(33, 10, 23),
            DFATransition(33, 22, 23),
            DFATransition(33, 58, 23),
            DFATransition(34, 5, 23),
            DFATransition(34, 6, 23),
            DFATransition(34, 7, 23),
            DFATransition(34, 8, 23),
            DFATransition(34, 9, 23),
            DFATransition(34, 10, 23),
            DFATransition(34, 22, 23),
            DFATransition(34, 58, 23),
            DFATransition(35, 5, 23),
            DFATransition(35, 6, 23),
            DFATransition(35, 7, 23),
            DFATransition(35, 8, 23),
            DFATransition(35, 9, 23),
            DFATransition(35, 10, 23),
            DFATransition(35, 13, 23),
            DFATransition(35, 14, 23),
            DFATransition(35, 22, 23),
            DFATransition(35, 58, 23),
            DFATransition(36, 5, 23),
            DFATransition(36, 12, 23),
            DFATransition(36, 13, 23),
            DFATransition(36, 20, 23),
            DFATransition(36, 21, 23),
            DFATransition(37, 6, 23),
            DFATransition(37, 7, 23),
            DFATransition(37, 8, 23),
            DFATransition(37, 9, 23),
            DFATransition(37, 10, 23),
            DFATransition(37, 13, 23),
            DFATransition(37, 14, 23),
            DFATransition(37, 22, 23),
            DFATransition(37, 58, 23),
            DFATransition(38, 5, 23),
            DFATransition(38, 12, 23),
            DFATransition(38, 13, 23),
            DFATransition(38, 26, 23),
            DFATransition(39, 5, 23),
            DFATransition(39, 12, 23),
            DFATransition(39, 13, 23),
            DFATransition(39, 26, 23),
            DFATransition(40, 5, 23),
            DFATransition(40, 12, 23),
            DFATransition(40, 13, 23),
            DFATransition(40, 26, 23),
            DFATransition(41, 5, 23),
            DFATransition(41, 12, 23),
            DFATransition(41, 13, 23),
            DFATransition(41, 26, 23),
            DFATransition(42, 5, 23),
            DFATransition(42, 12, 23),
            DFATransition(42, 13, 23),
            DFATransition(42, 26, 23),
            DFATransition(43, 5, 23),
            DFATransition(43, 6, 23),
            DFATransition(43, 7, 23),
            DFATransition(43, 8, 23),
            DFATransition(43, 9, 23),
            DFATransition(43, 10, 23),
            DFATransition(43, 22, 23),
            DFATransition(43, 58, 23),
            DFATransition(44, 5, 23),
            DFATransition(44, 6, 23),
            DFATransition(44, 7, 23),
            DFATransition(44, 8, 23),
            DFATransition(44, 9, 23),
            DFATransition(44, 10, 23),
            DFATransition(44, 22, 23),
            DFATransition(44, 58, 23),
            DFATransition(45, 5, 23),
            DFATransition(45, 6, 23),
            DFATransition(45, 7, 23),
            DFATransition(45, 8, 23),
            DFATransition(45, 9, 23),
            DFATransition(45, 10, 23),
            DFATransition(45, 13, 23),
            DFATransition(45, 14, 23),
            DFATransition(45, 22, 23),
            DFATransition(45, 58, 23),
            DFATransition(46, 5, 23),
            DFATransition(46, 12, 23),
            DFATransition(46, 13, 23),
            DFATransition(46, 21, 23),
            DFATransition(46, 26, 23),
            DFATransition(47, 16, 23),
            DFATransition(47, 18, 23),
            DFATransition(48, 5, 23),
            DFATransition(48, 32, 23),
            DFATransition(48, 34, 23),
            DFATransition(48, 35, 23),
            DFATransition(48, 37, 23),
            DFATransition(48, 38, 23),
            DFATransition(48, 45, 23),
            DFATransition(48, 56, 23),
            DFATransition(48, 57, 23),
            DFATransition(48, 58, 23),
            DFATransition(49, 5, 23),
            DFATransition(49, 6, 23),
            DFATransition(49, 7, 23),
            DFATransition(49, 8, 23),
            DFATransition(49, 9, 23),
            DFATransition(49, 10, 23),
            DFATransition(49, 13, 23),
            DFATransition(49, 14, 23),
            DFATransition(49, 22, 23),
            DFATransition(49, 58, 23),
        ],
        k: 3,
    },
    /* 87 - "IfResetStatementList0List" */
    LookaheadDFA {
        states: &[None, Some(169), Some(170)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 88 - "IfResetStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(174), Some(177)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 39, 2),
            DFATransition(0, 40, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 89 - "IfResetStatementOptList" */
    LookaheadDFA {
        states: &[None, Some(175), Some(176)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 90 - "IfResetToken" */
    LookaheadDFA {
        states: &[Some(60)],
        transitions: &[],
        k: 0,
    },
    /* 91 - "IfStatement" */
    LookaheadDFA {
        states: &[Some(156)],
        transitions: &[],
        k: 0,
    },
    /* 92 - "IfStatementList" */
    LookaheadDFA {
        states: &[None, Some(161), Some(162)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 93 - "IfStatementList0" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(157),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(160),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 23, 5),
            DFATransition(0, 33, 1),
            DFATransition(0, 39, 6),
            DFATransition(0, 40, 7),
            DFATransition(0, 53, 8),
            DFATransition(0, 58, 9),
            DFATransition(1, 5, 2),
            DFATransition(1, 20, 24),
            DFATransition(1, 40, 4),
            DFATransition(2, 20, 23),
            DFATransition(2, 40, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 6, 3),
            DFATransition(4, 7, 3),
            DFATransition(4, 8, 3),
            DFATransition(4, 9, 3),
            DFATransition(4, 10, 3),
            DFATransition(4, 13, 3),
            DFATransition(4, 14, 3),
            DFATransition(4, 22, 3),
            DFATransition(4, 58, 3),
            DFATransition(5, 5, 10),
            DFATransition(5, 23, 11),
            DFATransition(5, 27, 12),
            DFATransition(5, 28, 13),
            DFATransition(5, 29, 14),
            DFATransition(5, 33, 15),
            DFATransition(5, 36, 16),
            DFATransition(5, 39, 17),
            DFATransition(5, 40, 18),
            DFATransition(5, 44, 19),
            DFATransition(5, 50, 20),
            DFATransition(5, 53, 21),
            DFATransition(5, 58, 22),
            DFATransition(6, 5, 25),
            DFATransition(6, 20, 26),
            DFATransition(7, 5, 27),
            DFATransition(7, 6, 28),
            DFATransition(7, 7, 29),
            DFATransition(7, 8, 30),
            DFATransition(7, 9, 31),
            DFATransition(7, 10, 32),
            DFATransition(7, 13, 33),
            DFATransition(7, 14, 34),
            DFATransition(7, 22, 35),
            DFATransition(7, 58, 36),
            DFATransition(8, 5, 37),
            DFATransition(8, 6, 38),
            DFATransition(8, 7, 39),
            DFATransition(8, 8, 40),
            DFATransition(8, 9, 41),
            DFATransition(8, 10, 42),
            DFATransition(8, 13, 43),
            DFATransition(8, 14, 44),
            DFATransition(8, 22, 45),
            DFATransition(8, 58, 46),
            DFATransition(9, 5, 47),
            DFATransition(9, 16, 48),
            DFATransition(9, 18, 49),
            DFATransition(10, 23, 23),
            DFATransition(10, 27, 23),
            DFATransition(10, 28, 23),
            DFATransition(10, 29, 23),
            DFATransition(10, 33, 23),
            DFATransition(10, 36, 23),
            DFATransition(10, 39, 23),
            DFATransition(10, 40, 23),
            DFATransition(10, 44, 23),
            DFATransition(10, 50, 23),
            DFATransition(10, 53, 23),
            DFATransition(10, 58, 23),
            DFATransition(11, 0, 23),
            DFATransition(11, 5, 23),
            DFATransition(11, 23, 23),
            DFATransition(11, 27, 23),
            DFATransition(11, 28, 23),
            DFATransition(11, 29, 23),
            DFATransition(11, 33, 23),
            DFATransition(11, 36, 23),
            DFATransition(11, 39, 23),
            DFATransition(11, 40, 23),
            DFATransition(11, 43, 23),
            DFATransition(11, 44, 23),
            DFATransition(11, 47, 23),
            DFATransition(11, 50, 23),
            DFATransition(11, 53, 23),
            DFATransition(11, 58, 23),
            DFATransition(12, 5, 23),
            DFATransition(12, 20, 23),
            DFATransition(13, 5, 23),
            DFATransition(13, 22, 23),
            DFATransition(14, 5, 23),
            DFATransition(14, 58, 23),
            DFATransition(15, 5, 23),
            DFATransition(15, 20, 23),
            DFATransition(15, 40, 23),
            DFATransition(16, 5, 23),
            DFATransition(16, 58, 23),
            DFATransition(17, 5, 23),
            DFATransition(17, 20, 23),
            DFATransition(18, 5, 23),
            DFATransition(18, 6, 23),
            DFATransition(18, 7, 23),
            DFATransition(18, 8, 23),
            DFATransition(18, 9, 23),
            DFATransition(18, 10, 23),
            DFATransition(18, 13, 23),
            DFATransition(18, 14, 23),
            DFATransition(18, 22, 23),
            DFATransition(18, 58, 23),
            DFATransition(19, 5, 23),
            DFATransition(19, 58, 23),
            DFATransition(20, 5, 23),
            DFATransition(20, 58, 23),
            DFATransition(21, 5, 23),
            DFATransition(21, 6, 23),
            DFATransition(21, 7, 23),
            DFATransition(21, 8, 23),
            DFATransition(21, 9, 23),
            DFATransition(21, 10, 23),
            DFATransition(21, 13, 23),
            DFATransition(21, 14, 23),
            DFATransition(21, 22, 23),
            DFATransition(21, 58, 23),
            DFATransition(22, 5, 23),
            DFATransition(22, 15, 23),
            DFATransition(22, 16, 23),
            DFATransition(22, 18, 23),
            DFATransition(24, 5, 23),
            DFATransition(24, 23, 23),
            DFATransition(24, 39, 23),
            DFATransition(24, 40, 23),
            DFATransition(24, 53, 23),
            DFATransition(24, 58, 23),
            DFATransition(25, 20, 23),
            DFATransition(26, 5, 23),
            DFATransition(26, 23, 23),
            DFATransition(26, 39, 23),
            DFATransition(26, 40, 23),
            DFATransition(26, 53, 23),
            DFATransition(26, 58, 23),
            DFATransition(27, 6, 23),
            DFATransition(27, 7, 23),
            DFATransition(27, 8, 23),
            DFATransition(27, 9, 23),
            DFATransition(27, 10, 23),
            DFATransition(27, 13, 23),
            DFATransition(27, 14, 23),
            DFATransition(27, 22, 23),
            DFATransition(27, 58, 23),
            DFATransition(28, 5, 23),
            DFATransition(28, 12, 23),
            DFATransition(28, 13, 23),
            DFATransition(28, 20, 23),
            DFATransition(29, 5, 23),
            DFATransition(29, 12, 23),
            DFATransition(29, 13, 23),
            DFATransition(29, 20, 23),
            DFATransition(30, 5, 23),
            DFATransition(30, 12, 23),
            DFATransition(30, 13, 23),
            DFATransition(30, 20, 23),
            DFATransition(31, 5, 23),
            DFATransition(31, 12, 23),
            DFATransition(31, 13, 23),
            DFATransition(31, 20, 23),
            DFATransition(32, 5, 23),
            DFATransition(32, 12, 23),
            DFATransition(32, 13, 23),
            DFATransition(32, 20, 23),
            DFATransition(33, 5, 23),
            DFATransition(33, 6, 23),
            DFATransition(33, 7, 23),
            DFATransition(33, 8, 23),
            DFATransition(33, 9, 23),
            DFATransition(33, 10, 23),
            DFATransition(33, 22, 23),
            DFATransition(33, 58, 23),
            DFATransition(34, 5, 23),
            DFATransition(34, 6, 23),
            DFATransition(34, 7, 23),
            DFATransition(34, 8, 23),
            DFATransition(34, 9, 23),
            DFATransition(34, 10, 23),
            DFATransition(34, 22, 23),
            DFATransition(34, 58, 23),
            DFATransition(35, 5, 23),
            DFATransition(35, 6, 23),
            DFATransition(35, 7, 23),
            DFATransition(35, 8, 23),
            DFATransition(35, 9, 23),
            DFATransition(35, 10, 23),
            DFATransition(35, 13, 23),
            DFATransition(35, 14, 23),
            DFATransition(35, 22, 23),
            DFATransition(35, 58, 23),
            DFATransition(36, 5, 23),
            DFATransition(36, 12, 23),
            DFATransition(36, 13, 23),
            DFATransition(36, 20, 23),
            DFATransition(36, 21, 23),
            DFATransition(37, 6, 23),
            DFATransition(37, 7, 23),
            DFATransition(37, 8, 23),
            DFATransition(37, 9, 23),
            DFATransition(37, 10, 23),
            DFATransition(37, 13, 23),
            DFATransition(37, 14, 23),
            DFATransition(37, 22, 23),
            DFATransition(37, 58, 23),
            DFATransition(38, 5, 23),
            DFATransition(38, 12, 23),
            DFATransition(38, 13, 23),
            DFATransition(38, 26, 23),
            DFATransition(39, 5, 23),
            DFATransition(39, 12, 23),
            DFATransition(39, 13, 23),
            DFATransition(39, 26, 23),
            DFATransition(40, 5, 23),
            DFATransition(40, 12, 23),
            DFATransition(40, 13, 23),
            DFATransition(40, 26, 23),
            DFATransition(41, 5, 23),
            DFATransition(41, 12, 23),
            DFATransition(41, 13, 23),
            DFATransition(41, 26, 23),
            DFATransition(42, 5, 23),
            DFATransition(42, 12, 23),
            DFATransition(42, 13, 23),
            DFATransition(42, 26, 23),
            DFATransition(43, 5, 23),
            DFATransition(43, 6, 23),
            DFATransition(43, 7, 23),
            DFATransition(43, 8, 23),
            DFATransition(43, 9, 23),
            DFATransition(43, 10, 23),
            DFATransition(43, 22, 23),
            DFATransition(43, 58, 23),
            DFATransition(44, 5, 23),
            DFATransition(44, 6, 23),
            DFATransition(44, 7, 23),
            DFATransition(44, 8, 23),
            DFATransition(44, 9, 23),
            DFATransition(44, 10, 23),
            DFATransition(44, 22, 23),
            DFATransition(44, 58, 23),
            DFATransition(45, 5, 23),
            DFATransition(45, 6, 23),
            DFATransition(45, 7, 23),
            DFATransition(45, 8, 23),
            DFATransition(45, 9, 23),
            DFATransition(45, 10, 23),
            DFATransition(45, 13, 23),
            DFATransition(45, 14, 23),
            DFATransition(45, 22, 23),
            DFATransition(45, 58, 23),
            DFATransition(46, 5, 23),
            DFATransition(46, 12, 23),
            DFATransition(46, 13, 23),
            DFATransition(46, 21, 23),
            DFATransition(46, 26, 23),
            DFATransition(47, 16, 23),
            DFATransition(47, 18, 23),
            DFATransition(48, 5, 23),
            DFATransition(48, 32, 23),
            DFATransition(48, 34, 23),
            DFATransition(48, 35, 23),
            DFATransition(48, 37, 23),
            DFATransition(48, 38, 23),
            DFATransition(48, 45, 23),
            DFATransition(48, 56, 23),
            DFATransition(48, 57, 23),
            DFATransition(48, 58, 23),
            DFATransition(49, 5, 23),
            DFATransition(49, 6, 23),
            DFATransition(49, 7, 23),
            DFATransition(49, 8, 23),
            DFATransition(49, 9, 23),
            DFATransition(49, 10, 23),
            DFATransition(49, 13, 23),
            DFATransition(49, 14, 23),
            DFATransition(49, 22, 23),
            DFATransition(49, 58, 23),
        ],
        k: 3,
    },
    /* 94 - "IfStatementList0List" */
    LookaheadDFA {
        states: &[None, Some(158), Some(159)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 95 - "IfStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(163), Some(166)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 39, 2),
            DFATransition(0, 40, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 96 - "IfStatementOptList" */
    LookaheadDFA {
        states: &[None, Some(164), Some(165)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 39, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 53, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 97 - "IfToken" */
    LookaheadDFA {
        states: &[Some(61)],
        transitions: &[],
        k: 0,
    },
    /* 98 - "Inout" */
    LookaheadDFA {
        states: &[Some(93)],
        transitions: &[],
        k: 0,
    },
    /* 99 - "InoutToken" */
    LookaheadDFA {
        states: &[Some(62)],
        transitions: &[],
        k: 0,
    },
    /* 100 - "Input" */
    LookaheadDFA {
        states: &[Some(94)],
        transitions: &[],
        k: 0,
    },
    /* 101 - "InputToken" */
    LookaheadDFA {
        states: &[Some(63)],
        transitions: &[],
        k: 0,
    },
    /* 102 - "InstanceParameter" */
    LookaheadDFA {
        states: &[Some(217)],
        transitions: &[],
        k: 0,
    },
    /* 103 - "InstanceParameterItem" */
    LookaheadDFA {
        states: &[Some(225)],
        transitions: &[],
        k: 0,
    },
    /* 104 - "InstanceParameterItemOpt" */
    LookaheadDFA {
        states: &[None, Some(226), Some(227)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 25, 2),
        ],
        k: 1,
    },
    /* 105 - "InstanceParameterList" */
    LookaheadDFA {
        states: &[Some(220)],
        transitions: &[],
        k: 0,
    },
    /* 106 - "InstanceParameterListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(221),
            None,
            None,
            None,
            Some(222),
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 25, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 25, 6),
            DFATransition(1, 58, 4),
            DFATransition(2, 25, 7),
            DFATransition(2, 58, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 16, 3),
            DFATransition(4, 17, 3),
            DFATransition(4, 25, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 20, 9),
            DFATransition(6, 5, 7),
            DFATransition(6, 20, 7),
            DFATransition(8, 20, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 23, 7),
            DFATransition(9, 58, 7),
        ],
        k: 3,
    },
    /* 107 - "InstanceParameterListOpt" */
    LookaheadDFA {
        states: &[None, Some(223), Some(224)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 108 - "InstanceParameterOpt" */
    LookaheadDFA {
        states: &[None, Some(218), Some(219)],
        transitions: &[DFATransition(0, 25, 2), DFATransition(0, 58, 1)],
        k: 1,
    },
    /* 109 - "InstancePortItem" */
    LookaheadDFA {
        states: &[Some(233)],
        transitions: &[],
        k: 0,
    },
    /* 110 - "InstancePortItemOpt" */
    LookaheadDFA {
        states: &[None, Some(234), Some(235)],
        transitions: &[
            DFATransition(0, 16, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 23, 2),
        ],
        k: 1,
    },
    /* 111 - "InstancePortList" */
    LookaheadDFA {
        states: &[Some(228)],
        transitions: &[],
        k: 0,
    },
    /* 112 - "InstancePortListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(229),
            None,
            None,
            None,
            Some(230),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 23, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 23, 6),
            DFATransition(1, 58, 4),
            DFATransition(2, 23, 7),
            DFATransition(2, 58, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 16, 3),
            DFATransition(4, 17, 3),
            DFATransition(4, 23, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 23, 9),
            DFATransition(5, 27, 10),
            DFATransition(5, 28, 11),
            DFATransition(5, 29, 12),
            DFATransition(5, 36, 13),
            DFATransition(5, 44, 14),
            DFATransition(5, 50, 15),
            DFATransition(5, 58, 16),
            DFATransition(6, 5, 7),
            DFATransition(6, 23, 7),
            DFATransition(6, 27, 7),
            DFATransition(6, 28, 7),
            DFATransition(6, 29, 7),
            DFATransition(6, 36, 7),
            DFATransition(6, 44, 7),
            DFATransition(6, 50, 7),
            DFATransition(6, 58, 7),
            DFATransition(8, 23, 7),
            DFATransition(8, 27, 7),
            DFATransition(8, 28, 7),
            DFATransition(8, 29, 7),
            DFATransition(8, 36, 7),
            DFATransition(8, 44, 7),
            DFATransition(8, 50, 7),
            DFATransition(8, 58, 7),
            DFATransition(9, 0, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 43, 7),
            DFATransition(9, 47, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 20, 7),
            DFATransition(11, 5, 7),
            DFATransition(11, 22, 7),
            DFATransition(12, 5, 7),
            DFATransition(12, 58, 7),
            DFATransition(13, 5, 7),
            DFATransition(13, 58, 7),
            DFATransition(14, 5, 7),
            DFATransition(14, 58, 7),
            DFATransition(15, 5, 7),
            DFATransition(15, 58, 7),
            DFATransition(16, 5, 7),
            DFATransition(16, 15, 7),
            DFATransition(16, 16, 7),
        ],
        k: 3,
    },
    /* 113 - "InstancePortListOpt" */
    LookaheadDFA {
        states: &[None, Some(231), Some(232)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 23, 2)],
        k: 1,
    },
    /* 114 - "Instantiation" */
    LookaheadDFA {
        states: &[Some(212)],
        transitions: &[],
        k: 0,
    },
    /* 115 - "InstantiationOpt" */
    LookaheadDFA {
        states: &[None, Some(215), Some(216)],
        transitions: &[DFATransition(0, 19, 1), DFATransition(0, 20, 2)],
        k: 1,
    },
    /* 116 - "InstantiationOpt0" */
    LookaheadDFA {
        states: &[None, Some(213), Some(214)],
        transitions: &[DFATransition(0, 23, 2), DFATransition(0, 58, 1)],
        k: 1,
    },
    /* 117 - "IntegralNumber" */
    LookaheadDFA {
        states: &[None, Some(114), Some(115), Some(116)],
        transitions: &[
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 3),
        ],
        k: 1,
    },
    /* 118 - "Interface" */
    LookaheadDFA {
        states: &[Some(95)],
        transitions: &[],
        k: 0,
    },
    /* 119 - "InterfaceDeclaration" */
    LookaheadDFA {
        states: &[Some(284)],
        transitions: &[],
        k: 0,
    },
    /* 120 - "InterfaceDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(285), Some(286)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 46, 1),
            DFATransition(0, 50, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 121 - "InterfaceDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(287), Some(288)],
        transitions: &[DFATransition(0, 19, 1), DFATransition(0, 20, 2)],
        k: 1,
    },
    /* 122 - "InterfaceItem" */
    LookaheadDFA {
        states: &[None, Some(289), Some(290), Some(291), Some(292)],
        transitions: &[
            DFATransition(0, 44, 3),
            DFATransition(0, 46, 4),
            DFATransition(0, 50, 2),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 123 - "InterfaceToken" */
    LookaheadDFA {
        states: &[Some(64)],
        transitions: &[],
        k: 0,
    },
    /* 124 - "LBrace" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 125 - "LBraceToken" */
    LookaheadDFA {
        states: &[Some(28)],
        transitions: &[],
        k: 0,
    },
    /* 126 - "LBracket" */
    LookaheadDFA {
        states: &[Some(41)],
        transitions: &[],
        k: 0,
    },
    /* 127 - "LBracketToken" */
    LookaheadDFA {
        states: &[Some(29)],
        transitions: &[],
        k: 0,
    },
    /* 128 - "LParen" */
    LookaheadDFA {
        states: &[Some(42)],
        transitions: &[],
        k: 0,
    },
    /* 129 - "LParenToken" */
    LookaheadDFA {
        states: &[Some(30)],
        transitions: &[],
        k: 0,
    },
    /* 130 - "Localparam" */
    LookaheadDFA {
        states: &[Some(96)],
        transitions: &[],
        k: 0,
    },
    /* 131 - "LocalparamDeclaration" */
    LookaheadDFA {
        states: &[Some(181)],
        transitions: &[],
        k: 0,
    },
    /* 132 - "LocalparamToken" */
    LookaheadDFA {
        states: &[Some(65)],
        transitions: &[],
        k: 0,
    },
    /* 133 - "Logic" */
    LookaheadDFA {
        states: &[Some(97)],
        transitions: &[],
        k: 0,
    },
    /* 134 - "LogicToken" */
    LookaheadDFA {
        states: &[Some(66)],
        transitions: &[],
        k: 0,
    },
    /* 135 - "MinusGT" */
    LookaheadDFA {
        states: &[Some(43)],
        transitions: &[],
        k: 0,
    },
    /* 136 - "MinusGTToken" */
    LookaheadDFA {
        states: &[Some(16)],
        transitions: &[],
        k: 0,
    },
    /* 137 - "Modport" */
    LookaheadDFA {
        states: &[Some(98)],
        transitions: &[],
        k: 0,
    },
    /* 138 - "ModportDeclaration" */
    LookaheadDFA {
        states: &[Some(205)],
        transitions: &[],
        k: 0,
    },
    /* 139 - "ModportItem" */
    LookaheadDFA {
        states: &[Some(211)],
        transitions: &[],
        k: 0,
    },
    /* 140 - "ModportList" */
    LookaheadDFA {
        states: &[Some(206)],
        transitions: &[],
        k: 0,
    },
    /* 141 - "ModportListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(207),
            None,
            None,
            None,
            Some(208),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 23, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 23, 6),
            DFATransition(1, 58, 4),
            DFATransition(2, 23, 7),
            DFATransition(2, 58, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 16, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 23, 9),
            DFATransition(5, 44, 10),
            DFATransition(5, 46, 11),
            DFATransition(5, 50, 12),
            DFATransition(5, 58, 13),
            DFATransition(6, 5, 7),
            DFATransition(6, 23, 7),
            DFATransition(6, 44, 7),
            DFATransition(6, 46, 7),
            DFATransition(6, 50, 7),
            DFATransition(6, 58, 7),
            DFATransition(8, 23, 7),
            DFATransition(8, 44, 7),
            DFATransition(8, 46, 7),
            DFATransition(8, 50, 7),
            DFATransition(8, 58, 7),
            DFATransition(9, 0, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 43, 7),
            DFATransition(9, 47, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 58, 7),
            DFATransition(11, 5, 7),
            DFATransition(11, 58, 7),
            DFATransition(12, 5, 7),
            DFATransition(12, 58, 7),
            DFATransition(13, 5, 7),
            DFATransition(13, 16, 7),
        ],
        k: 3,
    },
    /* 142 - "ModportListOpt" */
    LookaheadDFA {
        states: &[None, Some(209), Some(210)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 23, 2)],
        k: 1,
    },
    /* 143 - "ModportToken" */
    LookaheadDFA {
        states: &[Some(67)],
        transitions: &[],
        k: 0,
    },
    /* 144 - "Module" */
    LookaheadDFA {
        states: &[Some(99)],
        transitions: &[],
        k: 0,
    },
    /* 145 - "ModuleDeclaration" */
    LookaheadDFA {
        states: &[Some(269)],
        transitions: &[],
        k: 0,
    },
    /* 146 - "ModuleDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(270), Some(271)],
        transitions: &[
            DFATransition(0, 23, 2),
            DFATransition(0, 27, 1),
            DFATransition(0, 28, 1),
            DFATransition(0, 29, 1),
            DFATransition(0, 36, 1),
            DFATransition(0, 44, 1),
            DFATransition(0, 50, 1),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 147 - "ModuleDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(274), Some(275)],
        transitions: &[
            DFATransition(0, 19, 1),
            DFATransition(0, 20, 2),
            DFATransition(0, 22, 2),
        ],
        k: 1,
    },
    /* 148 - "ModuleDeclarationOpt0" */
    LookaheadDFA {
        states: &[None, Some(272), Some(273)],
        transitions: &[DFATransition(0, 20, 2), DFATransition(0, 22, 1)],
        k: 1,
    },
    /* 149 - "ModuleItem" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(276),
            None,
            None,
            None,
            None,
            Some(277),
            None,
            None,
            None,
            Some(278),
            None,
            None,
            None,
            Some(279),
            None,
            None,
            None,
            Some(280),
            None,
            None,
            None,
            Some(281),
            None,
            Some(282),
            None,
            None,
            None,
            Some(283),
        ],
        transitions: &[
            DFATransition(0, 27, 17),
            DFATransition(0, 28, 13),
            DFATransition(0, 29, 21),
            DFATransition(0, 36, 27),
            DFATransition(0, 44, 9),
            DFATransition(0, 50, 5),
            DFATransition(0, 58, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 15, 25),
            DFATransition(1, 16, 4),
            DFATransition(2, 15, 26),
            DFATransition(2, 16, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 32, 3),
            DFATransition(4, 34, 3),
            DFATransition(4, 35, 3),
            DFATransition(4, 37, 3),
            DFATransition(4, 38, 3),
            DFATransition(4, 45, 3),
            DFATransition(4, 56, 3),
            DFATransition(4, 57, 3),
            DFATransition(4, 58, 3),
            DFATransition(5, 5, 6),
            DFATransition(5, 58, 7),
            DFATransition(6, 58, 8),
            DFATransition(7, 5, 8),
            DFATransition(7, 16, 8),
            DFATransition(9, 5, 10),
            DFATransition(9, 58, 11),
            DFATransition(10, 58, 12),
            DFATransition(11, 5, 12),
            DFATransition(11, 16, 12),
            DFATransition(13, 5, 14),
            DFATransition(13, 22, 15),
            DFATransition(14, 22, 16),
            DFATransition(15, 5, 16),
            DFATransition(15, 48, 16),
            DFATransition(15, 51, 16),
            DFATransition(15, 58, 16),
            DFATransition(17, 5, 18),
            DFATransition(17, 20, 19),
            DFATransition(18, 20, 20),
            DFATransition(19, 5, 20),
            DFATransition(19, 23, 20),
            DFATransition(19, 39, 20),
            DFATransition(19, 40, 20),
            DFATransition(19, 53, 20),
            DFATransition(19, 58, 20),
            DFATransition(21, 5, 22),
            DFATransition(21, 58, 23),
            DFATransition(22, 58, 24),
            DFATransition(23, 5, 24),
            DFATransition(23, 16, 24),
            DFATransition(23, 18, 24),
            DFATransition(25, 5, 26),
            DFATransition(25, 58, 26),
            DFATransition(27, 5, 28),
            DFATransition(27, 58, 29),
            DFATransition(28, 58, 30),
            DFATransition(29, 5, 30),
            DFATransition(29, 11, 30),
            DFATransition(29, 19, 30),
            DFATransition(29, 22, 30),
        ],
        k: 3,
    },
    /* 150 - "ModuleToken" */
    LookaheadDFA {
        states: &[Some(68)],
        transitions: &[],
        k: 0,
    },
    /* 151 - "MultiComment" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 152 - "Negedge" */
    LookaheadDFA {
        states: &[Some(100)],
        transitions: &[],
        k: 0,
    },
    /* 153 - "NegedgeToken" */
    LookaheadDFA {
        states: &[Some(69)],
        transitions: &[],
        k: 0,
    },
    /* 154 - "Number" */
    LookaheadDFA {
        states: &[None, Some(112), Some(113)],
        transitions: &[
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 1),
        ],
        k: 1,
    },
    /* 155 - "Output" */
    LookaheadDFA {
        states: &[Some(101)],
        transitions: &[],
        k: 0,
    },
    /* 156 - "OutputToken" */
    LookaheadDFA {
        states: &[Some(70)],
        transitions: &[],
        k: 0,
    },
    /* 157 - "Parameter" */
    LookaheadDFA {
        states: &[Some(102)],
        transitions: &[],
        k: 0,
    },
    /* 158 - "ParameterDeclaration" */
    LookaheadDFA {
        states: &[Some(180)],
        transitions: &[],
        k: 0,
    },
    /* 159 - "ParameterToken" */
    LookaheadDFA {
        states: &[Some(71)],
        transitions: &[],
        k: 0,
    },
    /* 160 - "PortDeclaration" */
    LookaheadDFA {
        states: &[Some(247)],
        transitions: &[],
        k: 0,
    },
    /* 161 - "PortDeclarationItem" */
    LookaheadDFA {
        states: &[Some(255)],
        transitions: &[],
        k: 0,
    },
    /* 162 - "PortDeclarationList" */
    LookaheadDFA {
        states: &[Some(250)],
        transitions: &[],
        k: 0,
    },
    /* 163 - "PortDeclarationListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(251),
            None,
            None,
            None,
            Some(252),
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 25, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 25, 6),
            DFATransition(1, 58, 4),
            DFATransition(2, 25, 7),
            DFATransition(2, 58, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 16, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 11, 9),
            DFATransition(5, 20, 10),
            DFATransition(6, 5, 7),
            DFATransition(6, 11, 7),
            DFATransition(6, 20, 7),
            DFATransition(8, 11, 7),
            DFATransition(8, 20, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 32, 7),
            DFATransition(9, 34, 7),
            DFATransition(9, 35, 7),
            DFATransition(9, 37, 7),
            DFATransition(9, 38, 7),
            DFATransition(9, 45, 7),
            DFATransition(9, 56, 7),
            DFATransition(9, 57, 7),
            DFATransition(9, 58, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 23, 7),
            DFATransition(10, 27, 7),
            DFATransition(10, 28, 7),
            DFATransition(10, 29, 7),
            DFATransition(10, 36, 7),
            DFATransition(10, 44, 7),
            DFATransition(10, 50, 7),
            DFATransition(10, 58, 7),
        ],
        k: 3,
    },
    /* 164 - "PortDeclarationListOpt" */
    LookaheadDFA {
        states: &[None, Some(253), Some(254)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 165 - "PortDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(248), Some(249)],
        transitions: &[DFATransition(0, 25, 2), DFATransition(0, 58, 1)],
        k: 1,
    },
    /* 166 - "Posedge" */
    LookaheadDFA {
        states: &[Some(103)],
        transitions: &[],
        k: 0,
    },
    /* 167 - "PosedgeToken" */
    LookaheadDFA {
        states: &[Some(72)],
        transitions: &[],
        k: 0,
    },
    /* 168 - "RBrace" */
    LookaheadDFA {
        states: &[Some(44)],
        transitions: &[],
        k: 0,
    },
    /* 169 - "RBraceToken" */
    LookaheadDFA {
        states: &[Some(31)],
        transitions: &[],
        k: 0,
    },
    /* 170 - "RBracket" */
    LookaheadDFA {
        states: &[Some(45)],
        transitions: &[],
        k: 0,
    },
    /* 171 - "RBracketToken" */
    LookaheadDFA {
        states: &[Some(32)],
        transitions: &[],
        k: 0,
    },
    /* 172 - "RParen" */
    LookaheadDFA {
        states: &[Some(46)],
        transitions: &[],
        k: 0,
    },
    /* 173 - "RParenToken" */
    LookaheadDFA {
        states: &[Some(33)],
        transitions: &[],
        k: 0,
    },
    /* 174 - "Range" */
    LookaheadDFA {
        states: &[Some(134)],
        transitions: &[],
        k: 0,
    },
    /* 175 - "RangeOpt" */
    LookaheadDFA {
        states: &[None, Some(135), Some(136)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 24, 2)],
        k: 1,
    },
    /* 176 - "RealNumber" */
    LookaheadDFA {
        states: &[None, Some(117), Some(118)],
        transitions: &[DFATransition(0, 6, 2), DFATransition(0, 7, 1)],
        k: 1,
    },
    /* 177 - "Ref" */
    LookaheadDFA {
        states: &[Some(104)],
        transitions: &[],
        k: 0,
    },
    /* 178 - "RefToken" */
    LookaheadDFA {
        states: &[Some(73)],
        transitions: &[],
        k: 0,
    },
    /* 179 - "Return" */
    LookaheadDFA {
        states: &[Some(105)],
        transitions: &[],
        k: 0,
    },
    /* 180 - "ReturnStatement" */
    LookaheadDFA {
        states: &[Some(178)],
        transitions: &[],
        k: 0,
    },
    /* 181 - "ReturnToken" */
    LookaheadDFA {
        states: &[Some(74)],
        transitions: &[],
        k: 0,
    },
    /* 182 - "Semicolon" */
    LookaheadDFA {
        states: &[Some(47)],
        transitions: &[],
        k: 0,
    },
    /* 183 - "SemicolonToken" */
    LookaheadDFA {
        states: &[Some(34)],
        transitions: &[],
        k: 0,
    },
    /* 184 - "Start" */
    LookaheadDFA {
        states: &[Some(5)],
        transitions: &[],
        k: 0,
    },
    /* 185 - "StartToken" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 186 - "Statement" */
    LookaheadDFA {
        states: &[None, Some(151), Some(152), Some(153), Some(154)],
        transitions: &[
            DFATransition(0, 39, 3),
            DFATransition(0, 40, 2),
            DFATransition(0, 53, 4),
            DFATransition(0, 58, 1),
        ],
        k: 1,
    },
    /* 187 - "SyncHigh" */
    LookaheadDFA {
        states: &[Some(106)],
        transitions: &[],
        k: 0,
    },
    /* 188 - "SyncHighToken" */
    LookaheadDFA {
        states: &[Some(75)],
        transitions: &[],
        k: 0,
    },
    /* 189 - "SyncLow" */
    LookaheadDFA {
        states: &[Some(107)],
        transitions: &[],
        k: 0,
    },
    /* 190 - "SyncLowToken" */
    LookaheadDFA {
        states: &[Some(76)],
        transitions: &[],
        k: 0,
    },
    /* 191 - "Type" */
    LookaheadDFA {
        states: &[Some(146)],
        transitions: &[],
        k: 0,
    },
    /* 192 - "TypeGroup" */
    LookaheadDFA {
        states: &[None, Some(147), Some(148)],
        transitions: &[
            DFATransition(0, 32, 1),
            DFATransition(0, 34, 1),
            DFATransition(0, 35, 1),
            DFATransition(0, 37, 1),
            DFATransition(0, 38, 1),
            DFATransition(0, 45, 1),
            DFATransition(0, 56, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 193 - "TypeList" */
    LookaheadDFA {
        states: &[None, Some(149), Some(150)],
        transitions: &[
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 1),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
        ],
        k: 1,
    },
    /* 194 - "U32" */
    LookaheadDFA {
        states: &[Some(108)],
        transitions: &[],
        k: 0,
    },
    /* 195 - "U32Token" */
    LookaheadDFA {
        states: &[Some(77)],
        transitions: &[],
        k: 0,
    },
    /* 196 - "U64" */
    LookaheadDFA {
        states: &[Some(109)],
        transitions: &[],
        k: 0,
    },
    /* 197 - "U64Token" */
    LookaheadDFA {
        states: &[Some(78)],
        transitions: &[],
        k: 0,
    },
    /* 198 - "UnaryOperator" */
    LookaheadDFA {
        states: &[Some(22)],
        transitions: &[],
        k: 0,
    },
    /* 199 - "UnaryOperatorToken" */
    LookaheadDFA {
        states: &[Some(19)],
        transitions: &[],
        k: 0,
    },
    /* 200 - "VariableDeclaration" */
    LookaheadDFA {
        states: &[Some(179)],
        transitions: &[],
        k: 0,
    },
    /* 201 - "Veryl" */
    LookaheadDFA {
        states: &[Some(295)],
        transitions: &[],
        k: 0,
    },
    /* 202 - "VerylList" */
    LookaheadDFA {
        states: &[None, Some(296), Some(297)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 43, 1),
            DFATransition(0, 47, 1),
        ],
        k: 1,
    },
    /* 203 - "Width" */
    LookaheadDFA {
        states: &[Some(137)],
        transitions: &[],
        k: 0,
    },
    /* 204 - "WithParameter" */
    LookaheadDFA {
        states: &[Some(236)],
        transitions: &[],
        k: 0,
    },
    /* 205 - "WithParameterItem" */
    LookaheadDFA {
        states: &[Some(244)],
        transitions: &[],
        k: 0,
    },
    /* 206 - "WithParameterItemGroup" */
    LookaheadDFA {
        states: &[None, Some(245), Some(246)],
        transitions: &[DFATransition(0, 44, 2), DFATransition(0, 50, 1)],
        k: 1,
    },
    /* 207 - "WithParameterList" */
    LookaheadDFA {
        states: &[Some(239)],
        transitions: &[],
        k: 0,
    },
    /* 208 - "WithParameterListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(240),
            None,
            None,
            None,
            None,
            Some(241),
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 25, 6),
            DFATransition(1, 5, 2),
            DFATransition(1, 25, 7),
            DFATransition(1, 44, 4),
            DFATransition(1, 50, 5),
            DFATransition(2, 25, 8),
            DFATransition(2, 44, 3),
            DFATransition(2, 50, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 58, 3),
            DFATransition(5, 5, 3),
            DFATransition(5, 58, 3),
            DFATransition(6, 5, 9),
            DFATransition(6, 11, 10),
            DFATransition(6, 20, 11),
            DFATransition(6, 22, 12),
            DFATransition(7, 5, 8),
            DFATransition(7, 11, 8),
            DFATransition(7, 20, 8),
            DFATransition(7, 22, 8),
            DFATransition(9, 11, 8),
            DFATransition(9, 20, 8),
            DFATransition(9, 22, 8),
            DFATransition(10, 5, 8),
            DFATransition(10, 32, 8),
            DFATransition(10, 34, 8),
            DFATransition(10, 35, 8),
            DFATransition(10, 37, 8),
            DFATransition(10, 38, 8),
            DFATransition(10, 45, 8),
            DFATransition(10, 56, 8),
            DFATransition(10, 57, 8),
            DFATransition(10, 58, 8),
            DFATransition(11, 5, 8),
            DFATransition(11, 23, 8),
            DFATransition(11, 27, 8),
            DFATransition(11, 28, 8),
            DFATransition(11, 29, 8),
            DFATransition(11, 36, 8),
            DFATransition(11, 44, 8),
            DFATransition(11, 46, 8),
            DFATransition(11, 50, 8),
            DFATransition(11, 58, 8),
            DFATransition(12, 5, 8),
            DFATransition(12, 25, 8),
            DFATransition(12, 58, 8),
        ],
        k: 3,
    },
    /* 209 - "WithParameterListOpt" */
    LookaheadDFA {
        states: &[None, Some(242), Some(243)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 210 - "WithParameterOpt" */
    LookaheadDFA {
        states: &[None, Some(237), Some(238)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 44, 1),
            DFATransition(0, 50, 1),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 298] = &[
    // 0 - MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+";
    Production {
        lhs: 151,
        production: &[ParseType::T(5)],
    },
    // 1 - Comments: CommentsOpt /* Option */;
    Production {
        lhs: 41,
        production: &[ParseType::N(42)],
    },
    // 2 - CommentsOpt: MultiComment;
    Production {
        lhs: 42,
        production: &[ParseType::N(151)],
    },
    // 3 - CommentsOpt: ;
    Production {
        lhs: 42,
        production: &[],
    },
    // 4 - StartToken: Comments;
    Production {
        lhs: 185,
        production: &[ParseType::N(41)],
    },
    // 5 - Start: StartToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 184,
        production: &[ParseType::N(185)],
    },
    // 6 - ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 52,
        production: &[ParseType::N(41), ParseType::T(6)],
    },
    // 7 - FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 66,
        production: &[ParseType::N(41), ParseType::T(7)],
    },
    // 8 - BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ Comments;
    Production {
        lhs: 29,
        production: &[ParseType::N(41), ParseType::T(8)],
    },
    // 9 - BaseLessToken: /[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 27,
        production: &[ParseType::N(41), ParseType::T(9)],
    },
    // 10 - AllBitToken: /'[01]/ Comments;
    Production {
        lhs: 1,
        production: &[ParseType::N(41), ParseType::T(10)],
    },
    // 11 - Exponent: ExponentToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 51,
        production: &[ParseType::N(52)],
    },
    // 12 - FixedPoint: FixedPointToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 65,
        production: &[ParseType::N(66)],
    },
    // 13 - Based: BasedToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 28,
        production: &[ParseType::N(29)],
    },
    // 14 - BaseLess: BaseLessToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 26,
        production: &[ParseType::N(27)],
    },
    // 15 - AllBit: AllBitToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 0,
        production: &[ParseType::N(1)],
    },
    // 16 - MinusGTToken: '->' Comments;
    Production {
        lhs: 136,
        production: &[ParseType::N(41), ParseType::T(11)],
    },
    // 17 - BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" Comments;
    Production {
        lhs: 31,
        production: &[ParseType::N(41), ParseType::T(12)],
    },
    // 18 - CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" Comments;
    Production {
        lhs: 44,
        production: &[ParseType::N(41), ParseType::T(13)],
    },
    // 19 - UnaryOperatorToken: "!|~" Comments;
    Production {
        lhs: 199,
        production: &[ParseType::N(41), ParseType::T(14)],
    },
    // 20 - CommonOperator: CommonOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 43,
        production: &[ParseType::N(44)],
    },
    // 21 - BinaryOperator: BinaryOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 30,
        production: &[ParseType::N(31)],
    },
    // 22 - UnaryOperator: UnaryOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 198,
        production: &[ParseType::N(199)],
    },
    // 23 - ColonColonColonToken: ':::' Comments;
    Production {
        lhs: 37,
        production: &[ParseType::N(41), ParseType::T(15)],
    },
    // 24 - ColonToken: ':' Comments;
    Production {
        lhs: 38,
        production: &[ParseType::N(41), ParseType::T(16)],
    },
    // 25 - CommaToken: ',' Comments;
    Production {
        lhs: 40,
        production: &[ParseType::N(41), ParseType::T(17)],
    },
    // 26 - EquToken: '=' Comments;
    Production {
        lhs: 50,
        production: &[ParseType::N(41), ParseType::T(18)],
    },
    // 27 - HashToken: '#' Comments;
    Production {
        lhs: 75,
        production: &[ParseType::N(41), ParseType::T(19)],
    },
    // 28 - LBraceToken: '{' Comments;
    Production {
        lhs: 125,
        production: &[ParseType::N(41), ParseType::T(20)],
    },
    // 29 - LBracketToken: '[' Comments;
    Production {
        lhs: 127,
        production: &[ParseType::N(41), ParseType::T(21)],
    },
    // 30 - LParenToken: '(' Comments;
    Production {
        lhs: 129,
        production: &[ParseType::N(41), ParseType::T(22)],
    },
    // 31 - RBraceToken: '}' Comments;
    Production {
        lhs: 169,
        production: &[ParseType::N(41), ParseType::T(23)],
    },
    // 32 - RBracketToken: ']' Comments;
    Production {
        lhs: 171,
        production: &[ParseType::N(41), ParseType::T(24)],
    },
    // 33 - RParenToken: ')' Comments;
    Production {
        lhs: 173,
        production: &[ParseType::N(41), ParseType::T(25)],
    },
    // 34 - SemicolonToken: ';' Comments;
    Production {
        lhs: 183,
        production: &[ParseType::N(41), ParseType::T(26)],
    },
    // 35 - ColonColonColon: ColonColonColonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 36,
        production: &[ParseType::N(37)],
    },
    // 36 - Colon: ColonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 35,
        production: &[ParseType::N(38)],
    },
    // 37 - Comma: CommaToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 39,
        production: &[ParseType::N(40)],
    },
    // 38 - Equ: EquToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 49,
        production: &[ParseType::N(50)],
    },
    // 39 - Hash: HashToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 74,
        production: &[ParseType::N(75)],
    },
    // 40 - LBrace: LBraceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 124,
        production: &[ParseType::N(125)],
    },
    // 41 - LBracket: LBracketToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 126,
        production: &[ParseType::N(127)],
    },
    // 42 - LParen: LParenToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 128,
        production: &[ParseType::N(129)],
    },
    // 43 - MinusGT: MinusGTToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 135,
        production: &[ParseType::N(136)],
    },
    // 44 - RBrace: RBraceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 168,
        production: &[ParseType::N(169)],
    },
    // 45 - RBracket: RBracketToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 170,
        production: &[ParseType::N(171)],
    },
    // 46 - RParen: RParenToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 172,
        production: &[ParseType::N(173)],
    },
    // 47 - Semicolon: SemicolonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 182,
        production: &[ParseType::N(183)],
    },
    // 48 - AlwaysCombToken: 'always_comb' Comments;
    Production {
        lhs: 5,
        production: &[ParseType::N(41), ParseType::T(27)],
    },
    // 49 - AlwaysFfToken: 'always_ff' Comments;
    Production {
        lhs: 16,
        production: &[ParseType::N(41), ParseType::T(28)],
    },
    // 50 - AssignToken: 'assign' Comments;
    Production {
        lhs: 20,
        production: &[ParseType::N(41), ParseType::T(29)],
    },
    // 51 - AsyncHighToken: 'async_high' Comments;
    Production {
        lhs: 23,
        production: &[ParseType::N(41), ParseType::T(30)],
    },
    // 52 - AsyncLowToken: 'async_low' Comments;
    Production {
        lhs: 25,
        production: &[ParseType::N(41), ParseType::T(31)],
    },
    // 53 - BitToken: 'bit' Comments;
    Production {
        lhs: 33,
        production: &[ParseType::N(41), ParseType::T(32)],
    },
    // 54 - ElseToken: 'else' Comments;
    Production {
        lhs: 48,
        production: &[ParseType::N(41), ParseType::T(33)],
    },
    // 55 - F32Token: 'f32' Comments;
    Production {
        lhs: 60,
        production: &[ParseType::N(41), ParseType::T(34)],
    },
    // 56 - F64Token: 'f64' Comments;
    Production {
        lhs: 62,
        production: &[ParseType::N(41), ParseType::T(35)],
    },
    // 57 - FunctionToken: 'function' Comments;
    Production {
        lhs: 73,
        production: &[ParseType::N(41), ParseType::T(36)],
    },
    // 58 - I32Token: 'i32' Comments;
    Production {
        lhs: 77,
        production: &[ParseType::N(41), ParseType::T(37)],
    },
    // 59 - I64Token: 'i64' Comments;
    Production {
        lhs: 79,
        production: &[ParseType::N(41), ParseType::T(38)],
    },
    // 60 - IfResetToken: 'if_reset' Comments;
    Production {
        lhs: 90,
        production: &[ParseType::N(41), ParseType::T(39)],
    },
    // 61 - IfToken: 'if' Comments;
    Production {
        lhs: 97,
        production: &[ParseType::N(41), ParseType::T(40)],
    },
    // 62 - InoutToken: 'inout' Comments;
    Production {
        lhs: 99,
        production: &[ParseType::N(41), ParseType::T(41)],
    },
    // 63 - InputToken: 'input' Comments;
    Production {
        lhs: 101,
        production: &[ParseType::N(41), ParseType::T(42)],
    },
    // 64 - InterfaceToken: 'interface' Comments;
    Production {
        lhs: 123,
        production: &[ParseType::N(41), ParseType::T(43)],
    },
    // 65 - LocalparamToken: 'localparam' Comments;
    Production {
        lhs: 132,
        production: &[ParseType::N(41), ParseType::T(44)],
    },
    // 66 - LogicToken: 'logic' Comments;
    Production {
        lhs: 134,
        production: &[ParseType::N(41), ParseType::T(45)],
    },
    // 67 - ModportToken: 'modport' Comments;
    Production {
        lhs: 143,
        production: &[ParseType::N(41), ParseType::T(46)],
    },
    // 68 - ModuleToken: 'module' Comments;
    Production {
        lhs: 150,
        production: &[ParseType::N(41), ParseType::T(47)],
    },
    // 69 - NegedgeToken: 'negedge' Comments;
    Production {
        lhs: 153,
        production: &[ParseType::N(41), ParseType::T(48)],
    },
    // 70 - OutputToken: 'output' Comments;
    Production {
        lhs: 156,
        production: &[ParseType::N(41), ParseType::T(49)],
    },
    // 71 - ParameterToken: 'parameter' Comments;
    Production {
        lhs: 159,
        production: &[ParseType::N(41), ParseType::T(50)],
    },
    // 72 - PosedgeToken: 'posedge' Comments;
    Production {
        lhs: 167,
        production: &[ParseType::N(41), ParseType::T(51)],
    },
    // 73 - RefToken: 'ref' Comments;
    Production {
        lhs: 178,
        production: &[ParseType::N(41), ParseType::T(52)],
    },
    // 74 - ReturnToken: 'return' Comments;
    Production {
        lhs: 181,
        production: &[ParseType::N(41), ParseType::T(53)],
    },
    // 75 - SyncHighToken: 'sync_high' Comments;
    Production {
        lhs: 188,
        production: &[ParseType::N(41), ParseType::T(54)],
    },
    // 76 - SyncLowToken: 'sync_low' Comments;
    Production {
        lhs: 190,
        production: &[ParseType::N(41), ParseType::T(55)],
    },
    // 77 - U32Token: 'u32' Comments;
    Production {
        lhs: 195,
        production: &[ParseType::N(41), ParseType::T(56)],
    },
    // 78 - U64Token: 'u64' Comments;
    Production {
        lhs: 197,
        production: &[ParseType::N(41), ParseType::T(57)],
    },
    // 79 - AlwaysComb: AlwaysCombToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 2,
        production: &[ParseType::N(5)],
    },
    // 80 - AlwaysFf: AlwaysFfToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 6,
        production: &[ParseType::N(16)],
    },
    // 81 - Assign: AssignToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 17,
        production: &[ParseType::N(20)],
    },
    // 82 - AsyncHigh: AsyncHighToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 22,
        production: &[ParseType::N(23)],
    },
    // 83 - AsyncLow: AsyncLowToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 24,
        production: &[ParseType::N(25)],
    },
    // 84 - Bit: BitToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 32,
        production: &[ParseType::N(33)],
    },
    // 85 - Else: ElseToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 47,
        production: &[ParseType::N(48)],
    },
    // 86 - F32: F32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 59,
        production: &[ParseType::N(60)],
    },
    // 87 - F64: F64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 61,
        production: &[ParseType::N(62)],
    },
    // 88 - Function: FunctionToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 67,
        production: &[ParseType::N(73)],
    },
    // 89 - I32: I32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 76,
        production: &[ParseType::N(77)],
    },
    // 90 - I64: I64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 78,
        production: &[ParseType::N(79)],
    },
    // 91 - IfReset: IfResetToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 83,
        production: &[ParseType::N(90)],
    },
    // 92 - If: IfToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 82,
        production: &[ParseType::N(97)],
    },
    // 93 - Inout: InoutToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 98,
        production: &[ParseType::N(99)],
    },
    // 94 - Input: InputToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 100,
        production: &[ParseType::N(101)],
    },
    // 95 - Interface: InterfaceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 118,
        production: &[ParseType::N(123)],
    },
    // 96 - Localparam: LocalparamToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 130,
        production: &[ParseType::N(132)],
    },
    // 97 - Logic: LogicToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 133,
        production: &[ParseType::N(134)],
    },
    // 98 - Modport: ModportToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 137,
        production: &[ParseType::N(143)],
    },
    // 99 - Module: ModuleToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 144,
        production: &[ParseType::N(150)],
    },
    // 100 - Negedge: NegedgeToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 152,
        production: &[ParseType::N(153)],
    },
    // 101 - Output: OutputToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 155,
        production: &[ParseType::N(156)],
    },
    // 102 - Parameter: ParameterToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 157,
        production: &[ParseType::N(159)],
    },
    // 103 - Posedge: PosedgeToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 166,
        production: &[ParseType::N(167)],
    },
    // 104 - Ref: RefToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 177,
        production: &[ParseType::N(178)],
    },
    // 105 - Return: ReturnToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 179,
        production: &[ParseType::N(181)],
    },
    // 106 - SyncHigh: SyncHighToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 187,
        production: &[ParseType::N(188)],
    },
    // 107 - SyncLow: SyncLowToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 189,
        production: &[ParseType::N(190)],
    },
    // 108 - U32: U32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 194,
        production: &[ParseType::N(195)],
    },
    // 109 - U64: U64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 196,
        production: &[ParseType::N(197)],
    },
    // 110 - IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ Comments;
    Production {
        lhs: 81,
        production: &[ParseType::N(41), ParseType::T(58)],
    },
    // 111 - Identifier: IdentifierToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 80,
        production: &[ParseType::N(81)],
    },
    // 112 - Number: IntegralNumber;
    Production {
        lhs: 154,
        production: &[ParseType::N(117)],
    },
    // 113 - Number: RealNumber;
    Production {
        lhs: 154,
        production: &[ParseType::N(176)],
    },
    // 114 - IntegralNumber: Based;
    Production {
        lhs: 117,
        production: &[ParseType::N(28)],
    },
    // 115 - IntegralNumber: BaseLess;
    Production {
        lhs: 117,
        production: &[ParseType::N(26)],
    },
    // 116 - IntegralNumber: AllBit;
    Production {
        lhs: 117,
        production: &[ParseType::N(0)],
    },
    // 117 - RealNumber: FixedPoint;
    Production {
        lhs: 176,
        production: &[ParseType::N(65)],
    },
    // 118 - RealNumber: Exponent;
    Production {
        lhs: 176,
        production: &[ParseType::N(51)],
    },
    // 119 - Expression: Expression1 ExpressionList /* Vec */;
    Production {
        lhs: 53,
        production: &[ParseType::N(57), ParseType::N(54)],
    },
    // 120 - ExpressionList: ExpressionListGroup Expression1 ExpressionList;
    Production {
        lhs: 57,
        production: &[ParseType::N(57), ParseType::N(54), ParseType::N(58)],
    },
    // 121 - ExpressionListGroup: BinaryOperator;
    Production {
        lhs: 58,
        production: &[ParseType::N(30)],
    },
    // 122 - ExpressionListGroup: CommonOperator;
    Production {
        lhs: 58,
        production: &[ParseType::N(43)],
    },
    // 123 - ExpressionList: ;
    Production {
        lhs: 57,
        production: &[],
    },
    // 124 - Expression1: Expression1Opt /* Option */ Factor;
    Production {
        lhs: 54,
        production: &[ParseType::N(63), ParseType::N(55)],
    },
    // 125 - Expression1Opt: Expression1OptGroup;
    Production {
        lhs: 55,
        production: &[ParseType::N(56)],
    },
    // 126 - Expression1OptGroup: UnaryOperator;
    Production {
        lhs: 56,
        production: &[ParseType::N(198)],
    },
    // 127 - Expression1OptGroup: CommonOperator;
    Production {
        lhs: 56,
        production: &[ParseType::N(43)],
    },
    // 128 - Expression1Opt: ;
    Production {
        lhs: 55,
        production: &[],
    },
    // 129 - Factor: Number;
    Production {
        lhs: 63,
        production: &[ParseType::N(154)],
    },
    // 130 - Factor: Identifier FactorList /* Vec */;
    Production {
        lhs: 63,
        production: &[ParseType::N(64), ParseType::N(80)],
    },
    // 131 - FactorList: Range FactorList;
    Production {
        lhs: 64,
        production: &[ParseType::N(64), ParseType::N(174)],
    },
    // 132 - FactorList: ;
    Production {
        lhs: 64,
        production: &[],
    },
    // 133 - Factor: LParen Expression RParen;
    Production {
        lhs: 63,
        production: &[ParseType::N(172), ParseType::N(53), ParseType::N(128)],
    },
    // 134 - Range: LBracket Expression RangeOpt /* Option */ RBracket;
    Production {
        lhs: 174,
        production: &[
            ParseType::N(170),
            ParseType::N(175),
            ParseType::N(53),
            ParseType::N(126),
        ],
    },
    // 135 - RangeOpt: Colon Expression;
    Production {
        lhs: 175,
        production: &[ParseType::N(53), ParseType::N(35)],
    },
    // 136 - RangeOpt: ;
    Production {
        lhs: 175,
        production: &[],
    },
    // 137 - Width: LBracket Expression RBracket;
    Production {
        lhs: 203,
        production: &[ParseType::N(170), ParseType::N(53), ParseType::N(126)],
    },
    // 138 - BuiltinType: Logic;
    Production {
        lhs: 34,
        production: &[ParseType::N(133)],
    },
    // 139 - BuiltinType: Bit;
    Production {
        lhs: 34,
        production: &[ParseType::N(32)],
    },
    // 140 - BuiltinType: U32;
    Production {
        lhs: 34,
        production: &[ParseType::N(194)],
    },
    // 141 - BuiltinType: U64;
    Production {
        lhs: 34,
        production: &[ParseType::N(196)],
    },
    // 142 - BuiltinType: I32;
    Production {
        lhs: 34,
        production: &[ParseType::N(76)],
    },
    // 143 - BuiltinType: I64;
    Production {
        lhs: 34,
        production: &[ParseType::N(78)],
    },
    // 144 - BuiltinType: F32;
    Production {
        lhs: 34,
        production: &[ParseType::N(59)],
    },
    // 145 - BuiltinType: F64;
    Production {
        lhs: 34,
        production: &[ParseType::N(61)],
    },
    // 146 - Type: TypeGroup TypeList /* Vec */;
    Production {
        lhs: 191,
        production: &[ParseType::N(193), ParseType::N(192)],
    },
    // 147 - TypeGroup: BuiltinType;
    Production {
        lhs: 192,
        production: &[ParseType::N(34)],
    },
    // 148 - TypeGroup: Identifier;
    Production {
        lhs: 192,
        production: &[ParseType::N(80)],
    },
    // 149 - TypeList: Width TypeList;
    Production {
        lhs: 193,
        production: &[ParseType::N(193), ParseType::N(203)],
    },
    // 150 - TypeList: ;
    Production {
        lhs: 193,
        production: &[],
    },
    // 151 - Statement: AssignmentStatement;
    Production {
        lhs: 186,
        production: &[ParseType::N(21)],
    },
    // 152 - Statement: IfStatement;
    Production {
        lhs: 186,
        production: &[ParseType::N(91)],
    },
    // 153 - Statement: IfResetStatement;
    Production {
        lhs: 186,
        production: &[ParseType::N(84)],
    },
    // 154 - Statement: ReturnStatement;
    Production {
        lhs: 186,
        production: &[ParseType::N(180)],
    },
    // 155 - AssignmentStatement: Identifier Equ Expression Semicolon;
    Production {
        lhs: 21,
        production: &[
            ParseType::N(182),
            ParseType::N(53),
            ParseType::N(49),
            ParseType::N(80),
        ],
    },
    // 156 - IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
    Production {
        lhs: 91,
        production: &[
            ParseType::N(95),
            ParseType::N(93),
            ParseType::N(168),
            ParseType::N(92),
            ParseType::N(124),
            ParseType::N(53),
            ParseType::N(82),
        ],
    },
    // 157 - IfStatementList0: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
    Production {
        lhs: 93,
        production: &[
            ParseType::N(93),
            ParseType::N(168),
            ParseType::N(94),
            ParseType::N(124),
            ParseType::N(53),
            ParseType::N(82),
            ParseType::N(47),
        ],
    },
    // 158 - IfStatementList0List: Statement IfStatementList0List;
    Production {
        lhs: 94,
        production: &[ParseType::N(94), ParseType::N(186)],
    },
    // 159 - IfStatementList0List: ;
    Production {
        lhs: 94,
        production: &[],
    },
    // 160 - IfStatementList0: ;
    Production {
        lhs: 93,
        production: &[],
    },
    // 161 - IfStatementList: Statement IfStatementList;
    Production {
        lhs: 92,
        production: &[ParseType::N(92), ParseType::N(186)],
    },
    // 162 - IfStatementList: ;
    Production {
        lhs: 92,
        production: &[],
    },
    // 163 - IfStatementOpt: Else LBrace IfStatementOptList /* Vec */ RBrace;
    Production {
        lhs: 95,
        production: &[
            ParseType::N(168),
            ParseType::N(96),
            ParseType::N(124),
            ParseType::N(47),
        ],
    },
    // 164 - IfStatementOptList: Statement IfStatementOptList;
    Production {
        lhs: 96,
        production: &[ParseType::N(96), ParseType::N(186)],
    },
    // 165 - IfStatementOptList: ;
    Production {
        lhs: 96,
        production: &[],
    },
    // 166 - IfStatementOpt: ;
    Production {
        lhs: 95,
        production: &[],
    },
    // 167 - IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
    Production {
        lhs: 84,
        production: &[
            ParseType::N(88),
            ParseType::N(86),
            ParseType::N(168),
            ParseType::N(85),
            ParseType::N(124),
            ParseType::N(83),
        ],
    },
    // 168 - IfResetStatementList0: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
    Production {
        lhs: 86,
        production: &[
            ParseType::N(86),
            ParseType::N(168),
            ParseType::N(87),
            ParseType::N(124),
            ParseType::N(53),
            ParseType::N(82),
            ParseType::N(47),
        ],
    },
    // 169 - IfResetStatementList0List: Statement IfResetStatementList0List;
    Production {
        lhs: 87,
        production: &[ParseType::N(87), ParseType::N(186)],
    },
    // 170 - IfResetStatementList0List: ;
    Production {
        lhs: 87,
        production: &[],
    },
    // 171 - IfResetStatementList0: ;
    Production {
        lhs: 86,
        production: &[],
    },
    // 172 - IfResetStatementList: Statement IfResetStatementList;
    Production {
        lhs: 85,
        production: &[ParseType::N(85), ParseType::N(186)],
    },
    // 173 - IfResetStatementList: ;
    Production {
        lhs: 85,
        production: &[],
    },
    // 174 - IfResetStatementOpt: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
    Production {
        lhs: 88,
        production: &[
            ParseType::N(168),
            ParseType::N(89),
            ParseType::N(124),
            ParseType::N(47),
        ],
    },
    // 175 - IfResetStatementOptList: Statement IfResetStatementOptList;
    Production {
        lhs: 89,
        production: &[ParseType::N(89), ParseType::N(186)],
    },
    // 176 - IfResetStatementOptList: ;
    Production {
        lhs: 89,
        production: &[],
    },
    // 177 - IfResetStatementOpt: ;
    Production {
        lhs: 88,
        production: &[],
    },
    // 178 - ReturnStatement: Return Expression Semicolon;
    Production {
        lhs: 180,
        production: &[ParseType::N(182), ParseType::N(53), ParseType::N(179)],
    },
    // 179 - VariableDeclaration: Identifier Colon Type Semicolon;
    Production {
        lhs: 200,
        production: &[
            ParseType::N(182),
            ParseType::N(191),
            ParseType::N(35),
            ParseType::N(80),
        ],
    },
    // 180 - ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
    Production {
        lhs: 158,
        production: &[
            ParseType::N(182),
            ParseType::N(53),
            ParseType::N(49),
            ParseType::N(191),
            ParseType::N(35),
            ParseType::N(80),
            ParseType::N(157),
        ],
    },
    // 181 - LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
    Production {
        lhs: 131,
        production: &[
            ParseType::N(182),
            ParseType::N(53),
            ParseType::N(49),
            ParseType::N(191),
            ParseType::N(35),
            ParseType::N(80),
            ParseType::N(130),
        ],
    },
    // 182 - AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 10,
        production: &[
            ParseType::N(168),
            ParseType::N(11),
            ParseType::N(124),
            ParseType::N(172),
            ParseType::N(12),
            ParseType::N(7),
            ParseType::N(128),
            ParseType::N(6),
        ],
    },
    // 183 - AlwaysFfDeclarationList: Statement AlwaysFfDeclarationList;
    Production {
        lhs: 11,
        production: &[ParseType::N(11), ParseType::N(186)],
    },
    // 184 - AlwaysFfDeclarationList: ;
    Production {
        lhs: 11,
        production: &[],
    },
    // 185 - AlwaysFfDeclarationOpt: Comma AlwaysFfReset;
    Production {
        lhs: 12,
        production: &[ParseType::N(13), ParseType::N(39)],
    },
    // 186 - AlwaysFfDeclarationOpt: ;
    Production {
        lhs: 12,
        production: &[],
    },
    // 187 - AlwaysFfClock: AlwaysFfClockOpt /* Option */ Identifier;
    Production {
        lhs: 7,
        production: &[ParseType::N(80), ParseType::N(8)],
    },
    // 188 - AlwaysFfClockOpt: AlwaysFfClockOptGroup;
    Production {
        lhs: 8,
        production: &[ParseType::N(9)],
    },
    // 189 - AlwaysFfClockOptGroup: Posedge;
    Production {
        lhs: 9,
        production: &[ParseType::N(166)],
    },
    // 190 - AlwaysFfClockOptGroup: Negedge;
    Production {
        lhs: 9,
        production: &[ParseType::N(152)],
    },
    // 191 - AlwaysFfClockOpt: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 192 - AlwaysFfReset: AlwaysFfResetOpt /* Option */ Identifier;
    Production {
        lhs: 13,
        production: &[ParseType::N(80), ParseType::N(14)],
    },
    // 193 - AlwaysFfResetOpt: AlwaysFfResetOptGroup;
    Production {
        lhs: 14,
        production: &[ParseType::N(15)],
    },
    // 194 - AlwaysFfResetOptGroup: AsyncLow;
    Production {
        lhs: 15,
        production: &[ParseType::N(24)],
    },
    // 195 - AlwaysFfResetOptGroup: AsyncHigh;
    Production {
        lhs: 15,
        production: &[ParseType::N(22)],
    },
    // 196 - AlwaysFfResetOptGroup: SyncLow;
    Production {
        lhs: 15,
        production: &[ParseType::N(189)],
    },
    // 197 - AlwaysFfResetOptGroup: SyncHigh;
    Production {
        lhs: 15,
        production: &[ParseType::N(187)],
    },
    // 198 - AlwaysFfResetOpt: ;
    Production {
        lhs: 14,
        production: &[],
    },
    // 199 - AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 3,
        production: &[
            ParseType::N(168),
            ParseType::N(4),
            ParseType::N(124),
            ParseType::N(2),
        ],
    },
    // 200 - AlwaysCombDeclarationList: Statement AlwaysCombDeclarationList;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(186)],
    },
    // 201 - AlwaysCombDeclarationList: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 202 - AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
    Production {
        lhs: 18,
        production: &[
            ParseType::N(182),
            ParseType::N(53),
            ParseType::N(49),
            ParseType::N(19),
            ParseType::N(80),
            ParseType::N(17),
        ],
    },
    // 203 - AssignDeclarationOpt: Colon Type;
    Production {
        lhs: 19,
        production: &[ParseType::N(191), ParseType::N(35)],
    },
    // 204 - AssignDeclarationOpt: ;
    Production {
        lhs: 19,
        production: &[],
    },
    // 205 - ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
    Production {
        lhs: 138,
        production: &[
            ParseType::N(168),
            ParseType::N(140),
            ParseType::N(124),
            ParseType::N(80),
            ParseType::N(137),
        ],
    },
    // 206 - ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
    Production {
        lhs: 140,
        production: &[ParseType::N(142), ParseType::N(141), ParseType::N(139)],
    },
    // 207 - ModportListList: Comma ModportItem ModportListList;
    Production {
        lhs: 141,
        production: &[ParseType::N(141), ParseType::N(139), ParseType::N(39)],
    },
    // 208 - ModportListList: ;
    Production {
        lhs: 141,
        production: &[],
    },
    // 209 - ModportListOpt: Comma;
    Production {
        lhs: 142,
        production: &[ParseType::N(39)],
    },
    // 210 - ModportListOpt: ;
    Production {
        lhs: 142,
        production: &[],
    },
    // 211 - ModportItem: Identifier Colon Direction;
    Production {
        lhs: 139,
        production: &[ParseType::N(46), ParseType::N(35), ParseType::N(80)],
    },
    // 212 - Instantiation: Identifier ColonColonColon Identifier InstantiationOpt /* Option */ LBrace InstantiationOpt0 /* Option */ RBrace;
    Production {
        lhs: 114,
        production: &[
            ParseType::N(168),
            ParseType::N(116),
            ParseType::N(124),
            ParseType::N(115),
            ParseType::N(80),
            ParseType::N(36),
            ParseType::N(80),
        ],
    },
    // 213 - InstantiationOpt0: InstancePortList;
    Production {
        lhs: 116,
        production: &[ParseType::N(111)],
    },
    // 214 - InstantiationOpt0: ;
    Production {
        lhs: 116,
        production: &[],
    },
    // 215 - InstantiationOpt: InstanceParameter;
    Production {
        lhs: 115,
        production: &[ParseType::N(102)],
    },
    // 216 - InstantiationOpt: ;
    Production {
        lhs: 115,
        production: &[],
    },
    // 217 - InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
    Production {
        lhs: 102,
        production: &[
            ParseType::N(172),
            ParseType::N(108),
            ParseType::N(128),
            ParseType::N(74),
        ],
    },
    // 218 - InstanceParameterOpt: InstanceParameterList;
    Production {
        lhs: 108,
        production: &[ParseType::N(105)],
    },
    // 219 - InstanceParameterOpt: ;
    Production {
        lhs: 108,
        production: &[],
    },
    // 220 - InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
    Production {
        lhs: 105,
        production: &[ParseType::N(107), ParseType::N(106), ParseType::N(103)],
    },
    // 221 - InstanceParameterListList: Comma InstanceParameterItem InstanceParameterListList;
    Production {
        lhs: 106,
        production: &[ParseType::N(106), ParseType::N(103), ParseType::N(39)],
    },
    // 222 - InstanceParameterListList: ;
    Production {
        lhs: 106,
        production: &[],
    },
    // 223 - InstanceParameterListOpt: Comma;
    Production {
        lhs: 107,
        production: &[ParseType::N(39)],
    },
    // 224 - InstanceParameterListOpt: ;
    Production {
        lhs: 107,
        production: &[],
    },
    // 225 - InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
    Production {
        lhs: 103,
        production: &[ParseType::N(104), ParseType::N(80)],
    },
    // 226 - InstanceParameterItemOpt: Colon Expression;
    Production {
        lhs: 104,
        production: &[ParseType::N(53), ParseType::N(35)],
    },
    // 227 - InstanceParameterItemOpt: ;
    Production {
        lhs: 104,
        production: &[],
    },
    // 228 - InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
    Production {
        lhs: 111,
        production: &[ParseType::N(113), ParseType::N(112), ParseType::N(109)],
    },
    // 229 - InstancePortListList: Comma InstancePortItem InstancePortListList;
    Production {
        lhs: 112,
        production: &[ParseType::N(112), ParseType::N(109), ParseType::N(39)],
    },
    // 230 - InstancePortListList: ;
    Production {
        lhs: 112,
        production: &[],
    },
    // 231 - InstancePortListOpt: Comma;
    Production {
        lhs: 113,
        production: &[ParseType::N(39)],
    },
    // 232 - InstancePortListOpt: ;
    Production {
        lhs: 113,
        production: &[],
    },
    // 233 - InstancePortItem: Identifier InstancePortItemOpt /* Option */;
    Production {
        lhs: 109,
        production: &[ParseType::N(110), ParseType::N(80)],
    },
    // 234 - InstancePortItemOpt: Colon Expression;
    Production {
        lhs: 110,
        production: &[ParseType::N(53), ParseType::N(35)],
    },
    // 235 - InstancePortItemOpt: ;
    Production {
        lhs: 110,
        production: &[],
    },
    // 236 - WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
    Production {
        lhs: 204,
        production: &[
            ParseType::N(172),
            ParseType::N(210),
            ParseType::N(128),
            ParseType::N(74),
        ],
    },
    // 237 - WithParameterOpt: WithParameterList;
    Production {
        lhs: 210,
        production: &[ParseType::N(207)],
    },
    // 238 - WithParameterOpt: ;
    Production {
        lhs: 210,
        production: &[],
    },
    // 239 - WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
    Production {
        lhs: 207,
        production: &[ParseType::N(209), ParseType::N(208), ParseType::N(205)],
    },
    // 240 - WithParameterListList: Comma WithParameterItem WithParameterListList;
    Production {
        lhs: 208,
        production: &[ParseType::N(208), ParseType::N(205), ParseType::N(39)],
    },
    // 241 - WithParameterListList: ;
    Production {
        lhs: 208,
        production: &[],
    },
    // 242 - WithParameterListOpt: Comma;
    Production {
        lhs: 209,
        production: &[ParseType::N(39)],
    },
    // 243 - WithParameterListOpt: ;
    Production {
        lhs: 209,
        production: &[],
    },
    // 244 - WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
    Production {
        lhs: 205,
        production: &[
            ParseType::N(53),
            ParseType::N(49),
            ParseType::N(191),
            ParseType::N(35),
            ParseType::N(80),
            ParseType::N(206),
        ],
    },
    // 245 - WithParameterItemGroup: Parameter;
    Production {
        lhs: 206,
        production: &[ParseType::N(157)],
    },
    // 246 - WithParameterItemGroup: Localparam;
    Production {
        lhs: 206,
        production: &[ParseType::N(130)],
    },
    // 247 - PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
    Production {
        lhs: 160,
        production: &[ParseType::N(172), ParseType::N(165), ParseType::N(128)],
    },
    // 248 - PortDeclarationOpt: PortDeclarationList;
    Production {
        lhs: 165,
        production: &[ParseType::N(162)],
    },
    // 249 - PortDeclarationOpt: ;
    Production {
        lhs: 165,
        production: &[],
    },
    // 250 - PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
    Production {
        lhs: 162,
        production: &[ParseType::N(164), ParseType::N(163), ParseType::N(161)],
    },
    // 251 - PortDeclarationListList: Comma PortDeclarationItem PortDeclarationListList;
    Production {
        lhs: 163,
        production: &[ParseType::N(163), ParseType::N(161), ParseType::N(39)],
    },
    // 252 - PortDeclarationListList: ;
    Production {
        lhs: 163,
        production: &[],
    },
    // 253 - PortDeclarationListOpt: Comma;
    Production {
        lhs: 164,
        production: &[ParseType::N(39)],
    },
    // 254 - PortDeclarationListOpt: ;
    Production {
        lhs: 164,
        production: &[],
    },
    // 255 - PortDeclarationItem: Identifier Colon Direction Type;
    Production {
        lhs: 161,
        production: &[
            ParseType::N(191),
            ParseType::N(46),
            ParseType::N(35),
            ParseType::N(80),
        ],
    },
    // 256 - Direction: Input;
    Production {
        lhs: 46,
        production: &[ParseType::N(100)],
    },
    // 257 - Direction: Output;
    Production {
        lhs: 46,
        production: &[ParseType::N(155)],
    },
    // 258 - Direction: Inout;
    Production {
        lhs: 46,
        production: &[ParseType::N(98)],
    },
    // 259 - Direction: Ref;
    Production {
        lhs: 46,
        production: &[ParseType::N(177)],
    },
    // 260 - FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 68,
        production: &[
            ParseType::N(168),
            ParseType::N(69),
            ParseType::N(124),
            ParseType::N(191),
            ParseType::N(135),
            ParseType::N(71),
            ParseType::N(70),
            ParseType::N(80),
            ParseType::N(67),
        ],
    },
    // 261 - FunctionDeclarationList: FunctionItem FunctionDeclarationList;
    Production {
        lhs: 69,
        production: &[ParseType::N(69), ParseType::N(72)],
    },
    // 262 - FunctionDeclarationList: ;
    Production {
        lhs: 69,
        production: &[],
    },
    // 263 - FunctionDeclarationOpt0: PortDeclaration;
    Production {
        lhs: 71,
        production: &[ParseType::N(160)],
    },
    // 264 - FunctionDeclarationOpt0: ;
    Production {
        lhs: 71,
        production: &[],
    },
    // 265 - FunctionDeclarationOpt: WithParameter;
    Production {
        lhs: 70,
        production: &[ParseType::N(204)],
    },
    // 266 - FunctionDeclarationOpt: ;
    Production {
        lhs: 70,
        production: &[],
    },
    // 267 - FunctionItem: VariableDeclaration;
    Production {
        lhs: 72,
        production: &[ParseType::N(200)],
    },
    // 268 - FunctionItem: Statement;
    Production {
        lhs: 72,
        production: &[ParseType::N(186)],
    },
    // 269 - ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 145,
        production: &[
            ParseType::N(168),
            ParseType::N(146),
            ParseType::N(124),
            ParseType::N(148),
            ParseType::N(147),
            ParseType::N(80),
            ParseType::N(144),
        ],
    },
    // 270 - ModuleDeclarationList: ModuleItem ModuleDeclarationList;
    Production {
        lhs: 146,
        production: &[ParseType::N(146), ParseType::N(149)],
    },
    // 271 - ModuleDeclarationList: ;
    Production {
        lhs: 146,
        production: &[],
    },
    // 272 - ModuleDeclarationOpt0: PortDeclaration;
    Production {
        lhs: 148,
        production: &[ParseType::N(160)],
    },
    // 273 - ModuleDeclarationOpt0: ;
    Production {
        lhs: 148,
        production: &[],
    },
    // 274 - ModuleDeclarationOpt: WithParameter;
    Production {
        lhs: 147,
        production: &[ParseType::N(204)],
    },
    // 275 - ModuleDeclarationOpt: ;
    Production {
        lhs: 147,
        production: &[],
    },
    // 276 - ModuleItem: VariableDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(200)],
    },
    // 277 - ModuleItem: ParameterDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(158)],
    },
    // 278 - ModuleItem: LocalparamDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(131)],
    },
    // 279 - ModuleItem: AlwaysFfDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(10)],
    },
    // 280 - ModuleItem: AlwaysCombDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(3)],
    },
    // 281 - ModuleItem: AssignDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(18)],
    },
    // 282 - ModuleItem: Instantiation;
    Production {
        lhs: 149,
        production: &[ParseType::N(114)],
    },
    // 283 - ModuleItem: FunctionDeclaration;
    Production {
        lhs: 149,
        production: &[ParseType::N(68)],
    },
    // 284 - InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 119,
        production: &[
            ParseType::N(168),
            ParseType::N(120),
            ParseType::N(124),
            ParseType::N(121),
            ParseType::N(80),
            ParseType::N(118),
        ],
    },
    // 285 - InterfaceDeclarationList: InterfaceItem InterfaceDeclarationList;
    Production {
        lhs: 120,
        production: &[ParseType::N(120), ParseType::N(122)],
    },
    // 286 - InterfaceDeclarationList: ;
    Production {
        lhs: 120,
        production: &[],
    },
    // 287 - InterfaceDeclarationOpt: WithParameter;
    Production {
        lhs: 121,
        production: &[ParseType::N(204)],
    },
    // 288 - InterfaceDeclarationOpt: ;
    Production {
        lhs: 121,
        production: &[],
    },
    // 289 - InterfaceItem: VariableDeclaration;
    Production {
        lhs: 122,
        production: &[ParseType::N(200)],
    },
    // 290 - InterfaceItem: ParameterDeclaration;
    Production {
        lhs: 122,
        production: &[ParseType::N(158)],
    },
    // 291 - InterfaceItem: LocalparamDeclaration;
    Production {
        lhs: 122,
        production: &[ParseType::N(131)],
    },
    // 292 - InterfaceItem: ModportDeclaration;
    Production {
        lhs: 122,
        production: &[ParseType::N(138)],
    },
    // 293 - Description: ModuleDeclaration;
    Production {
        lhs: 45,
        production: &[ParseType::N(145)],
    },
    // 294 - Description: InterfaceDeclaration;
    Production {
        lhs: 45,
        production: &[ParseType::N(119)],
    },
    // 295 - Veryl: Start VerylList /* Vec */;
    Production {
        lhs: 201,
        production: &[ParseType::N(202), ParseType::N(184)],
    },
    // 296 - VerylList: Description VerylList;
    Production {
        lhs: 202,
        production: &[ParseType::N(202), ParseType::N(45)],
    },
    // 297 - VerylList: ;
    Production {
        lhs: 202,
        production: &[],
    },
];

parol_runtime::lazy_static::lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![
        ("INITIAL", Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()),

    ];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut VerylGrammar,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        201,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = VerylGrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
