// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use parol_runtime::id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::miette::Result;
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::veryl_grammar::VerylGrammar;
use crate::veryl_grammar_trait::VerylGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 65] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+"###,
    /*  6 */ r###"[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*"###,
    /*  7 */ r###"[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*"###,
    /*  8 */ r###"[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*"###,
    /*  9 */ r###"[0-9]+(?:_[0-9]+)*"###,
    /* 10 */ r###"'[01]"###,
    /* 11 */ r###"\->"###,
    /* 12 */ r###"\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>="###,
    /* 13 */ r###"\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|"###,
    /* 14 */ r###"\+|-|&|\||\^~|\^|~\^|~&|~\|"###,
    /* 15 */ r###"!|~"###,
    /* 16 */ r###":::"###,
    /* 17 */ r###":"###,
    /* 18 */ r###","###,
    /* 19 */ r###"\.\."###,
    /* 20 */ r###"="###,
    /* 21 */ r###"\#"###,
    /* 22 */ r###"\{"###,
    /* 23 */ r###"\["###,
    /* 24 */ r###"\("###,
    /* 25 */ r###"\}"###,
    /* 26 */ r###"\]"###,
    /* 27 */ r###"\)"###,
    /* 28 */ r###";"###,
    /* 29 */ r###"always_comb"###,
    /* 30 */ r###"always_ff"###,
    /* 31 */ r###"assign"###,
    /* 32 */ r###"async_high"###,
    /* 33 */ r###"async_low"###,
    /* 34 */ r###"bit"###,
    /* 35 */ r###"else"###,
    /* 36 */ r###"f32"###,
    /* 37 */ r###"f64"###,
    /* 38 */ r###"for"###,
    /* 39 */ r###"function"###,
    /* 40 */ r###"i32"###,
    /* 41 */ r###"i64"###,
    /* 42 */ r###"if_reset"###,
    /* 43 */ r###"if"###,
    /* 44 */ r###"inout"###,
    /* 45 */ r###"input"###,
    /* 46 */ r###"interface"###,
    /* 47 */ r###"in"###,
    /* 48 */ r###"localparam"###,
    /* 49 */ r###"logic"###,
    /* 50 */ r###"modport"###,
    /* 51 */ r###"module"###,
    /* 52 */ r###"negedge"###,
    /* 53 */ r###"output"###,
    /* 54 */ r###"parameter"###,
    /* 55 */ r###"posedge"###,
    /* 56 */ r###"ref"###,
    /* 57 */ r###"return"###,
    /* 58 */ r###"step"###,
    /* 59 */ r###"sync_high"###,
    /* 60 */ r###"sync_low"###,
    /* 61 */ r###"u32"###,
    /* 62 */ r###"u64"###,
    /* 63 */ r###"[a-zA-Z_][0-9a-zA-Z_]*"###,
    /* 64 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 65] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "MultiComment",
    /*  6 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarLBracketEERBracketLBracketPlusMinusRBracketQuestLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /*  7 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /*  8 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarTickLBracketBodhRBracketLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusLParenQuestColonUnderscoreLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusRParenStar",
    /*  9 */ "LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar",
    /* 10 */ "TickLBracket01RBracket",
    /* 11 */ "MinusGT",
    /* 12 */ "PlusEquOrMinusEquOrStarEquOrSlashEquOrPercentEquOrAmpEquOrOrEquOrCircumflexEquOrLTLTEquOrGTGTEquOrLTLTLTEquOrGTGTGTEqu",
    /* 13 */ "StarStarOrStarOrSlashOrPercentOrLTLTLTOrGTGTGTOrLTLTOrGTGTOrLTEquOrGTEquOrLTOrGTOrEquEquEquOrEquEquQuestOrBangEquEquOrBangEquQuestOrEquEquOrBangEquOrAmpAmpOrOrOr",
    /* 14 */ "PlusOrMinusOrAmpOrOrOrCircumflexTildeOrCircumflexOrTildeCircumflexOrTildeAmpOrTildeOr",
    /* 15 */ "BangOrTilde",
    /* 16 */ "ColonColonColon",
    /* 17 */ "Colon",
    /* 18 */ "Comma",
    /* 19 */ "DotDot",
    /* 20 */ "Equ",
    /* 21 */ "Hash",
    /* 22 */ "LBrace",
    /* 23 */ "LBracket",
    /* 24 */ "LParen",
    /* 25 */ "RBrace",
    /* 26 */ "RBracket",
    /* 27 */ "RParen",
    /* 28 */ "Semicolon",
    /* 29 */ "AlwaysUnderscoreComb",
    /* 30 */ "AlwaysUnderscoreFf",
    /* 31 */ "Assign",
    /* 32 */ "AsyncUnderscoreHigh",
    /* 33 */ "AsyncUnderscoreLow",
    /* 34 */ "Bit",
    /* 35 */ "Else",
    /* 36 */ "F32",
    /* 37 */ "F64",
    /* 38 */ "For",
    /* 39 */ "Function",
    /* 40 */ "I32",
    /* 41 */ "I64",
    /* 42 */ "IfUnderscoreReset",
    /* 43 */ "If",
    /* 44 */ "Inout",
    /* 45 */ "Input",
    /* 46 */ "Interface",
    /* 47 */ "In",
    /* 48 */ "Localparam",
    /* 49 */ "Logic",
    /* 50 */ "Modport",
    /* 51 */ "Module",
    /* 52 */ "Negedge",
    /* 53 */ "Output",
    /* 54 */ "Parameter",
    /* 55 */ "Posedge",
    /* 56 */ "Ref",
    /* 57 */ "Return",
    /* 58 */ "Step",
    /* 59 */ "SyncUnderscoreHigh",
    /* 60 */ "SyncUnderscoreLow",
    /* 61 */ "U32",
    /* 62 */ "U64",
    /* 63 */ "LBracketAMinusZAMinusZUnderscoreRBracketLBracket0Minus9aMinusZAMinusZUnderscoreRBracketStar",
    /* 64 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 59]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* MultiComment */
        6, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarLBracketEERBracketLBracketPlusMinusRBracketQuestLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        7, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarDotLBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        8, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStarTickLBracketBodhRBracketLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusLParenQuestColonUnderscoreLBracket0Minus9aMinusFAMinusFxzXZRBracketPlusRParenStar */
        9, /* LBracket0Minus9RBracketPlusLParenQuestColonUnderscoreLBracket0Minus9RBracketPlusRParenStar */
        10, /* TickLBracket01RBracket */
        11, /* MinusGT */
        12, /* PlusEquOrMinusEquOrStarEquOrSlashEquOrPercentEquOrAmpEquOrOrEquOrCircumflexEquOrLTLTEquOrGTGTEquOrLTLTLTEquOrGTGTGTEqu */
        13, /* StarStarOrStarOrSlashOrPercentOrLTLTLTOrGTGTGTOrLTLTOrGTGTOrLTEquOrGTEquOrLTOrGTOrEquEquEquOrEquEquQuestOrBangEquEquOrBangEquQuestOrEquEquOrBangEquOrAmpAmpOrOrOr */
        14, /* PlusOrMinusOrAmpOrOrOrCircumflexTildeOrCircumflexOrTildeCircumflexOrTildeAmpOrTildeOr */
        15, /* BangOrTilde */
        16, /* ColonColonColon */
        17, /* Colon */
        18, /* Comma */
        19, /* DotDot */
        20, /* Equ */
        21, /* Hash */
        22, /* LBrace */
        23, /* LBracket */
        24, /* LParen */
        25, /* RBrace */
        26, /* RBracket */
        27, /* RParen */
        28, /* Semicolon */
        29, /* AlwaysUnderscoreComb */
        30, /* AlwaysUnderscoreFf */
        31, /* Assign */
        32, /* AsyncUnderscoreHigh */
        33, /* AsyncUnderscoreLow */
        34, /* Bit */
        35, /* Else */
        36, /* F32 */
        37, /* F64 */
        38, /* For */
        39, /* Function */
        40, /* I32 */
        41, /* I64 */
        42, /* IfUnderscoreReset */
        43, /* If */
        44, /* Inout */
        45, /* Input */
        46, /* Interface */
        47, /* In */
        48, /* Localparam */
        49, /* Logic */
        50, /* Modport */
        51, /* Module */
        52, /* Negedge */
        53, /* Output */
        54, /* Parameter */
        55, /* Posedge */
        56, /* Ref */
        57, /* Return */
        58, /* Step */
        59, /* SyncUnderscoreHigh */
        60, /* SyncUnderscoreLow */
        61, /* U32 */
        62, /* U64 */
        63, /* LBracketAMinusZAMinusZUnderscoreRBracketLBracket0Minus9aMinusZAMinusZUnderscoreRBracketStar */
    ],
);

const MAX_K: usize = 3;

pub const NON_TERMINALS: &[&str; 225] = &[
    /*   0 */ "AllBit",
    /*   1 */ "AllBitToken",
    /*   2 */ "AlwaysComb",
    /*   3 */ "AlwaysCombDeclaration",
    /*   4 */ "AlwaysCombDeclarationList",
    /*   5 */ "AlwaysCombToken",
    /*   6 */ "AlwaysFf",
    /*   7 */ "AlwaysFfClock",
    /*   8 */ "AlwaysFfClockOpt",
    /*   9 */ "AlwaysFfClockOptGroup",
    /*  10 */ "AlwaysFfDeclaration",
    /*  11 */ "AlwaysFfDeclarationList",
    /*  12 */ "AlwaysFfDeclarationOpt",
    /*  13 */ "AlwaysFfReset",
    /*  14 */ "AlwaysFfResetOpt",
    /*  15 */ "AlwaysFfResetOptGroup",
    /*  16 */ "AlwaysFfToken",
    /*  17 */ "Assign",
    /*  18 */ "AssignDeclaration",
    /*  19 */ "AssignDeclarationOpt",
    /*  20 */ "AssignToken",
    /*  21 */ "AssignmentOperator",
    /*  22 */ "AssignmentOperatorToken",
    /*  23 */ "AssignmentStatement",
    /*  24 */ "AssignmentStatementGroup",
    /*  25 */ "AsyncHigh",
    /*  26 */ "AsyncHighToken",
    /*  27 */ "AsyncLow",
    /*  28 */ "AsyncLowToken",
    /*  29 */ "BaseLess",
    /*  30 */ "BaseLessToken",
    /*  31 */ "Based",
    /*  32 */ "BasedToken",
    /*  33 */ "BinaryOperator",
    /*  34 */ "BinaryOperatorToken",
    /*  35 */ "Bit",
    /*  36 */ "BitToken",
    /*  37 */ "BuiltinType",
    /*  38 */ "Colon",
    /*  39 */ "ColonColonColon",
    /*  40 */ "ColonColonColonToken",
    /*  41 */ "ColonToken",
    /*  42 */ "Comma",
    /*  43 */ "CommaToken",
    /*  44 */ "Comments",
    /*  45 */ "CommentsOpt",
    /*  46 */ "CommonOperator",
    /*  47 */ "CommonOperatorToken",
    /*  48 */ "Description",
    /*  49 */ "Direction",
    /*  50 */ "DotDot",
    /*  51 */ "DotDotToken",
    /*  52 */ "Else",
    /*  53 */ "ElseToken",
    /*  54 */ "Equ",
    /*  55 */ "EquToken",
    /*  56 */ "Exponent",
    /*  57 */ "ExponentToken",
    /*  58 */ "Expression",
    /*  59 */ "Expression1",
    /*  60 */ "Expression1Opt",
    /*  61 */ "Expression1OptGroup",
    /*  62 */ "ExpressionList",
    /*  63 */ "ExpressionListGroup",
    /*  64 */ "F32",
    /*  65 */ "F32Token",
    /*  66 */ "F64",
    /*  67 */ "F64Token",
    /*  68 */ "Factor",
    /*  69 */ "FactorList",
    /*  70 */ "FixedPoint",
    /*  71 */ "FixedPointToken",
    /*  72 */ "For",
    /*  73 */ "ForStatement",
    /*  74 */ "ForStatementList",
    /*  75 */ "ForStatementOpt",
    /*  76 */ "ForToken",
    /*  77 */ "Function",
    /*  78 */ "FunctionDeclaration",
    /*  79 */ "FunctionDeclarationList",
    /*  80 */ "FunctionDeclarationOpt",
    /*  81 */ "FunctionDeclarationOpt0",
    /*  82 */ "FunctionItem",
    /*  83 */ "FunctionToken",
    /*  84 */ "Hash",
    /*  85 */ "HashToken",
    /*  86 */ "I32",
    /*  87 */ "I32Token",
    /*  88 */ "I64",
    /*  89 */ "I64Token",
    /*  90 */ "Identifier",
    /*  91 */ "IdentifierToken",
    /*  92 */ "If",
    /*  93 */ "IfReset",
    /*  94 */ "IfResetStatement",
    /*  95 */ "IfResetStatementList",
    /*  96 */ "IfResetStatementList0",
    /*  97 */ "IfResetStatementList0List",
    /*  98 */ "IfResetStatementOpt",
    /*  99 */ "IfResetStatementOptList",
    /* 100 */ "IfResetToken",
    /* 101 */ "IfStatement",
    /* 102 */ "IfStatementList",
    /* 103 */ "IfStatementList0",
    /* 104 */ "IfStatementList0List",
    /* 105 */ "IfStatementOpt",
    /* 106 */ "IfStatementOptList",
    /* 107 */ "IfToken",
    /* 108 */ "In",
    /* 109 */ "InToken",
    /* 110 */ "Inout",
    /* 111 */ "InoutToken",
    /* 112 */ "Input",
    /* 113 */ "InputToken",
    /* 114 */ "InstanceParameter",
    /* 115 */ "InstanceParameterItem",
    /* 116 */ "InstanceParameterItemOpt",
    /* 117 */ "InstanceParameterList",
    /* 118 */ "InstanceParameterListList",
    /* 119 */ "InstanceParameterListOpt",
    /* 120 */ "InstanceParameterOpt",
    /* 121 */ "InstancePortItem",
    /* 122 */ "InstancePortItemOpt",
    /* 123 */ "InstancePortList",
    /* 124 */ "InstancePortListList",
    /* 125 */ "InstancePortListOpt",
    /* 126 */ "Instantiation",
    /* 127 */ "InstantiationOpt",
    /* 128 */ "InstantiationOpt0",
    /* 129 */ "IntegralNumber",
    /* 130 */ "Interface",
    /* 131 */ "InterfaceDeclaration",
    /* 132 */ "InterfaceDeclarationList",
    /* 133 */ "InterfaceDeclarationOpt",
    /* 134 */ "InterfaceItem",
    /* 135 */ "InterfaceToken",
    /* 136 */ "LBrace",
    /* 137 */ "LBraceToken",
    /* 138 */ "LBracket",
    /* 139 */ "LBracketToken",
    /* 140 */ "LParen",
    /* 141 */ "LParenToken",
    /* 142 */ "Localparam",
    /* 143 */ "LocalparamDeclaration",
    /* 144 */ "LocalparamToken",
    /* 145 */ "Logic",
    /* 146 */ "LogicToken",
    /* 147 */ "MinusGT",
    /* 148 */ "MinusGTToken",
    /* 149 */ "Modport",
    /* 150 */ "ModportDeclaration",
    /* 151 */ "ModportItem",
    /* 152 */ "ModportList",
    /* 153 */ "ModportListList",
    /* 154 */ "ModportListOpt",
    /* 155 */ "ModportToken",
    /* 156 */ "Module",
    /* 157 */ "ModuleDeclaration",
    /* 158 */ "ModuleDeclarationList",
    /* 159 */ "ModuleDeclarationOpt",
    /* 160 */ "ModuleDeclarationOpt0",
    /* 161 */ "ModuleItem",
    /* 162 */ "ModuleToken",
    /* 163 */ "MultiComment",
    /* 164 */ "Negedge",
    /* 165 */ "NegedgeToken",
    /* 166 */ "Number",
    /* 167 */ "Output",
    /* 168 */ "OutputToken",
    /* 169 */ "Parameter",
    /* 170 */ "ParameterDeclaration",
    /* 171 */ "ParameterToken",
    /* 172 */ "PortDeclaration",
    /* 173 */ "PortDeclarationItem",
    /* 174 */ "PortDeclarationList",
    /* 175 */ "PortDeclarationListList",
    /* 176 */ "PortDeclarationListOpt",
    /* 177 */ "PortDeclarationOpt",
    /* 178 */ "Posedge",
    /* 179 */ "PosedgeToken",
    /* 180 */ "RBrace",
    /* 181 */ "RBraceToken",
    /* 182 */ "RBracket",
    /* 183 */ "RBracketToken",
    /* 184 */ "RParen",
    /* 185 */ "RParenToken",
    /* 186 */ "Range",
    /* 187 */ "RangeOpt",
    /* 188 */ "RealNumber",
    /* 189 */ "Ref",
    /* 190 */ "RefToken",
    /* 191 */ "Return",
    /* 192 */ "ReturnStatement",
    /* 193 */ "ReturnToken",
    /* 194 */ "Semicolon",
    /* 195 */ "SemicolonToken",
    /* 196 */ "Start",
    /* 197 */ "StartToken",
    /* 198 */ "Statement",
    /* 199 */ "Step",
    /* 200 */ "StepToken",
    /* 201 */ "SyncHigh",
    /* 202 */ "SyncHighToken",
    /* 203 */ "SyncLow",
    /* 204 */ "SyncLowToken",
    /* 205 */ "Type",
    /* 206 */ "TypeGroup",
    /* 207 */ "TypeList",
    /* 208 */ "U32",
    /* 209 */ "U32Token",
    /* 210 */ "U64",
    /* 211 */ "U64Token",
    /* 212 */ "UnaryOperator",
    /* 213 */ "UnaryOperatorToken",
    /* 214 */ "VariableDeclaration",
    /* 215 */ "Veryl",
    /* 216 */ "VerylList",
    /* 217 */ "Width",
    /* 218 */ "WithParameter",
    /* 219 */ "WithParameterItem",
    /* 220 */ "WithParameterItemGroup",
    /* 221 */ "WithParameterList",
    /* 222 */ "WithParameterListList",
    /* 223 */ "WithParameterListOpt",
    /* 224 */ "WithParameterOpt",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 225] = &[
    /* 0 - "AllBit" */
    LookaheadDFA {
        states: &[Some(68)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "AllBitToken" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "AlwaysComb" */
    LookaheadDFA {
        states: &[Some(87)],
        transitions: &[],
        k: 0,
    },
    /* 3 - "AlwaysCombDeclaration" */
    LookaheadDFA {
        states: &[Some(217)],
        transitions: &[],
        k: 0,
    },
    /* 4 - "AlwaysCombDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(218), Some(219)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 5 - "AlwaysCombToken" */
    LookaheadDFA {
        states: &[Some(28)],
        transitions: &[],
        k: 0,
    },
    /* 6 - "AlwaysFf" */
    LookaheadDFA {
        states: &[Some(88)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "AlwaysFfClock" */
    LookaheadDFA {
        states: &[Some(205)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "AlwaysFfClockOpt" */
    LookaheadDFA {
        states: &[None, Some(206), Some(209)],
        transitions: &[
            DFATransition(0, 52, 1),
            DFATransition(0, 55, 1),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 9 - "AlwaysFfClockOptGroup" */
    LookaheadDFA {
        states: &[None, Some(207), Some(208)],
        transitions: &[DFATransition(0, 52, 2), DFATransition(0, 55, 1)],
        k: 1,
    },
    /* 10 - "AlwaysFfDeclaration" */
    LookaheadDFA {
        states: &[Some(200)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "AlwaysFfDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(201), Some(202)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 12 - "AlwaysFfDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(203), Some(204)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 27, 2)],
        k: 1,
    },
    /* 13 - "AlwaysFfReset" */
    LookaheadDFA {
        states: &[Some(210)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "AlwaysFfResetOpt" */
    LookaheadDFA {
        states: &[None, Some(211), Some(216)],
        transitions: &[
            DFATransition(0, 32, 1),
            DFATransition(0, 33, 1),
            DFATransition(0, 59, 1),
            DFATransition(0, 60, 1),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 15 - "AlwaysFfResetOptGroup" */
    LookaheadDFA {
        states: &[None, Some(212), Some(213), Some(214), Some(215)],
        transitions: &[
            DFATransition(0, 32, 2),
            DFATransition(0, 33, 1),
            DFATransition(0, 59, 4),
            DFATransition(0, 60, 3),
        ],
        k: 1,
    },
    /* 16 - "AlwaysFfToken" */
    LookaheadDFA {
        states: &[Some(29)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "Assign" */
    LookaheadDFA {
        states: &[Some(89)],
        transitions: &[],
        k: 0,
    },
    /* 18 - "AssignDeclaration" */
    LookaheadDFA {
        states: &[Some(220)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "AssignDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(221), Some(222)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 20, 2)],
        k: 1,
    },
    /* 20 - "AssignToken" */
    LookaheadDFA {
        states: &[Some(30)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "AssignmentOperator" */
    LookaheadDFA {
        states: &[Some(69)],
        transitions: &[],
        k: 0,
    },
    /* 22 - "AssignmentOperatorToken" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "AssignmentStatement" */
    LookaheadDFA {
        states: &[Some(166)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "AssignmentStatementGroup" */
    LookaheadDFA {
        states: &[None, Some(167), Some(168)],
        transitions: &[DFATransition(0, 12, 2), DFATransition(0, 20, 1)],
        k: 1,
    },
    /* 25 - "AsyncHigh" */
    LookaheadDFA {
        states: &[Some(90)],
        transitions: &[],
        k: 0,
    },
    /* 26 - "AsyncHighToken" */
    LookaheadDFA {
        states: &[Some(31)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "AsyncLow" */
    LookaheadDFA {
        states: &[Some(91)],
        transitions: &[],
        k: 0,
    },
    /* 28 - "AsyncLowToken" */
    LookaheadDFA {
        states: &[Some(32)],
        transitions: &[],
        k: 0,
    },
    /* 29 - "BaseLess" */
    LookaheadDFA {
        states: &[Some(67)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "BaseLessToken" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 31 - "Based" */
    LookaheadDFA {
        states: &[Some(66)],
        transitions: &[],
        k: 0,
    },
    /* 32 - "BasedToken" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "BinaryOperator" */
    LookaheadDFA {
        states: &[Some(71)],
        transitions: &[],
        k: 0,
    },
    /* 34 - "BinaryOperatorToken" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 35 - "Bit" */
    LookaheadDFA {
        states: &[Some(92)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "BitToken" */
    LookaheadDFA {
        states: &[Some(33)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "BuiltinType" */
    LookaheadDFA {
        states: &[
            None,
            Some(148),
            Some(149),
            Some(150),
            Some(151),
            Some(152),
            Some(153),
            Some(154),
            Some(155),
        ],
        transitions: &[
            DFATransition(0, 34, 2),
            DFATransition(0, 36, 7),
            DFATransition(0, 37, 8),
            DFATransition(0, 40, 5),
            DFATransition(0, 41, 6),
            DFATransition(0, 49, 1),
            DFATransition(0, 61, 3),
            DFATransition(0, 62, 4),
        ],
        k: 1,
    },
    /* 38 - "Colon" */
    LookaheadDFA {
        states: &[Some(73)],
        transitions: &[],
        k: 0,
    },
    /* 39 - "ColonColonColon" */
    LookaheadDFA {
        states: &[Some(74)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "ColonColonColonToken" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 41 - "ColonToken" */
    LookaheadDFA {
        states: &[Some(16)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "Comma" */
    LookaheadDFA {
        states: &[Some(75)],
        transitions: &[],
        k: 0,
    },
    /* 43 - "CommaToken" */
    LookaheadDFA {
        states: &[Some(17)],
        transitions: &[],
        k: 0,
    },
    /* 44 - "Comments" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "CommentsOpt" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 1),
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 27, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 29, 2),
            DFATransition(0, 30, 2),
            DFATransition(0, 31, 2),
            DFATransition(0, 32, 2),
            DFATransition(0, 33, 2),
            DFATransition(0, 34, 2),
            DFATransition(0, 35, 2),
            DFATransition(0, 36, 2),
            DFATransition(0, 37, 2),
            DFATransition(0, 38, 2),
            DFATransition(0, 39, 2),
            DFATransition(0, 40, 2),
            DFATransition(0, 41, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 44, 2),
            DFATransition(0, 45, 2),
            DFATransition(0, 46, 2),
            DFATransition(0, 47, 2),
            DFATransition(0, 48, 2),
            DFATransition(0, 49, 2),
            DFATransition(0, 50, 2),
            DFATransition(0, 51, 2),
            DFATransition(0, 52, 2),
            DFATransition(0, 53, 2),
            DFATransition(0, 54, 2),
            DFATransition(0, 55, 2),
            DFATransition(0, 56, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 58, 2),
            DFATransition(0, 59, 2),
            DFATransition(0, 60, 2),
            DFATransition(0, 61, 2),
            DFATransition(0, 62, 2),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 46 - "CommonOperator" */
    LookaheadDFA {
        states: &[Some(70)],
        transitions: &[],
        k: 0,
    },
    /* 47 - "CommonOperatorToken" */
    LookaheadDFA {
        states: &[Some(13)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "Description" */
    LookaheadDFA {
        states: &[None, Some(311), Some(312)],
        transitions: &[DFATransition(0, 46, 2), DFATransition(0, 51, 1)],
        k: 1,
    },
    /* 49 - "Direction" */
    LookaheadDFA {
        states: &[None, Some(274), Some(275), Some(276), Some(277)],
        transitions: &[
            DFATransition(0, 44, 3),
            DFATransition(0, 45, 1),
            DFATransition(0, 53, 2),
            DFATransition(0, 56, 4),
        ],
        k: 1,
    },
    /* 50 - "DotDot" */
    LookaheadDFA {
        states: &[Some(76)],
        transitions: &[],
        k: 0,
    },
    /* 51 - "DotDotToken" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 52 - "Else" */
    LookaheadDFA {
        states: &[Some(93)],
        transitions: &[],
        k: 0,
    },
    /* 53 - "ElseToken" */
    LookaheadDFA {
        states: &[Some(34)],
        transitions: &[],
        k: 0,
    },
    /* 54 - "Equ" */
    LookaheadDFA {
        states: &[Some(77)],
        transitions: &[],
        k: 0,
    },
    /* 55 - "EquToken" */
    LookaheadDFA {
        states: &[Some(19)],
        transitions: &[],
        k: 0,
    },
    /* 56 - "Exponent" */
    LookaheadDFA {
        states: &[Some(64)],
        transitions: &[],
        k: 0,
    },
    /* 57 - "ExponentToken" */
    LookaheadDFA {
        states: &[Some(5)],
        transitions: &[],
        k: 0,
    },
    /* 58 - "Expression" */
    LookaheadDFA {
        states: &[Some(129)],
        transitions: &[],
        k: 0,
    },
    /* 59 - "Expression1" */
    LookaheadDFA {
        states: &[Some(134)],
        transitions: &[],
        k: 0,
    },
    /* 60 - "Expression1Opt" */
    LookaheadDFA {
        states: &[None, Some(135), Some(138)],
        transitions: &[
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 1),
            DFATransition(0, 24, 2),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 61 - "Expression1OptGroup" */
    LookaheadDFA {
        states: &[None, Some(136), Some(137)],
        transitions: &[DFATransition(0, 14, 2), DFATransition(0, 15, 1)],
        k: 1,
    },
    /* 62 - "ExpressionList" */
    LookaheadDFA {
        states: &[None, Some(130), Some(133)],
        transitions: &[
            DFATransition(0, 13, 1),
            DFATransition(0, 14, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 27, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 63 - "ExpressionListGroup" */
    LookaheadDFA {
        states: &[None, Some(131), Some(132)],
        transitions: &[DFATransition(0, 13, 1), DFATransition(0, 14, 2)],
        k: 1,
    },
    /* 64 - "F32" */
    LookaheadDFA {
        states: &[Some(94)],
        transitions: &[],
        k: 0,
    },
    /* 65 - "F32Token" */
    LookaheadDFA {
        states: &[Some(35)],
        transitions: &[],
        k: 0,
    },
    /* 66 - "F64" */
    LookaheadDFA {
        states: &[Some(95)],
        transitions: &[],
        k: 0,
    },
    /* 67 - "F64Token" */
    LookaheadDFA {
        states: &[Some(36)],
        transitions: &[],
        k: 0,
    },
    /* 68 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(139), Some(140), Some(143)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 1),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 1),
            DFATransition(0, 24, 3),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 69 - "FactorList" */
    LookaheadDFA {
        states: &[None, Some(141), Some(142)],
        transitions: &[
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 2),
            DFATransition(0, 19, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 23, 1),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 2),
            DFATransition(0, 27, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 58, 2),
        ],
        k: 1,
    },
    /* 70 - "FixedPoint" */
    LookaheadDFA {
        states: &[Some(65)],
        transitions: &[],
        k: 0,
    },
    /* 71 - "FixedPointToken" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 72 - "For" */
    LookaheadDFA {
        states: &[Some(96)],
        transitions: &[],
        k: 0,
    },
    /* 73 - "ForStatement" */
    LookaheadDFA {
        states: &[Some(192)],
        transitions: &[],
        k: 0,
    },
    /* 74 - "ForStatementList" */
    LookaheadDFA {
        states: &[None, Some(193), Some(194)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 75 - "ForStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(195), Some(196)],
        transitions: &[DFATransition(0, 22, 2), DFATransition(0, 58, 1)],
        k: 1,
    },
    /* 76 - "ForToken" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 77 - "Function" */
    LookaheadDFA {
        states: &[Some(97)],
        transitions: &[],
        k: 0,
    },
    /* 78 - "FunctionDeclaration" */
    LookaheadDFA {
        states: &[Some(278)],
        transitions: &[],
        k: 0,
    },
    /* 79 - "FunctionDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(279), Some(280)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 80 - "FunctionDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(283), Some(284)],
        transitions: &[
            DFATransition(0, 11, 2),
            DFATransition(0, 21, 1),
            DFATransition(0, 24, 2),
        ],
        k: 1,
    },
    /* 81 - "FunctionDeclarationOpt0" */
    LookaheadDFA {
        states: &[None, Some(281), Some(282)],
        transitions: &[DFATransition(0, 11, 2), DFATransition(0, 24, 1)],
        k: 1,
    },
    /* 82 - "FunctionItem" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(285),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(286),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 38, 5),
            DFATransition(0, 42, 6),
            DFATransition(0, 43, 7),
            DFATransition(0, 57, 8),
            DFATransition(0, 63, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 12, 34),
            DFATransition(1, 17, 4),
            DFATransition(1, 20, 35),
            DFATransition(2, 12, 11),
            DFATransition(2, 17, 3),
            DFATransition(2, 20, 11),
            DFATransition(4, 5, 3),
            DFATransition(4, 34, 3),
            DFATransition(4, 36, 3),
            DFATransition(4, 37, 3),
            DFATransition(4, 40, 3),
            DFATransition(4, 41, 3),
            DFATransition(4, 49, 3),
            DFATransition(4, 61, 3),
            DFATransition(4, 62, 3),
            DFATransition(4, 63, 3),
            DFATransition(5, 5, 9),
            DFATransition(5, 63, 10),
            DFATransition(6, 5, 12),
            DFATransition(6, 22, 13),
            DFATransition(7, 5, 14),
            DFATransition(7, 6, 15),
            DFATransition(7, 7, 16),
            DFATransition(7, 8, 17),
            DFATransition(7, 9, 18),
            DFATransition(7, 10, 19),
            DFATransition(7, 14, 20),
            DFATransition(7, 15, 21),
            DFATransition(7, 24, 22),
            DFATransition(7, 63, 23),
            DFATransition(8, 5, 24),
            DFATransition(8, 6, 25),
            DFATransition(8, 7, 26),
            DFATransition(8, 8, 27),
            DFATransition(8, 9, 28),
            DFATransition(8, 10, 29),
            DFATransition(8, 14, 30),
            DFATransition(8, 15, 31),
            DFATransition(8, 24, 32),
            DFATransition(8, 63, 33),
            DFATransition(9, 63, 11),
            DFATransition(10, 5, 11),
            DFATransition(10, 17, 11),
            DFATransition(12, 22, 11),
            DFATransition(13, 5, 11),
            DFATransition(13, 25, 11),
            DFATransition(13, 38, 11),
            DFATransition(13, 42, 11),
            DFATransition(13, 43, 11),
            DFATransition(13, 57, 11),
            DFATransition(13, 63, 11),
            DFATransition(14, 6, 11),
            DFATransition(14, 7, 11),
            DFATransition(14, 8, 11),
            DFATransition(14, 9, 11),
            DFATransition(14, 10, 11),
            DFATransition(14, 14, 11),
            DFATransition(14, 15, 11),
            DFATransition(14, 24, 11),
            DFATransition(14, 63, 11),
            DFATransition(15, 5, 11),
            DFATransition(15, 13, 11),
            DFATransition(15, 14, 11),
            DFATransition(15, 22, 11),
            DFATransition(16, 5, 11),
            DFATransition(16, 13, 11),
            DFATransition(16, 14, 11),
            DFATransition(16, 22, 11),
            DFATransition(17, 5, 11),
            DFATransition(17, 13, 11),
            DFATransition(17, 14, 11),
            DFATransition(17, 22, 11),
            DFATransition(18, 5, 11),
            DFATransition(18, 13, 11),
            DFATransition(18, 14, 11),
            DFATransition(18, 22, 11),
            DFATransition(19, 5, 11),
            DFATransition(19, 13, 11),
            DFATransition(19, 14, 11),
            DFATransition(19, 22, 11),
            DFATransition(20, 5, 11),
            DFATransition(20, 6, 11),
            DFATransition(20, 7, 11),
            DFATransition(20, 8, 11),
            DFATransition(20, 9, 11),
            DFATransition(20, 10, 11),
            DFATransition(20, 24, 11),
            DFATransition(20, 63, 11),
            DFATransition(21, 5, 11),
            DFATransition(21, 6, 11),
            DFATransition(21, 7, 11),
            DFATransition(21, 8, 11),
            DFATransition(21, 9, 11),
            DFATransition(21, 10, 11),
            DFATransition(21, 24, 11),
            DFATransition(21, 63, 11),
            DFATransition(22, 5, 11),
            DFATransition(22, 6, 11),
            DFATransition(22, 7, 11),
            DFATransition(22, 8, 11),
            DFATransition(22, 9, 11),
            DFATransition(22, 10, 11),
            DFATransition(22, 14, 11),
            DFATransition(22, 15, 11),
            DFATransition(22, 24, 11),
            DFATransition(22, 63, 11),
            DFATransition(23, 5, 11),
            DFATransition(23, 13, 11),
            DFATransition(23, 14, 11),
            DFATransition(23, 22, 11),
            DFATransition(23, 23, 11),
            DFATransition(24, 6, 11),
            DFATransition(24, 7, 11),
            DFATransition(24, 8, 11),
            DFATransition(24, 9, 11),
            DFATransition(24, 10, 11),
            DFATransition(24, 14, 11),
            DFATransition(24, 15, 11),
            DFATransition(24, 24, 11),
            DFATransition(24, 63, 11),
            DFATransition(25, 5, 11),
            DFATransition(25, 13, 11),
            DFATransition(25, 14, 11),
            DFATransition(25, 28, 11),
            DFATransition(26, 5, 11),
            DFATransition(26, 13, 11),
            DFATransition(26, 14, 11),
            DFATransition(26, 28, 11),
            DFATransition(27, 5, 11),
            DFATransition(27, 13, 11),
            DFATransition(27, 14, 11),
            DFATransition(27, 28, 11),
            DFATransition(28, 5, 11),
            DFATransition(28, 13, 11),
            DFATransition(28, 14, 11),
            DFATransition(28, 28, 11),
            DFATransition(29, 5, 11),
            DFATransition(29, 13, 11),
            DFATransition(29, 14, 11),
            DFATransition(29, 28, 11),
            DFATransition(30, 5, 11),
            DFATransition(30, 6, 11),
            DFATransition(30, 7, 11),
            DFATransition(30, 8, 11),
            DFATransition(30, 9, 11),
            DFATransition(30, 10, 11),
            DFATransition(30, 24, 11),
            DFATransition(30, 63, 11),
            DFATransition(31, 5, 11),
            DFATransition(31, 6, 11),
            DFATransition(31, 7, 11),
            DFATransition(31, 8, 11),
            DFATransition(31, 9, 11),
            DFATransition(31, 10, 11),
            DFATransition(31, 24, 11),
            DFATransition(31, 63, 11),
            DFATransition(32, 5, 11),
            DFATransition(32, 6, 11),
            DFATransition(32, 7, 11),
            DFATransition(32, 8, 11),
            DFATransition(32, 9, 11),
            DFATransition(32, 10, 11),
            DFATransition(32, 14, 11),
            DFATransition(32, 15, 11),
            DFATransition(32, 24, 11),
            DFATransition(32, 63, 11),
            DFATransition(33, 5, 11),
            DFATransition(33, 13, 11),
            DFATransition(33, 14, 11),
            DFATransition(33, 23, 11),
            DFATransition(33, 28, 11),
            DFATransition(34, 5, 11),
            DFATransition(34, 6, 11),
            DFATransition(34, 7, 11),
            DFATransition(34, 8, 11),
            DFATransition(34, 9, 11),
            DFATransition(34, 10, 11),
            DFATransition(34, 14, 11),
            DFATransition(34, 15, 11),
            DFATransition(34, 24, 11),
            DFATransition(34, 63, 11),
            DFATransition(35, 5, 11),
            DFATransition(35, 6, 11),
            DFATransition(35, 7, 11),
            DFATransition(35, 8, 11),
            DFATransition(35, 9, 11),
            DFATransition(35, 10, 11),
            DFATransition(35, 14, 11),
            DFATransition(35, 15, 11),
            DFATransition(35, 24, 11),
            DFATransition(35, 63, 11),
        ],
        k: 3,
    },
    /* 83 - "FunctionToken" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 84 - "Hash" */
    LookaheadDFA {
        states: &[Some(78)],
        transitions: &[],
        k: 0,
    },
    /* 85 - "HashToken" */
    LookaheadDFA {
        states: &[Some(20)],
        transitions: &[],
        k: 0,
    },
    /* 86 - "I32" */
    LookaheadDFA {
        states: &[Some(98)],
        transitions: &[],
        k: 0,
    },
    /* 87 - "I32Token" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 88 - "I64" */
    LookaheadDFA {
        states: &[Some(99)],
        transitions: &[],
        k: 0,
    },
    /* 89 - "I64Token" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 90 - "Identifier" */
    LookaheadDFA {
        states: &[Some(121)],
        transitions: &[],
        k: 0,
    },
    /* 91 - "IdentifierToken" */
    LookaheadDFA {
        states: &[Some(62)],
        transitions: &[],
        k: 0,
    },
    /* 92 - "If" */
    LookaheadDFA {
        states: &[Some(100)],
        transitions: &[],
        k: 0,
    },
    /* 93 - "IfReset" */
    LookaheadDFA {
        states: &[Some(101)],
        transitions: &[],
        k: 0,
    },
    /* 94 - "IfResetStatement" */
    LookaheadDFA {
        states: &[Some(180)],
        transitions: &[],
        k: 0,
    },
    /* 95 - "IfResetStatementList" */
    LookaheadDFA {
        states: &[None, Some(185), Some(186)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 96 - "IfResetStatementList0" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(181),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(184),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 25, 5),
            DFATransition(0, 35, 1),
            DFATransition(0, 38, 6),
            DFATransition(0, 42, 7),
            DFATransition(0, 43, 8),
            DFATransition(0, 57, 9),
            DFATransition(0, 63, 10),
            DFATransition(1, 5, 2),
            DFATransition(1, 22, 26),
            DFATransition(1, 43, 4),
            DFATransition(2, 22, 25),
            DFATransition(2, 43, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 6, 3),
            DFATransition(4, 7, 3),
            DFATransition(4, 8, 3),
            DFATransition(4, 9, 3),
            DFATransition(4, 10, 3),
            DFATransition(4, 14, 3),
            DFATransition(4, 15, 3),
            DFATransition(4, 24, 3),
            DFATransition(4, 63, 3),
            DFATransition(5, 5, 11),
            DFATransition(5, 25, 12),
            DFATransition(5, 29, 13),
            DFATransition(5, 30, 14),
            DFATransition(5, 31, 15),
            DFATransition(5, 35, 16),
            DFATransition(5, 38, 17),
            DFATransition(5, 39, 18),
            DFATransition(5, 42, 19),
            DFATransition(5, 43, 20),
            DFATransition(5, 48, 21),
            DFATransition(5, 54, 22),
            DFATransition(5, 57, 23),
            DFATransition(5, 63, 24),
            DFATransition(6, 5, 27),
            DFATransition(6, 63, 28),
            DFATransition(7, 5, 29),
            DFATransition(7, 22, 30),
            DFATransition(8, 5, 31),
            DFATransition(8, 6, 32),
            DFATransition(8, 7, 33),
            DFATransition(8, 8, 34),
            DFATransition(8, 9, 35),
            DFATransition(8, 10, 36),
            DFATransition(8, 14, 37),
            DFATransition(8, 15, 38),
            DFATransition(8, 24, 39),
            DFATransition(8, 63, 40),
            DFATransition(9, 5, 41),
            DFATransition(9, 6, 42),
            DFATransition(9, 7, 43),
            DFATransition(9, 8, 44),
            DFATransition(9, 9, 45),
            DFATransition(9, 10, 46),
            DFATransition(9, 14, 47),
            DFATransition(9, 15, 48),
            DFATransition(9, 24, 49),
            DFATransition(9, 63, 50),
            DFATransition(10, 5, 51),
            DFATransition(10, 12, 52),
            DFATransition(10, 17, 53),
            DFATransition(10, 20, 54),
            DFATransition(11, 25, 25),
            DFATransition(11, 29, 25),
            DFATransition(11, 30, 25),
            DFATransition(11, 31, 25),
            DFATransition(11, 35, 25),
            DFATransition(11, 38, 25),
            DFATransition(11, 39, 25),
            DFATransition(11, 42, 25),
            DFATransition(11, 43, 25),
            DFATransition(11, 48, 25),
            DFATransition(11, 54, 25),
            DFATransition(11, 57, 25),
            DFATransition(11, 63, 25),
            DFATransition(12, 0, 25),
            DFATransition(12, 5, 25),
            DFATransition(12, 25, 25),
            DFATransition(12, 29, 25),
            DFATransition(12, 30, 25),
            DFATransition(12, 31, 25),
            DFATransition(12, 35, 25),
            DFATransition(12, 38, 25),
            DFATransition(12, 39, 25),
            DFATransition(12, 42, 25),
            DFATransition(12, 43, 25),
            DFATransition(12, 46, 25),
            DFATransition(12, 48, 25),
            DFATransition(12, 51, 25),
            DFATransition(12, 54, 25),
            DFATransition(12, 57, 25),
            DFATransition(12, 63, 25),
            DFATransition(13, 5, 25),
            DFATransition(13, 22, 25),
            DFATransition(14, 5, 25),
            DFATransition(14, 24, 25),
            DFATransition(15, 5, 25),
            DFATransition(15, 63, 25),
            DFATransition(16, 5, 25),
            DFATransition(16, 22, 25),
            DFATransition(16, 43, 25),
            DFATransition(17, 5, 25),
            DFATransition(17, 63, 25),
            DFATransition(18, 5, 25),
            DFATransition(18, 63, 25),
            DFATransition(19, 5, 25),
            DFATransition(19, 22, 25),
            DFATransition(20, 5, 25),
            DFATransition(20, 6, 25),
            DFATransition(20, 7, 25),
            DFATransition(20, 8, 25),
            DFATransition(20, 9, 25),
            DFATransition(20, 10, 25),
            DFATransition(20, 14, 25),
            DFATransition(20, 15, 25),
            DFATransition(20, 24, 25),
            DFATransition(20, 63, 25),
            DFATransition(21, 5, 25),
            DFATransition(21, 63, 25),
            DFATransition(22, 5, 25),
            DFATransition(22, 63, 25),
            DFATransition(23, 5, 25),
            DFATransition(23, 6, 25),
            DFATransition(23, 7, 25),
            DFATransition(23, 8, 25),
            DFATransition(23, 9, 25),
            DFATransition(23, 10, 25),
            DFATransition(23, 14, 25),
            DFATransition(23, 15, 25),
            DFATransition(23, 24, 25),
            DFATransition(23, 63, 25),
            DFATransition(24, 5, 25),
            DFATransition(24, 12, 25),
            DFATransition(24, 16, 25),
            DFATransition(24, 17, 25),
            DFATransition(24, 20, 25),
            DFATransition(26, 5, 25),
            DFATransition(26, 25, 25),
            DFATransition(26, 38, 25),
            DFATransition(26, 42, 25),
            DFATransition(26, 43, 25),
            DFATransition(26, 57, 25),
            DFATransition(26, 63, 25),
            DFATransition(27, 63, 25),
            DFATransition(28, 5, 25),
            DFATransition(28, 17, 25),
            DFATransition(29, 22, 25),
            DFATransition(30, 5, 25),
            DFATransition(30, 25, 25),
            DFATransition(30, 38, 25),
            DFATransition(30, 42, 25),
            DFATransition(30, 43, 25),
            DFATransition(30, 57, 25),
            DFATransition(30, 63, 25),
            DFATransition(31, 6, 25),
            DFATransition(31, 7, 25),
            DFATransition(31, 8, 25),
            DFATransition(31, 9, 25),
            DFATransition(31, 10, 25),
            DFATransition(31, 14, 25),
            DFATransition(31, 15, 25),
            DFATransition(31, 24, 25),
            DFATransition(31, 63, 25),
            DFATransition(32, 5, 25),
            DFATransition(32, 13, 25),
            DFATransition(32, 14, 25),
            DFATransition(32, 22, 25),
            DFATransition(33, 5, 25),
            DFATransition(33, 13, 25),
            DFATransition(33, 14, 25),
            DFATransition(33, 22, 25),
            DFATransition(34, 5, 25),
            DFATransition(34, 13, 25),
            DFATransition(34, 14, 25),
            DFATransition(34, 22, 25),
            DFATransition(35, 5, 25),
            DFATransition(35, 13, 25),
            DFATransition(35, 14, 25),
            DFATransition(35, 22, 25),
            DFATransition(36, 5, 25),
            DFATransition(36, 13, 25),
            DFATransition(36, 14, 25),
            DFATransition(36, 22, 25),
            DFATransition(37, 5, 25),
            DFATransition(37, 6, 25),
            DFATransition(37, 7, 25),
            DFATransition(37, 8, 25),
            DFATransition(37, 9, 25),
            DFATransition(37, 10, 25),
            DFATransition(37, 24, 25),
            DFATransition(37, 63, 25),
            DFATransition(38, 5, 25),
            DFATransition(38, 6, 25),
            DFATransition(38, 7, 25),
            DFATransition(38, 8, 25),
            DFATransition(38, 9, 25),
            DFATransition(38, 10, 25),
            DFATransition(38, 24, 25),
            DFATransition(38, 63, 25),
            DFATransition(39, 5, 25),
            DFATransition(39, 6, 25),
            DFATransition(39, 7, 25),
            DFATransition(39, 8, 25),
            DFATransition(39, 9, 25),
            DFATransition(39, 10, 25),
            DFATransition(39, 14, 25),
            DFATransition(39, 15, 25),
            DFATransition(39, 24, 25),
            DFATransition(39, 63, 25),
            DFATransition(40, 5, 25),
            DFATransition(40, 13, 25),
            DFATransition(40, 14, 25),
            DFATransition(40, 22, 25),
            DFATransition(40, 23, 25),
            DFATransition(41, 6, 25),
            DFATransition(41, 7, 25),
            DFATransition(41, 8, 25),
            DFATransition(41, 9, 25),
            DFATransition(41, 10, 25),
            DFATransition(41, 14, 25),
            DFATransition(41, 15, 25),
            DFATransition(41, 24, 25),
            DFATransition(41, 63, 25),
            DFATransition(42, 5, 25),
            DFATransition(42, 13, 25),
            DFATransition(42, 14, 25),
            DFATransition(42, 28, 25),
            DFATransition(43, 5, 25),
            DFATransition(43, 13, 25),
            DFATransition(43, 14, 25),
            DFATransition(43, 28, 25),
            DFATransition(44, 5, 25),
            DFATransition(44, 13, 25),
            DFATransition(44, 14, 25),
            DFATransition(44, 28, 25),
            DFATransition(45, 5, 25),
            DFATransition(45, 13, 25),
            DFATransition(45, 14, 25),
            DFATransition(45, 28, 25),
            DFATransition(46, 5, 25),
            DFATransition(46, 13, 25),
            DFATransition(46, 14, 25),
            DFATransition(46, 28, 25),
            DFATransition(47, 5, 25),
            DFATransition(47, 6, 25),
            DFATransition(47, 7, 25),
            DFATransition(47, 8, 25),
            DFATransition(47, 9, 25),
            DFATransition(47, 10, 25),
            DFATransition(47, 24, 25),
            DFATransition(47, 63, 25),
            DFATransition(48, 5, 25),
            DFATransition(48, 6, 25),
            DFATransition(48, 7, 25),
            DFATransition(48, 8, 25),
            DFATransition(48, 9, 25),
            DFATransition(48, 10, 25),
            DFATransition(48, 24, 25),
            DFATransition(48, 63, 25),
            DFATransition(49, 5, 25),
            DFATransition(49, 6, 25),
            DFATransition(49, 7, 25),
            DFATransition(49, 8, 25),
            DFATransition(49, 9, 25),
            DFATransition(49, 10, 25),
            DFATransition(49, 14, 25),
            DFATransition(49, 15, 25),
            DFATransition(49, 24, 25),
            DFATransition(49, 63, 25),
            DFATransition(50, 5, 25),
            DFATransition(50, 13, 25),
            DFATransition(50, 14, 25),
            DFATransition(50, 23, 25),
            DFATransition(50, 28, 25),
            DFATransition(51, 12, 25),
            DFATransition(51, 17, 25),
            DFATransition(51, 20, 25),
            DFATransition(52, 5, 25),
            DFATransition(52, 6, 25),
            DFATransition(52, 7, 25),
            DFATransition(52, 8, 25),
            DFATransition(52, 9, 25),
            DFATransition(52, 10, 25),
            DFATransition(52, 14, 25),
            DFATransition(52, 15, 25),
            DFATransition(52, 24, 25),
            DFATransition(52, 63, 25),
            DFATransition(53, 5, 25),
            DFATransition(53, 34, 25),
            DFATransition(53, 36, 25),
            DFATransition(53, 37, 25),
            DFATransition(53, 40, 25),
            DFATransition(53, 41, 25),
            DFATransition(53, 49, 25),
            DFATransition(53, 61, 25),
            DFATransition(53, 62, 25),
            DFATransition(53, 63, 25),
            DFATransition(54, 5, 25),
            DFATransition(54, 6, 25),
            DFATransition(54, 7, 25),
            DFATransition(54, 8, 25),
            DFATransition(54, 9, 25),
            DFATransition(54, 10, 25),
            DFATransition(54, 14, 25),
            DFATransition(54, 15, 25),
            DFATransition(54, 24, 25),
            DFATransition(54, 63, 25),
        ],
        k: 3,
    },
    /* 97 - "IfResetStatementList0List" */
    LookaheadDFA {
        states: &[None, Some(182), Some(183)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 98 - "IfResetStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(187), Some(190)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 35, 1),
            DFATransition(0, 38, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 99 - "IfResetStatementOptList" */
    LookaheadDFA {
        states: &[None, Some(188), Some(189)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 100 - "IfResetToken" */
    LookaheadDFA {
        states: &[Some(41)],
        transitions: &[],
        k: 0,
    },
    /* 101 - "IfStatement" */
    LookaheadDFA {
        states: &[Some(169)],
        transitions: &[],
        k: 0,
    },
    /* 102 - "IfStatementList" */
    LookaheadDFA {
        states: &[None, Some(174), Some(175)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 103 - "IfStatementList0" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(170),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            Some(173),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 25, 5),
            DFATransition(0, 35, 1),
            DFATransition(0, 38, 6),
            DFATransition(0, 42, 7),
            DFATransition(0, 43, 8),
            DFATransition(0, 57, 9),
            DFATransition(0, 63, 10),
            DFATransition(1, 5, 2),
            DFATransition(1, 22, 26),
            DFATransition(1, 43, 4),
            DFATransition(2, 22, 25),
            DFATransition(2, 43, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 6, 3),
            DFATransition(4, 7, 3),
            DFATransition(4, 8, 3),
            DFATransition(4, 9, 3),
            DFATransition(4, 10, 3),
            DFATransition(4, 14, 3),
            DFATransition(4, 15, 3),
            DFATransition(4, 24, 3),
            DFATransition(4, 63, 3),
            DFATransition(5, 5, 11),
            DFATransition(5, 25, 12),
            DFATransition(5, 29, 13),
            DFATransition(5, 30, 14),
            DFATransition(5, 31, 15),
            DFATransition(5, 35, 16),
            DFATransition(5, 38, 17),
            DFATransition(5, 39, 18),
            DFATransition(5, 42, 19),
            DFATransition(5, 43, 20),
            DFATransition(5, 48, 21),
            DFATransition(5, 54, 22),
            DFATransition(5, 57, 23),
            DFATransition(5, 63, 24),
            DFATransition(6, 5, 27),
            DFATransition(6, 63, 28),
            DFATransition(7, 5, 29),
            DFATransition(7, 22, 30),
            DFATransition(8, 5, 31),
            DFATransition(8, 6, 32),
            DFATransition(8, 7, 33),
            DFATransition(8, 8, 34),
            DFATransition(8, 9, 35),
            DFATransition(8, 10, 36),
            DFATransition(8, 14, 37),
            DFATransition(8, 15, 38),
            DFATransition(8, 24, 39),
            DFATransition(8, 63, 40),
            DFATransition(9, 5, 41),
            DFATransition(9, 6, 42),
            DFATransition(9, 7, 43),
            DFATransition(9, 8, 44),
            DFATransition(9, 9, 45),
            DFATransition(9, 10, 46),
            DFATransition(9, 14, 47),
            DFATransition(9, 15, 48),
            DFATransition(9, 24, 49),
            DFATransition(9, 63, 50),
            DFATransition(10, 5, 51),
            DFATransition(10, 12, 52),
            DFATransition(10, 17, 53),
            DFATransition(10, 20, 54),
            DFATransition(11, 25, 25),
            DFATransition(11, 29, 25),
            DFATransition(11, 30, 25),
            DFATransition(11, 31, 25),
            DFATransition(11, 35, 25),
            DFATransition(11, 38, 25),
            DFATransition(11, 39, 25),
            DFATransition(11, 42, 25),
            DFATransition(11, 43, 25),
            DFATransition(11, 48, 25),
            DFATransition(11, 54, 25),
            DFATransition(11, 57, 25),
            DFATransition(11, 63, 25),
            DFATransition(12, 0, 25),
            DFATransition(12, 5, 25),
            DFATransition(12, 25, 25),
            DFATransition(12, 29, 25),
            DFATransition(12, 30, 25),
            DFATransition(12, 31, 25),
            DFATransition(12, 35, 25),
            DFATransition(12, 38, 25),
            DFATransition(12, 39, 25),
            DFATransition(12, 42, 25),
            DFATransition(12, 43, 25),
            DFATransition(12, 46, 25),
            DFATransition(12, 48, 25),
            DFATransition(12, 51, 25),
            DFATransition(12, 54, 25),
            DFATransition(12, 57, 25),
            DFATransition(12, 63, 25),
            DFATransition(13, 5, 25),
            DFATransition(13, 22, 25),
            DFATransition(14, 5, 25),
            DFATransition(14, 24, 25),
            DFATransition(15, 5, 25),
            DFATransition(15, 63, 25),
            DFATransition(16, 5, 25),
            DFATransition(16, 22, 25),
            DFATransition(16, 43, 25),
            DFATransition(17, 5, 25),
            DFATransition(17, 63, 25),
            DFATransition(18, 5, 25),
            DFATransition(18, 63, 25),
            DFATransition(19, 5, 25),
            DFATransition(19, 22, 25),
            DFATransition(20, 5, 25),
            DFATransition(20, 6, 25),
            DFATransition(20, 7, 25),
            DFATransition(20, 8, 25),
            DFATransition(20, 9, 25),
            DFATransition(20, 10, 25),
            DFATransition(20, 14, 25),
            DFATransition(20, 15, 25),
            DFATransition(20, 24, 25),
            DFATransition(20, 63, 25),
            DFATransition(21, 5, 25),
            DFATransition(21, 63, 25),
            DFATransition(22, 5, 25),
            DFATransition(22, 63, 25),
            DFATransition(23, 5, 25),
            DFATransition(23, 6, 25),
            DFATransition(23, 7, 25),
            DFATransition(23, 8, 25),
            DFATransition(23, 9, 25),
            DFATransition(23, 10, 25),
            DFATransition(23, 14, 25),
            DFATransition(23, 15, 25),
            DFATransition(23, 24, 25),
            DFATransition(23, 63, 25),
            DFATransition(24, 5, 25),
            DFATransition(24, 12, 25),
            DFATransition(24, 16, 25),
            DFATransition(24, 17, 25),
            DFATransition(24, 20, 25),
            DFATransition(26, 5, 25),
            DFATransition(26, 25, 25),
            DFATransition(26, 38, 25),
            DFATransition(26, 42, 25),
            DFATransition(26, 43, 25),
            DFATransition(26, 57, 25),
            DFATransition(26, 63, 25),
            DFATransition(27, 63, 25),
            DFATransition(28, 5, 25),
            DFATransition(28, 17, 25),
            DFATransition(29, 22, 25),
            DFATransition(30, 5, 25),
            DFATransition(30, 25, 25),
            DFATransition(30, 38, 25),
            DFATransition(30, 42, 25),
            DFATransition(30, 43, 25),
            DFATransition(30, 57, 25),
            DFATransition(30, 63, 25),
            DFATransition(31, 6, 25),
            DFATransition(31, 7, 25),
            DFATransition(31, 8, 25),
            DFATransition(31, 9, 25),
            DFATransition(31, 10, 25),
            DFATransition(31, 14, 25),
            DFATransition(31, 15, 25),
            DFATransition(31, 24, 25),
            DFATransition(31, 63, 25),
            DFATransition(32, 5, 25),
            DFATransition(32, 13, 25),
            DFATransition(32, 14, 25),
            DFATransition(32, 22, 25),
            DFATransition(33, 5, 25),
            DFATransition(33, 13, 25),
            DFATransition(33, 14, 25),
            DFATransition(33, 22, 25),
            DFATransition(34, 5, 25),
            DFATransition(34, 13, 25),
            DFATransition(34, 14, 25),
            DFATransition(34, 22, 25),
            DFATransition(35, 5, 25),
            DFATransition(35, 13, 25),
            DFATransition(35, 14, 25),
            DFATransition(35, 22, 25),
            DFATransition(36, 5, 25),
            DFATransition(36, 13, 25),
            DFATransition(36, 14, 25),
            DFATransition(36, 22, 25),
            DFATransition(37, 5, 25),
            DFATransition(37, 6, 25),
            DFATransition(37, 7, 25),
            DFATransition(37, 8, 25),
            DFATransition(37, 9, 25),
            DFATransition(37, 10, 25),
            DFATransition(37, 24, 25),
            DFATransition(37, 63, 25),
            DFATransition(38, 5, 25),
            DFATransition(38, 6, 25),
            DFATransition(38, 7, 25),
            DFATransition(38, 8, 25),
            DFATransition(38, 9, 25),
            DFATransition(38, 10, 25),
            DFATransition(38, 24, 25),
            DFATransition(38, 63, 25),
            DFATransition(39, 5, 25),
            DFATransition(39, 6, 25),
            DFATransition(39, 7, 25),
            DFATransition(39, 8, 25),
            DFATransition(39, 9, 25),
            DFATransition(39, 10, 25),
            DFATransition(39, 14, 25),
            DFATransition(39, 15, 25),
            DFATransition(39, 24, 25),
            DFATransition(39, 63, 25),
            DFATransition(40, 5, 25),
            DFATransition(40, 13, 25),
            DFATransition(40, 14, 25),
            DFATransition(40, 22, 25),
            DFATransition(40, 23, 25),
            DFATransition(41, 6, 25),
            DFATransition(41, 7, 25),
            DFATransition(41, 8, 25),
            DFATransition(41, 9, 25),
            DFATransition(41, 10, 25),
            DFATransition(41, 14, 25),
            DFATransition(41, 15, 25),
            DFATransition(41, 24, 25),
            DFATransition(41, 63, 25),
            DFATransition(42, 5, 25),
            DFATransition(42, 13, 25),
            DFATransition(42, 14, 25),
            DFATransition(42, 28, 25),
            DFATransition(43, 5, 25),
            DFATransition(43, 13, 25),
            DFATransition(43, 14, 25),
            DFATransition(43, 28, 25),
            DFATransition(44, 5, 25),
            DFATransition(44, 13, 25),
            DFATransition(44, 14, 25),
            DFATransition(44, 28, 25),
            DFATransition(45, 5, 25),
            DFATransition(45, 13, 25),
            DFATransition(45, 14, 25),
            DFATransition(45, 28, 25),
            DFATransition(46, 5, 25),
            DFATransition(46, 13, 25),
            DFATransition(46, 14, 25),
            DFATransition(46, 28, 25),
            DFATransition(47, 5, 25),
            DFATransition(47, 6, 25),
            DFATransition(47, 7, 25),
            DFATransition(47, 8, 25),
            DFATransition(47, 9, 25),
            DFATransition(47, 10, 25),
            DFATransition(47, 24, 25),
            DFATransition(47, 63, 25),
            DFATransition(48, 5, 25),
            DFATransition(48, 6, 25),
            DFATransition(48, 7, 25),
            DFATransition(48, 8, 25),
            DFATransition(48, 9, 25),
            DFATransition(48, 10, 25),
            DFATransition(48, 24, 25),
            DFATransition(48, 63, 25),
            DFATransition(49, 5, 25),
            DFATransition(49, 6, 25),
            DFATransition(49, 7, 25),
            DFATransition(49, 8, 25),
            DFATransition(49, 9, 25),
            DFATransition(49, 10, 25),
            DFATransition(49, 14, 25),
            DFATransition(49, 15, 25),
            DFATransition(49, 24, 25),
            DFATransition(49, 63, 25),
            DFATransition(50, 5, 25),
            DFATransition(50, 13, 25),
            DFATransition(50, 14, 25),
            DFATransition(50, 23, 25),
            DFATransition(50, 28, 25),
            DFATransition(51, 12, 25),
            DFATransition(51, 17, 25),
            DFATransition(51, 20, 25),
            DFATransition(52, 5, 25),
            DFATransition(52, 6, 25),
            DFATransition(52, 7, 25),
            DFATransition(52, 8, 25),
            DFATransition(52, 9, 25),
            DFATransition(52, 10, 25),
            DFATransition(52, 14, 25),
            DFATransition(52, 15, 25),
            DFATransition(52, 24, 25),
            DFATransition(52, 63, 25),
            DFATransition(53, 5, 25),
            DFATransition(53, 34, 25),
            DFATransition(53, 36, 25),
            DFATransition(53, 37, 25),
            DFATransition(53, 40, 25),
            DFATransition(53, 41, 25),
            DFATransition(53, 49, 25),
            DFATransition(53, 61, 25),
            DFATransition(53, 62, 25),
            DFATransition(53, 63, 25),
            DFATransition(54, 5, 25),
            DFATransition(54, 6, 25),
            DFATransition(54, 7, 25),
            DFATransition(54, 8, 25),
            DFATransition(54, 9, 25),
            DFATransition(54, 10, 25),
            DFATransition(54, 14, 25),
            DFATransition(54, 15, 25),
            DFATransition(54, 24, 25),
            DFATransition(54, 63, 25),
        ],
        k: 3,
    },
    /* 104 - "IfStatementList0List" */
    LookaheadDFA {
        states: &[None, Some(171), Some(172)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 105 - "IfStatementOpt" */
    LookaheadDFA {
        states: &[None, Some(176), Some(179)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 35, 1),
            DFATransition(0, 38, 2),
            DFATransition(0, 42, 2),
            DFATransition(0, 43, 2),
            DFATransition(0, 57, 2),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 106 - "IfStatementOptList" */
    LookaheadDFA {
        states: &[None, Some(177), Some(178)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 38, 1),
            DFATransition(0, 42, 1),
            DFATransition(0, 43, 1),
            DFATransition(0, 57, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 107 - "IfToken" */
    LookaheadDFA {
        states: &[Some(42)],
        transitions: &[],
        k: 0,
    },
    /* 108 - "In" */
    LookaheadDFA {
        states: &[Some(102)],
        transitions: &[],
        k: 0,
    },
    /* 109 - "InToken" */
    LookaheadDFA {
        states: &[Some(46)],
        transitions: &[],
        k: 0,
    },
    /* 110 - "Inout" */
    LookaheadDFA {
        states: &[Some(103)],
        transitions: &[],
        k: 0,
    },
    /* 111 - "InoutToken" */
    LookaheadDFA {
        states: &[Some(43)],
        transitions: &[],
        k: 0,
    },
    /* 112 - "Input" */
    LookaheadDFA {
        states: &[Some(104)],
        transitions: &[],
        k: 0,
    },
    /* 113 - "InputToken" */
    LookaheadDFA {
        states: &[Some(44)],
        transitions: &[],
        k: 0,
    },
    /* 114 - "InstanceParameter" */
    LookaheadDFA {
        states: &[Some(235)],
        transitions: &[],
        k: 0,
    },
    /* 115 - "InstanceParameterItem" */
    LookaheadDFA {
        states: &[Some(243)],
        transitions: &[],
        k: 0,
    },
    /* 116 - "InstanceParameterItemOpt" */
    LookaheadDFA {
        states: &[None, Some(244), Some(245)],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 18, 2),
            DFATransition(0, 27, 2),
        ],
        k: 1,
    },
    /* 117 - "InstanceParameterList" */
    LookaheadDFA {
        states: &[Some(238)],
        transitions: &[],
        k: 0,
    },
    /* 118 - "InstanceParameterListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(239),
            None,
            None,
            None,
            Some(240),
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 18, 1),
            DFATransition(0, 27, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 27, 6),
            DFATransition(1, 63, 4),
            DFATransition(2, 27, 7),
            DFATransition(2, 63, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 17, 3),
            DFATransition(4, 18, 3),
            DFATransition(4, 27, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 22, 9),
            DFATransition(6, 5, 7),
            DFATransition(6, 22, 7),
            DFATransition(8, 22, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 25, 7),
            DFATransition(9, 63, 7),
        ],
        k: 3,
    },
    /* 119 - "InstanceParameterListOpt" */
    LookaheadDFA {
        states: &[None, Some(241), Some(242)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 27, 2)],
        k: 1,
    },
    /* 120 - "InstanceParameterOpt" */
    LookaheadDFA {
        states: &[None, Some(236), Some(237)],
        transitions: &[DFATransition(0, 27, 2), DFATransition(0, 63, 1)],
        k: 1,
    },
    /* 121 - "InstancePortItem" */
    LookaheadDFA {
        states: &[Some(251)],
        transitions: &[],
        k: 0,
    },
    /* 122 - "InstancePortItemOpt" */
    LookaheadDFA {
        states: &[None, Some(252), Some(253)],
        transitions: &[
            DFATransition(0, 17, 1),
            DFATransition(0, 18, 2),
            DFATransition(0, 25, 2),
        ],
        k: 1,
    },
    /* 123 - "InstancePortList" */
    LookaheadDFA {
        states: &[Some(246)],
        transitions: &[],
        k: 0,
    },
    /* 124 - "InstancePortListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(247),
            None,
            None,
            None,
            Some(248),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 18, 1),
            DFATransition(0, 25, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 25, 6),
            DFATransition(1, 63, 4),
            DFATransition(2, 25, 7),
            DFATransition(2, 63, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 17, 3),
            DFATransition(4, 18, 3),
            DFATransition(4, 25, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 25, 9),
            DFATransition(5, 29, 10),
            DFATransition(5, 30, 11),
            DFATransition(5, 31, 12),
            DFATransition(5, 39, 13),
            DFATransition(5, 48, 14),
            DFATransition(5, 54, 15),
            DFATransition(5, 63, 16),
            DFATransition(6, 5, 7),
            DFATransition(6, 25, 7),
            DFATransition(6, 29, 7),
            DFATransition(6, 30, 7),
            DFATransition(6, 31, 7),
            DFATransition(6, 39, 7),
            DFATransition(6, 48, 7),
            DFATransition(6, 54, 7),
            DFATransition(6, 63, 7),
            DFATransition(8, 25, 7),
            DFATransition(8, 29, 7),
            DFATransition(8, 30, 7),
            DFATransition(8, 31, 7),
            DFATransition(8, 39, 7),
            DFATransition(8, 48, 7),
            DFATransition(8, 54, 7),
            DFATransition(8, 63, 7),
            DFATransition(9, 0, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 46, 7),
            DFATransition(9, 51, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 22, 7),
            DFATransition(11, 5, 7),
            DFATransition(11, 24, 7),
            DFATransition(12, 5, 7),
            DFATransition(12, 63, 7),
            DFATransition(13, 5, 7),
            DFATransition(13, 63, 7),
            DFATransition(14, 5, 7),
            DFATransition(14, 63, 7),
            DFATransition(15, 5, 7),
            DFATransition(15, 63, 7),
            DFATransition(16, 5, 7),
            DFATransition(16, 16, 7),
            DFATransition(16, 17, 7),
        ],
        k: 3,
    },
    /* 125 - "InstancePortListOpt" */
    LookaheadDFA {
        states: &[None, Some(249), Some(250)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 126 - "Instantiation" */
    LookaheadDFA {
        states: &[Some(230)],
        transitions: &[],
        k: 0,
    },
    /* 127 - "InstantiationOpt" */
    LookaheadDFA {
        states: &[None, Some(233), Some(234)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 22, 2)],
        k: 1,
    },
    /* 128 - "InstantiationOpt0" */
    LookaheadDFA {
        states: &[None, Some(231), Some(232)],
        transitions: &[DFATransition(0, 25, 2), DFATransition(0, 63, 1)],
        k: 1,
    },
    /* 129 - "IntegralNumber" */
    LookaheadDFA {
        states: &[None, Some(124), Some(125), Some(126)],
        transitions: &[
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 3),
        ],
        k: 1,
    },
    /* 130 - "Interface" */
    LookaheadDFA {
        states: &[Some(105)],
        transitions: &[],
        k: 0,
    },
    /* 131 - "InterfaceDeclaration" */
    LookaheadDFA {
        states: &[Some(302)],
        transitions: &[],
        k: 0,
    },
    /* 132 - "InterfaceDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(303), Some(304)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 48, 1),
            DFATransition(0, 50, 1),
            DFATransition(0, 54, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 133 - "InterfaceDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(305), Some(306)],
        transitions: &[DFATransition(0, 21, 1), DFATransition(0, 22, 2)],
        k: 1,
    },
    /* 134 - "InterfaceItem" */
    LookaheadDFA {
        states: &[None, Some(307), Some(308), Some(309), Some(310)],
        transitions: &[
            DFATransition(0, 48, 3),
            DFATransition(0, 50, 4),
            DFATransition(0, 54, 2),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 135 - "InterfaceToken" */
    LookaheadDFA {
        states: &[Some(45)],
        transitions: &[],
        k: 0,
    },
    /* 136 - "LBrace" */
    LookaheadDFA {
        states: &[Some(79)],
        transitions: &[],
        k: 0,
    },
    /* 137 - "LBraceToken" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 138 - "LBracket" */
    LookaheadDFA {
        states: &[Some(80)],
        transitions: &[],
        k: 0,
    },
    /* 139 - "LBracketToken" */
    LookaheadDFA {
        states: &[Some(22)],
        transitions: &[],
        k: 0,
    },
    /* 140 - "LParen" */
    LookaheadDFA {
        states: &[Some(81)],
        transitions: &[],
        k: 0,
    },
    /* 141 - "LParenToken" */
    LookaheadDFA {
        states: &[Some(23)],
        transitions: &[],
        k: 0,
    },
    /* 142 - "Localparam" */
    LookaheadDFA {
        states: &[Some(106)],
        transitions: &[],
        k: 0,
    },
    /* 143 - "LocalparamDeclaration" */
    LookaheadDFA {
        states: &[Some(199)],
        transitions: &[],
        k: 0,
    },
    /* 144 - "LocalparamToken" */
    LookaheadDFA {
        states: &[Some(47)],
        transitions: &[],
        k: 0,
    },
    /* 145 - "Logic" */
    LookaheadDFA {
        states: &[Some(107)],
        transitions: &[],
        k: 0,
    },
    /* 146 - "LogicToken" */
    LookaheadDFA {
        states: &[Some(48)],
        transitions: &[],
        k: 0,
    },
    /* 147 - "MinusGT" */
    LookaheadDFA {
        states: &[Some(82)],
        transitions: &[],
        k: 0,
    },
    /* 148 - "MinusGTToken" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 149 - "Modport" */
    LookaheadDFA {
        states: &[Some(108)],
        transitions: &[],
        k: 0,
    },
    /* 150 - "ModportDeclaration" */
    LookaheadDFA {
        states: &[Some(223)],
        transitions: &[],
        k: 0,
    },
    /* 151 - "ModportItem" */
    LookaheadDFA {
        states: &[Some(229)],
        transitions: &[],
        k: 0,
    },
    /* 152 - "ModportList" */
    LookaheadDFA {
        states: &[Some(224)],
        transitions: &[],
        k: 0,
    },
    /* 153 - "ModportListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(225),
            None,
            None,
            None,
            Some(226),
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 18, 1),
            DFATransition(0, 25, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 25, 6),
            DFATransition(1, 63, 4),
            DFATransition(2, 25, 7),
            DFATransition(2, 63, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 17, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 25, 9),
            DFATransition(5, 48, 10),
            DFATransition(5, 50, 11),
            DFATransition(5, 54, 12),
            DFATransition(5, 63, 13),
            DFATransition(6, 5, 7),
            DFATransition(6, 25, 7),
            DFATransition(6, 48, 7),
            DFATransition(6, 50, 7),
            DFATransition(6, 54, 7),
            DFATransition(6, 63, 7),
            DFATransition(8, 25, 7),
            DFATransition(8, 48, 7),
            DFATransition(8, 50, 7),
            DFATransition(8, 54, 7),
            DFATransition(8, 63, 7),
            DFATransition(9, 0, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 46, 7),
            DFATransition(9, 51, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 63, 7),
            DFATransition(11, 5, 7),
            DFATransition(11, 63, 7),
            DFATransition(12, 5, 7),
            DFATransition(12, 63, 7),
            DFATransition(13, 5, 7),
            DFATransition(13, 17, 7),
        ],
        k: 3,
    },
    /* 154 - "ModportListOpt" */
    LookaheadDFA {
        states: &[None, Some(227), Some(228)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 155 - "ModportToken" */
    LookaheadDFA {
        states: &[Some(49)],
        transitions: &[],
        k: 0,
    },
    /* 156 - "Module" */
    LookaheadDFA {
        states: &[Some(109)],
        transitions: &[],
        k: 0,
    },
    /* 157 - "ModuleDeclaration" */
    LookaheadDFA {
        states: &[Some(287)],
        transitions: &[],
        k: 0,
    },
    /* 158 - "ModuleDeclarationList" */
    LookaheadDFA {
        states: &[None, Some(288), Some(289)],
        transitions: &[
            DFATransition(0, 25, 2),
            DFATransition(0, 29, 1),
            DFATransition(0, 30, 1),
            DFATransition(0, 31, 1),
            DFATransition(0, 39, 1),
            DFATransition(0, 48, 1),
            DFATransition(0, 54, 1),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 159 - "ModuleDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(292), Some(293)],
        transitions: &[
            DFATransition(0, 21, 1),
            DFATransition(0, 22, 2),
            DFATransition(0, 24, 2),
        ],
        k: 1,
    },
    /* 160 - "ModuleDeclarationOpt0" */
    LookaheadDFA {
        states: &[None, Some(290), Some(291)],
        transitions: &[DFATransition(0, 22, 2), DFATransition(0, 24, 1)],
        k: 1,
    },
    /* 161 - "ModuleItem" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(294),
            None,
            None,
            None,
            None,
            Some(295),
            None,
            None,
            None,
            Some(296),
            None,
            None,
            None,
            Some(297),
            None,
            None,
            None,
            Some(298),
            None,
            None,
            None,
            Some(299),
            None,
            Some(300),
            None,
            None,
            None,
            Some(301),
        ],
        transitions: &[
            DFATransition(0, 29, 17),
            DFATransition(0, 30, 13),
            DFATransition(0, 31, 21),
            DFATransition(0, 39, 27),
            DFATransition(0, 48, 9),
            DFATransition(0, 54, 5),
            DFATransition(0, 63, 1),
            DFATransition(1, 5, 2),
            DFATransition(1, 16, 25),
            DFATransition(1, 17, 4),
            DFATransition(2, 16, 26),
            DFATransition(2, 17, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 34, 3),
            DFATransition(4, 36, 3),
            DFATransition(4, 37, 3),
            DFATransition(4, 40, 3),
            DFATransition(4, 41, 3),
            DFATransition(4, 49, 3),
            DFATransition(4, 61, 3),
            DFATransition(4, 62, 3),
            DFATransition(4, 63, 3),
            DFATransition(5, 5, 6),
            DFATransition(5, 63, 7),
            DFATransition(6, 63, 8),
            DFATransition(7, 5, 8),
            DFATransition(7, 17, 8),
            DFATransition(9, 5, 10),
            DFATransition(9, 63, 11),
            DFATransition(10, 63, 12),
            DFATransition(11, 5, 12),
            DFATransition(11, 17, 12),
            DFATransition(13, 5, 14),
            DFATransition(13, 24, 15),
            DFATransition(14, 24, 16),
            DFATransition(15, 5, 16),
            DFATransition(15, 52, 16),
            DFATransition(15, 55, 16),
            DFATransition(15, 63, 16),
            DFATransition(17, 5, 18),
            DFATransition(17, 22, 19),
            DFATransition(18, 22, 20),
            DFATransition(19, 5, 20),
            DFATransition(19, 25, 20),
            DFATransition(19, 38, 20),
            DFATransition(19, 42, 20),
            DFATransition(19, 43, 20),
            DFATransition(19, 57, 20),
            DFATransition(19, 63, 20),
            DFATransition(21, 5, 22),
            DFATransition(21, 63, 23),
            DFATransition(22, 63, 24),
            DFATransition(23, 5, 24),
            DFATransition(23, 17, 24),
            DFATransition(23, 20, 24),
            DFATransition(25, 5, 26),
            DFATransition(25, 63, 26),
            DFATransition(27, 5, 28),
            DFATransition(27, 63, 29),
            DFATransition(28, 63, 30),
            DFATransition(29, 5, 30),
            DFATransition(29, 11, 30),
            DFATransition(29, 21, 30),
            DFATransition(29, 24, 30),
        ],
        k: 3,
    },
    /* 162 - "ModuleToken" */
    LookaheadDFA {
        states: &[Some(50)],
        transitions: &[],
        k: 0,
    },
    /* 163 - "MultiComment" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 164 - "Negedge" */
    LookaheadDFA {
        states: &[Some(110)],
        transitions: &[],
        k: 0,
    },
    /* 165 - "NegedgeToken" */
    LookaheadDFA {
        states: &[Some(51)],
        transitions: &[],
        k: 0,
    },
    /* 166 - "Number" */
    LookaheadDFA {
        states: &[None, Some(122), Some(123)],
        transitions: &[
            DFATransition(0, 6, 2),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 1),
        ],
        k: 1,
    },
    /* 167 - "Output" */
    LookaheadDFA {
        states: &[Some(111)],
        transitions: &[],
        k: 0,
    },
    /* 168 - "OutputToken" */
    LookaheadDFA {
        states: &[Some(52)],
        transitions: &[],
        k: 0,
    },
    /* 169 - "Parameter" */
    LookaheadDFA {
        states: &[Some(112)],
        transitions: &[],
        k: 0,
    },
    /* 170 - "ParameterDeclaration" */
    LookaheadDFA {
        states: &[Some(198)],
        transitions: &[],
        k: 0,
    },
    /* 171 - "ParameterToken" */
    LookaheadDFA {
        states: &[Some(53)],
        transitions: &[],
        k: 0,
    },
    /* 172 - "PortDeclaration" */
    LookaheadDFA {
        states: &[Some(265)],
        transitions: &[],
        k: 0,
    },
    /* 173 - "PortDeclarationItem" */
    LookaheadDFA {
        states: &[Some(273)],
        transitions: &[],
        k: 0,
    },
    /* 174 - "PortDeclarationList" */
    LookaheadDFA {
        states: &[Some(268)],
        transitions: &[],
        k: 0,
    },
    /* 175 - "PortDeclarationListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(269),
            None,
            None,
            None,
            Some(270),
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 18, 1),
            DFATransition(0, 27, 5),
            DFATransition(1, 5, 2),
            DFATransition(1, 27, 6),
            DFATransition(1, 63, 4),
            DFATransition(2, 27, 7),
            DFATransition(2, 63, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 17, 3),
            DFATransition(5, 5, 8),
            DFATransition(5, 11, 9),
            DFATransition(5, 22, 10),
            DFATransition(6, 5, 7),
            DFATransition(6, 11, 7),
            DFATransition(6, 22, 7),
            DFATransition(8, 11, 7),
            DFATransition(8, 22, 7),
            DFATransition(9, 5, 7),
            DFATransition(9, 34, 7),
            DFATransition(9, 36, 7),
            DFATransition(9, 37, 7),
            DFATransition(9, 40, 7),
            DFATransition(9, 41, 7),
            DFATransition(9, 49, 7),
            DFATransition(9, 61, 7),
            DFATransition(9, 62, 7),
            DFATransition(9, 63, 7),
            DFATransition(10, 5, 7),
            DFATransition(10, 25, 7),
            DFATransition(10, 29, 7),
            DFATransition(10, 30, 7),
            DFATransition(10, 31, 7),
            DFATransition(10, 39, 7),
            DFATransition(10, 48, 7),
            DFATransition(10, 54, 7),
            DFATransition(10, 63, 7),
        ],
        k: 3,
    },
    /* 176 - "PortDeclarationListOpt" */
    LookaheadDFA {
        states: &[None, Some(271), Some(272)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 27, 2)],
        k: 1,
    },
    /* 177 - "PortDeclarationOpt" */
    LookaheadDFA {
        states: &[None, Some(266), Some(267)],
        transitions: &[DFATransition(0, 27, 2), DFATransition(0, 63, 1)],
        k: 1,
    },
    /* 178 - "Posedge" */
    LookaheadDFA {
        states: &[Some(113)],
        transitions: &[],
        k: 0,
    },
    /* 179 - "PosedgeToken" */
    LookaheadDFA {
        states: &[Some(54)],
        transitions: &[],
        k: 0,
    },
    /* 180 - "RBrace" */
    LookaheadDFA {
        states: &[Some(83)],
        transitions: &[],
        k: 0,
    },
    /* 181 - "RBraceToken" */
    LookaheadDFA {
        states: &[Some(24)],
        transitions: &[],
        k: 0,
    },
    /* 182 - "RBracket" */
    LookaheadDFA {
        states: &[Some(84)],
        transitions: &[],
        k: 0,
    },
    /* 183 - "RBracketToken" */
    LookaheadDFA {
        states: &[Some(25)],
        transitions: &[],
        k: 0,
    },
    /* 184 - "RParen" */
    LookaheadDFA {
        states: &[Some(85)],
        transitions: &[],
        k: 0,
    },
    /* 185 - "RParenToken" */
    LookaheadDFA {
        states: &[Some(26)],
        transitions: &[],
        k: 0,
    },
    /* 186 - "Range" */
    LookaheadDFA {
        states: &[Some(144)],
        transitions: &[],
        k: 0,
    },
    /* 187 - "RangeOpt" */
    LookaheadDFA {
        states: &[None, Some(145), Some(146)],
        transitions: &[DFATransition(0, 17, 1), DFATransition(0, 26, 2)],
        k: 1,
    },
    /* 188 - "RealNumber" */
    LookaheadDFA {
        states: &[None, Some(127), Some(128)],
        transitions: &[DFATransition(0, 6, 2), DFATransition(0, 7, 1)],
        k: 1,
    },
    /* 189 - "Ref" */
    LookaheadDFA {
        states: &[Some(114)],
        transitions: &[],
        k: 0,
    },
    /* 190 - "RefToken" */
    LookaheadDFA {
        states: &[Some(55)],
        transitions: &[],
        k: 0,
    },
    /* 191 - "Return" */
    LookaheadDFA {
        states: &[Some(115)],
        transitions: &[],
        k: 0,
    },
    /* 192 - "ReturnStatement" */
    LookaheadDFA {
        states: &[Some(191)],
        transitions: &[],
        k: 0,
    },
    /* 193 - "ReturnToken" */
    LookaheadDFA {
        states: &[Some(56)],
        transitions: &[],
        k: 0,
    },
    /* 194 - "Semicolon" */
    LookaheadDFA {
        states: &[Some(86)],
        transitions: &[],
        k: 0,
    },
    /* 195 - "SemicolonToken" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 196 - "Start" */
    LookaheadDFA {
        states: &[Some(63)],
        transitions: &[],
        k: 0,
    },
    /* 197 - "StartToken" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 198 - "Statement" */
    LookaheadDFA {
        states: &[None, Some(161), Some(162), Some(163), Some(164), Some(165)],
        transitions: &[
            DFATransition(0, 38, 5),
            DFATransition(0, 42, 3),
            DFATransition(0, 43, 2),
            DFATransition(0, 57, 4),
            DFATransition(0, 63, 1),
        ],
        k: 1,
    },
    /* 199 - "Step" */
    LookaheadDFA {
        states: &[Some(116)],
        transitions: &[],
        k: 0,
    },
    /* 200 - "StepToken" */
    LookaheadDFA {
        states: &[Some(57)],
        transitions: &[],
        k: 0,
    },
    /* 201 - "SyncHigh" */
    LookaheadDFA {
        states: &[Some(117)],
        transitions: &[],
        k: 0,
    },
    /* 202 - "SyncHighToken" */
    LookaheadDFA {
        states: &[Some(58)],
        transitions: &[],
        k: 0,
    },
    /* 203 - "SyncLow" */
    LookaheadDFA {
        states: &[Some(118)],
        transitions: &[],
        k: 0,
    },
    /* 204 - "SyncLowToken" */
    LookaheadDFA {
        states: &[Some(59)],
        transitions: &[],
        k: 0,
    },
    /* 205 - "Type" */
    LookaheadDFA {
        states: &[Some(156)],
        transitions: &[],
        k: 0,
    },
    /* 206 - "TypeGroup" */
    LookaheadDFA {
        states: &[None, Some(157), Some(158)],
        transitions: &[
            DFATransition(0, 34, 1),
            DFATransition(0, 36, 1),
            DFATransition(0, 37, 1),
            DFATransition(0, 40, 1),
            DFATransition(0, 41, 1),
            DFATransition(0, 49, 1),
            DFATransition(0, 61, 1),
            DFATransition(0, 62, 1),
            DFATransition(0, 63, 2),
        ],
        k: 1,
    },
    /* 207 - "TypeList" */
    LookaheadDFA {
        states: &[None, Some(159), Some(160)],
        transitions: &[
            DFATransition(0, 18, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 22, 2),
            DFATransition(0, 23, 1),
            DFATransition(0, 27, 2),
            DFATransition(0, 28, 2),
            DFATransition(0, 47, 2),
        ],
        k: 1,
    },
    /* 208 - "U32" */
    LookaheadDFA {
        states: &[Some(119)],
        transitions: &[],
        k: 0,
    },
    /* 209 - "U32Token" */
    LookaheadDFA {
        states: &[Some(60)],
        transitions: &[],
        k: 0,
    },
    /* 210 - "U64" */
    LookaheadDFA {
        states: &[Some(120)],
        transitions: &[],
        k: 0,
    },
    /* 211 - "U64Token" */
    LookaheadDFA {
        states: &[Some(61)],
        transitions: &[],
        k: 0,
    },
    /* 212 - "UnaryOperator" */
    LookaheadDFA {
        states: &[Some(72)],
        transitions: &[],
        k: 0,
    },
    /* 213 - "UnaryOperatorToken" */
    LookaheadDFA {
        states: &[Some(14)],
        transitions: &[],
        k: 0,
    },
    /* 214 - "VariableDeclaration" */
    LookaheadDFA {
        states: &[Some(197)],
        transitions: &[],
        k: 0,
    },
    /* 215 - "Veryl" */
    LookaheadDFA {
        states: &[Some(313)],
        transitions: &[],
        k: 0,
    },
    /* 216 - "VerylList" */
    LookaheadDFA {
        states: &[None, Some(314), Some(315)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 46, 1),
            DFATransition(0, 51, 1),
        ],
        k: 1,
    },
    /* 217 - "Width" */
    LookaheadDFA {
        states: &[Some(147)],
        transitions: &[],
        k: 0,
    },
    /* 218 - "WithParameter" */
    LookaheadDFA {
        states: &[Some(254)],
        transitions: &[],
        k: 0,
    },
    /* 219 - "WithParameterItem" */
    LookaheadDFA {
        states: &[Some(262)],
        transitions: &[],
        k: 0,
    },
    /* 220 - "WithParameterItemGroup" */
    LookaheadDFA {
        states: &[None, Some(263), Some(264)],
        transitions: &[DFATransition(0, 48, 2), DFATransition(0, 54, 1)],
        k: 1,
    },
    /* 221 - "WithParameterList" */
    LookaheadDFA {
        states: &[Some(257)],
        transitions: &[],
        k: 0,
    },
    /* 222 - "WithParameterListList" */
    LookaheadDFA {
        states: &[
            None,
            None,
            None,
            Some(258),
            None,
            None,
            None,
            None,
            Some(259),
            None,
            None,
            None,
            None,
        ],
        transitions: &[
            DFATransition(0, 18, 1),
            DFATransition(0, 27, 6),
            DFATransition(1, 5, 2),
            DFATransition(1, 27, 7),
            DFATransition(1, 48, 4),
            DFATransition(1, 54, 5),
            DFATransition(2, 27, 8),
            DFATransition(2, 48, 3),
            DFATransition(2, 54, 3),
            DFATransition(4, 5, 3),
            DFATransition(4, 63, 3),
            DFATransition(5, 5, 3),
            DFATransition(5, 63, 3),
            DFATransition(6, 5, 9),
            DFATransition(6, 11, 10),
            DFATransition(6, 22, 11),
            DFATransition(6, 24, 12),
            DFATransition(7, 5, 8),
            DFATransition(7, 11, 8),
            DFATransition(7, 22, 8),
            DFATransition(7, 24, 8),
            DFATransition(9, 11, 8),
            DFATransition(9, 22, 8),
            DFATransition(9, 24, 8),
            DFATransition(10, 5, 8),
            DFATransition(10, 34, 8),
            DFATransition(10, 36, 8),
            DFATransition(10, 37, 8),
            DFATransition(10, 40, 8),
            DFATransition(10, 41, 8),
            DFATransition(10, 49, 8),
            DFATransition(10, 61, 8),
            DFATransition(10, 62, 8),
            DFATransition(10, 63, 8),
            DFATransition(11, 5, 8),
            DFATransition(11, 25, 8),
            DFATransition(11, 29, 8),
            DFATransition(11, 30, 8),
            DFATransition(11, 31, 8),
            DFATransition(11, 39, 8),
            DFATransition(11, 48, 8),
            DFATransition(11, 50, 8),
            DFATransition(11, 54, 8),
            DFATransition(11, 63, 8),
            DFATransition(12, 5, 8),
            DFATransition(12, 27, 8),
            DFATransition(12, 63, 8),
        ],
        k: 3,
    },
    /* 223 - "WithParameterListOpt" */
    LookaheadDFA {
        states: &[None, Some(260), Some(261)],
        transitions: &[DFATransition(0, 18, 1), DFATransition(0, 27, 2)],
        k: 1,
    },
    /* 224 - "WithParameterOpt" */
    LookaheadDFA {
        states: &[None, Some(255), Some(256)],
        transitions: &[
            DFATransition(0, 27, 2),
            DFATransition(0, 48, 1),
            DFATransition(0, 54, 1),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 316] = &[
    // 0 - MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+";
    Production {
        lhs: 163,
        production: &[ParseType::T(5)],
    },
    // 1 - Comments: CommentsOpt /* Option */;
    Production {
        lhs: 44,
        production: &[ParseType::N(45)],
    },
    // 2 - CommentsOpt: MultiComment;
    Production {
        lhs: 45,
        production: &[ParseType::N(163)],
    },
    // 3 - CommentsOpt: ;
    Production {
        lhs: 45,
        production: &[],
    },
    // 4 - StartToken: Comments;
    Production {
        lhs: 197,
        production: &[ParseType::N(44)],
    },
    // 5 - ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 57,
        production: &[ParseType::N(44), ParseType::T(6)],
    },
    // 6 - FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 71,
        production: &[ParseType::N(44), ParseType::T(7)],
    },
    // 7 - BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ Comments;
    Production {
        lhs: 32,
        production: &[ParseType::N(44), ParseType::T(8)],
    },
    // 8 - BaseLessToken: /[0-9]+(?:_[0-9]+)*/ Comments;
    Production {
        lhs: 30,
        production: &[ParseType::N(44), ParseType::T(9)],
    },
    // 9 - AllBitToken: /'[01]/ Comments;
    Production {
        lhs: 1,
        production: &[ParseType::N(44), ParseType::T(10)],
    },
    // 10 - MinusGTToken: '->' Comments;
    Production {
        lhs: 148,
        production: &[ParseType::N(44), ParseType::T(11)],
    },
    // 11 - AssignmentOperatorToken: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" Comments;
    Production {
        lhs: 22,
        production: &[ParseType::N(44), ParseType::T(12)],
    },
    // 12 - BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" Comments;
    Production {
        lhs: 34,
        production: &[ParseType::N(44), ParseType::T(13)],
    },
    // 13 - CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" Comments;
    Production {
        lhs: 47,
        production: &[ParseType::N(44), ParseType::T(14)],
    },
    // 14 - UnaryOperatorToken: "!|~" Comments;
    Production {
        lhs: 213,
        production: &[ParseType::N(44), ParseType::T(15)],
    },
    // 15 - ColonColonColonToken: ':::' Comments;
    Production {
        lhs: 40,
        production: &[ParseType::N(44), ParseType::T(16)],
    },
    // 16 - ColonToken: ':' Comments;
    Production {
        lhs: 41,
        production: &[ParseType::N(44), ParseType::T(17)],
    },
    // 17 - CommaToken: ',' Comments;
    Production {
        lhs: 43,
        production: &[ParseType::N(44), ParseType::T(18)],
    },
    // 18 - DotDotToken: '..' Comments;
    Production {
        lhs: 51,
        production: &[ParseType::N(44), ParseType::T(19)],
    },
    // 19 - EquToken: '=' Comments;
    Production {
        lhs: 55,
        production: &[ParseType::N(44), ParseType::T(20)],
    },
    // 20 - HashToken: '#' Comments;
    Production {
        lhs: 85,
        production: &[ParseType::N(44), ParseType::T(21)],
    },
    // 21 - LBraceToken: '{' Comments;
    Production {
        lhs: 137,
        production: &[ParseType::N(44), ParseType::T(22)],
    },
    // 22 - LBracketToken: '[' Comments;
    Production {
        lhs: 139,
        production: &[ParseType::N(44), ParseType::T(23)],
    },
    // 23 - LParenToken: '(' Comments;
    Production {
        lhs: 141,
        production: &[ParseType::N(44), ParseType::T(24)],
    },
    // 24 - RBraceToken: '}' Comments;
    Production {
        lhs: 181,
        production: &[ParseType::N(44), ParseType::T(25)],
    },
    // 25 - RBracketToken: ']' Comments;
    Production {
        lhs: 183,
        production: &[ParseType::N(44), ParseType::T(26)],
    },
    // 26 - RParenToken: ')' Comments;
    Production {
        lhs: 185,
        production: &[ParseType::N(44), ParseType::T(27)],
    },
    // 27 - SemicolonToken: ';' Comments;
    Production {
        lhs: 195,
        production: &[ParseType::N(44), ParseType::T(28)],
    },
    // 28 - AlwaysCombToken: 'always_comb' Comments;
    Production {
        lhs: 5,
        production: &[ParseType::N(44), ParseType::T(29)],
    },
    // 29 - AlwaysFfToken: 'always_ff' Comments;
    Production {
        lhs: 16,
        production: &[ParseType::N(44), ParseType::T(30)],
    },
    // 30 - AssignToken: 'assign' Comments;
    Production {
        lhs: 20,
        production: &[ParseType::N(44), ParseType::T(31)],
    },
    // 31 - AsyncHighToken: 'async_high' Comments;
    Production {
        lhs: 26,
        production: &[ParseType::N(44), ParseType::T(32)],
    },
    // 32 - AsyncLowToken: 'async_low' Comments;
    Production {
        lhs: 28,
        production: &[ParseType::N(44), ParseType::T(33)],
    },
    // 33 - BitToken: 'bit' Comments;
    Production {
        lhs: 36,
        production: &[ParseType::N(44), ParseType::T(34)],
    },
    // 34 - ElseToken: 'else' Comments;
    Production {
        lhs: 53,
        production: &[ParseType::N(44), ParseType::T(35)],
    },
    // 35 - F32Token: 'f32' Comments;
    Production {
        lhs: 65,
        production: &[ParseType::N(44), ParseType::T(36)],
    },
    // 36 - F64Token: 'f64' Comments;
    Production {
        lhs: 67,
        production: &[ParseType::N(44), ParseType::T(37)],
    },
    // 37 - ForToken: 'for' Comments;
    Production {
        lhs: 76,
        production: &[ParseType::N(44), ParseType::T(38)],
    },
    // 38 - FunctionToken: 'function' Comments;
    Production {
        lhs: 83,
        production: &[ParseType::N(44), ParseType::T(39)],
    },
    // 39 - I32Token: 'i32' Comments;
    Production {
        lhs: 87,
        production: &[ParseType::N(44), ParseType::T(40)],
    },
    // 40 - I64Token: 'i64' Comments;
    Production {
        lhs: 89,
        production: &[ParseType::N(44), ParseType::T(41)],
    },
    // 41 - IfResetToken: 'if_reset' Comments;
    Production {
        lhs: 100,
        production: &[ParseType::N(44), ParseType::T(42)],
    },
    // 42 - IfToken: 'if' Comments;
    Production {
        lhs: 107,
        production: &[ParseType::N(44), ParseType::T(43)],
    },
    // 43 - InoutToken: 'inout' Comments;
    Production {
        lhs: 111,
        production: &[ParseType::N(44), ParseType::T(44)],
    },
    // 44 - InputToken: 'input' Comments;
    Production {
        lhs: 113,
        production: &[ParseType::N(44), ParseType::T(45)],
    },
    // 45 - InterfaceToken: 'interface' Comments;
    Production {
        lhs: 135,
        production: &[ParseType::N(44), ParseType::T(46)],
    },
    // 46 - InToken: 'in' Comments;
    Production {
        lhs: 109,
        production: &[ParseType::N(44), ParseType::T(47)],
    },
    // 47 - LocalparamToken: 'localparam' Comments;
    Production {
        lhs: 144,
        production: &[ParseType::N(44), ParseType::T(48)],
    },
    // 48 - LogicToken: 'logic' Comments;
    Production {
        lhs: 146,
        production: &[ParseType::N(44), ParseType::T(49)],
    },
    // 49 - ModportToken: 'modport' Comments;
    Production {
        lhs: 155,
        production: &[ParseType::N(44), ParseType::T(50)],
    },
    // 50 - ModuleToken: 'module' Comments;
    Production {
        lhs: 162,
        production: &[ParseType::N(44), ParseType::T(51)],
    },
    // 51 - NegedgeToken: 'negedge' Comments;
    Production {
        lhs: 165,
        production: &[ParseType::N(44), ParseType::T(52)],
    },
    // 52 - OutputToken: 'output' Comments;
    Production {
        lhs: 168,
        production: &[ParseType::N(44), ParseType::T(53)],
    },
    // 53 - ParameterToken: 'parameter' Comments;
    Production {
        lhs: 171,
        production: &[ParseType::N(44), ParseType::T(54)],
    },
    // 54 - PosedgeToken: 'posedge' Comments;
    Production {
        lhs: 179,
        production: &[ParseType::N(44), ParseType::T(55)],
    },
    // 55 - RefToken: 'ref' Comments;
    Production {
        lhs: 190,
        production: &[ParseType::N(44), ParseType::T(56)],
    },
    // 56 - ReturnToken: 'return' Comments;
    Production {
        lhs: 193,
        production: &[ParseType::N(44), ParseType::T(57)],
    },
    // 57 - StepToken: 'step' Comments;
    Production {
        lhs: 200,
        production: &[ParseType::N(44), ParseType::T(58)],
    },
    // 58 - SyncHighToken: 'sync_high' Comments;
    Production {
        lhs: 202,
        production: &[ParseType::N(44), ParseType::T(59)],
    },
    // 59 - SyncLowToken: 'sync_low' Comments;
    Production {
        lhs: 204,
        production: &[ParseType::N(44), ParseType::T(60)],
    },
    // 60 - U32Token: 'u32' Comments;
    Production {
        lhs: 209,
        production: &[ParseType::N(44), ParseType::T(61)],
    },
    // 61 - U64Token: 'u64' Comments;
    Production {
        lhs: 211,
        production: &[ParseType::N(44), ParseType::T(62)],
    },
    // 62 - IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ Comments;
    Production {
        lhs: 91,
        production: &[ParseType::N(44), ParseType::T(63)],
    },
    // 63 - Start: StartToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 196,
        production: &[ParseType::N(197)],
    },
    // 64 - Exponent: ExponentToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 56,
        production: &[ParseType::N(57)],
    },
    // 65 - FixedPoint: FixedPointToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 70,
        production: &[ParseType::N(71)],
    },
    // 66 - Based: BasedToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 31,
        production: &[ParseType::N(32)],
    },
    // 67 - BaseLess: BaseLessToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 29,
        production: &[ParseType::N(30)],
    },
    // 68 - AllBit: AllBitToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 0,
        production: &[ParseType::N(1)],
    },
    // 69 - AssignmentOperator: AssignmentOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 21,
        production: &[ParseType::N(22)],
    },
    // 70 - CommonOperator: CommonOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 46,
        production: &[ParseType::N(47)],
    },
    // 71 - BinaryOperator: BinaryOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 33,
        production: &[ParseType::N(34)],
    },
    // 72 - UnaryOperator: UnaryOperatorToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 212,
        production: &[ParseType::N(213)],
    },
    // 73 - Colon: ColonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 38,
        production: &[ParseType::N(41)],
    },
    // 74 - ColonColonColon: ColonColonColonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 39,
        production: &[ParseType::N(40)],
    },
    // 75 - Comma: CommaToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 42,
        production: &[ParseType::N(43)],
    },
    // 76 - DotDot: DotDotToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 50,
        production: &[ParseType::N(51)],
    },
    // 77 - Equ: EquToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 54,
        production: &[ParseType::N(55)],
    },
    // 78 - Hash: HashToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 84,
        production: &[ParseType::N(85)],
    },
    // 79 - LBrace: LBraceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 136,
        production: &[ParseType::N(137)],
    },
    // 80 - LBracket: LBracketToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 138,
        production: &[ParseType::N(139)],
    },
    // 81 - LParen: LParenToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 140,
        production: &[ParseType::N(141)],
    },
    // 82 - MinusGT: MinusGTToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 147,
        production: &[ParseType::N(148)],
    },
    // 83 - RBrace: RBraceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 180,
        production: &[ParseType::N(181)],
    },
    // 84 - RBracket: RBracketToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 182,
        production: &[ParseType::N(183)],
    },
    // 85 - RParen: RParenToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 184,
        production: &[ParseType::N(185)],
    },
    // 86 - Semicolon: SemicolonToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 194,
        production: &[ParseType::N(195)],
    },
    // 87 - AlwaysComb: AlwaysCombToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 2,
        production: &[ParseType::N(5)],
    },
    // 88 - AlwaysFf: AlwaysFfToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 6,
        production: &[ParseType::N(16)],
    },
    // 89 - Assign: AssignToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 17,
        production: &[ParseType::N(20)],
    },
    // 90 - AsyncHigh: AsyncHighToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 25,
        production: &[ParseType::N(26)],
    },
    // 91 - AsyncLow: AsyncLowToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 27,
        production: &[ParseType::N(28)],
    },
    // 92 - Bit: BitToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 35,
        production: &[ParseType::N(36)],
    },
    // 93 - Else: ElseToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 52,
        production: &[ParseType::N(53)],
    },
    // 94 - F32: F32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 64,
        production: &[ParseType::N(65)],
    },
    // 95 - F64: F64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 66,
        production: &[ParseType::N(67)],
    },
    // 96 - For: ForToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 72,
        production: &[ParseType::N(76)],
    },
    // 97 - Function: FunctionToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 77,
        production: &[ParseType::N(83)],
    },
    // 98 - I32: I32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 86,
        production: &[ParseType::N(87)],
    },
    // 99 - I64: I64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 88,
        production: &[ParseType::N(89)],
    },
    // 100 - If: IfToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 92,
        production: &[ParseType::N(107)],
    },
    // 101 - IfReset: IfResetToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 93,
        production: &[ParseType::N(100)],
    },
    // 102 - In: InToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 108,
        production: &[ParseType::N(109)],
    },
    // 103 - Inout: InoutToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 110,
        production: &[ParseType::N(111)],
    },
    // 104 - Input: InputToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 112,
        production: &[ParseType::N(113)],
    },
    // 105 - Interface: InterfaceToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 130,
        production: &[ParseType::N(135)],
    },
    // 106 - Localparam: LocalparamToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 142,
        production: &[ParseType::N(144)],
    },
    // 107 - Logic: LogicToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 145,
        production: &[ParseType::N(146)],
    },
    // 108 - Modport: ModportToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 149,
        production: &[ParseType::N(155)],
    },
    // 109 - Module: ModuleToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 156,
        production: &[ParseType::N(162)],
    },
    // 110 - Negedge: NegedgeToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 164,
        production: &[ParseType::N(165)],
    },
    // 111 - Output: OutputToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 167,
        production: &[ParseType::N(168)],
    },
    // 112 - Parameter: ParameterToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 169,
        production: &[ParseType::N(171)],
    },
    // 113 - Posedge: PosedgeToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 178,
        production: &[ParseType::N(179)],
    },
    // 114 - Ref: RefToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 189,
        production: &[ParseType::N(190)],
    },
    // 115 - Return: ReturnToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 191,
        production: &[ParseType::N(193)],
    },
    // 116 - Step: StepToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 199,
        production: &[ParseType::N(200)],
    },
    // 117 - SyncHigh: SyncHighToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 201,
        production: &[ParseType::N(202)],
    },
    // 118 - SyncLow: SyncLowToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 203,
        production: &[ParseType::N(204)],
    },
    // 119 - U32: U32Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 208,
        production: &[ParseType::N(209)],
    },
    // 120 - U64: U64Token : crate::veryl_token::VerylToken ;
    Production {
        lhs: 210,
        production: &[ParseType::N(211)],
    },
    // 121 - Identifier: IdentifierToken : crate::veryl_token::VerylToken ;
    Production {
        lhs: 90,
        production: &[ParseType::N(91)],
    },
    // 122 - Number: IntegralNumber;
    Production {
        lhs: 166,
        production: &[ParseType::N(129)],
    },
    // 123 - Number: RealNumber;
    Production {
        lhs: 166,
        production: &[ParseType::N(188)],
    },
    // 124 - IntegralNumber: Based;
    Production {
        lhs: 129,
        production: &[ParseType::N(31)],
    },
    // 125 - IntegralNumber: BaseLess;
    Production {
        lhs: 129,
        production: &[ParseType::N(29)],
    },
    // 126 - IntegralNumber: AllBit;
    Production {
        lhs: 129,
        production: &[ParseType::N(0)],
    },
    // 127 - RealNumber: FixedPoint;
    Production {
        lhs: 188,
        production: &[ParseType::N(70)],
    },
    // 128 - RealNumber: Exponent;
    Production {
        lhs: 188,
        production: &[ParseType::N(56)],
    },
    // 129 - Expression: Expression1 ExpressionList /* Vec */;
    Production {
        lhs: 58,
        production: &[ParseType::N(62), ParseType::N(59)],
    },
    // 130 - ExpressionList: ExpressionListGroup Expression1 ExpressionList;
    Production {
        lhs: 62,
        production: &[ParseType::N(62), ParseType::N(59), ParseType::N(63)],
    },
    // 131 - ExpressionListGroup: BinaryOperator;
    Production {
        lhs: 63,
        production: &[ParseType::N(33)],
    },
    // 132 - ExpressionListGroup: CommonOperator;
    Production {
        lhs: 63,
        production: &[ParseType::N(46)],
    },
    // 133 - ExpressionList: ;
    Production {
        lhs: 62,
        production: &[],
    },
    // 134 - Expression1: Expression1Opt /* Option */ Factor;
    Production {
        lhs: 59,
        production: &[ParseType::N(68), ParseType::N(60)],
    },
    // 135 - Expression1Opt: Expression1OptGroup;
    Production {
        lhs: 60,
        production: &[ParseType::N(61)],
    },
    // 136 - Expression1OptGroup: UnaryOperator;
    Production {
        lhs: 61,
        production: &[ParseType::N(212)],
    },
    // 137 - Expression1OptGroup: CommonOperator;
    Production {
        lhs: 61,
        production: &[ParseType::N(46)],
    },
    // 138 - Expression1Opt: ;
    Production {
        lhs: 60,
        production: &[],
    },
    // 139 - Factor: Number;
    Production {
        lhs: 68,
        production: &[ParseType::N(166)],
    },
    // 140 - Factor: Identifier FactorList /* Vec */;
    Production {
        lhs: 68,
        production: &[ParseType::N(69), ParseType::N(90)],
    },
    // 141 - FactorList: Range FactorList;
    Production {
        lhs: 69,
        production: &[ParseType::N(69), ParseType::N(186)],
    },
    // 142 - FactorList: ;
    Production {
        lhs: 69,
        production: &[],
    },
    // 143 - Factor: LParen Expression RParen;
    Production {
        lhs: 68,
        production: &[ParseType::N(184), ParseType::N(58), ParseType::N(140)],
    },
    // 144 - Range: LBracket Expression RangeOpt /* Option */ RBracket;
    Production {
        lhs: 186,
        production: &[
            ParseType::N(182),
            ParseType::N(187),
            ParseType::N(58),
            ParseType::N(138),
        ],
    },
    // 145 - RangeOpt: Colon Expression;
    Production {
        lhs: 187,
        production: &[ParseType::N(58), ParseType::N(38)],
    },
    // 146 - RangeOpt: ;
    Production {
        lhs: 187,
        production: &[],
    },
    // 147 - Width: LBracket Expression RBracket;
    Production {
        lhs: 217,
        production: &[ParseType::N(182), ParseType::N(58), ParseType::N(138)],
    },
    // 148 - BuiltinType: Logic;
    Production {
        lhs: 37,
        production: &[ParseType::N(145)],
    },
    // 149 - BuiltinType: Bit;
    Production {
        lhs: 37,
        production: &[ParseType::N(35)],
    },
    // 150 - BuiltinType: U32;
    Production {
        lhs: 37,
        production: &[ParseType::N(208)],
    },
    // 151 - BuiltinType: U64;
    Production {
        lhs: 37,
        production: &[ParseType::N(210)],
    },
    // 152 - BuiltinType: I32;
    Production {
        lhs: 37,
        production: &[ParseType::N(86)],
    },
    // 153 - BuiltinType: I64;
    Production {
        lhs: 37,
        production: &[ParseType::N(88)],
    },
    // 154 - BuiltinType: F32;
    Production {
        lhs: 37,
        production: &[ParseType::N(64)],
    },
    // 155 - BuiltinType: F64;
    Production {
        lhs: 37,
        production: &[ParseType::N(66)],
    },
    // 156 - Type: TypeGroup TypeList /* Vec */;
    Production {
        lhs: 205,
        production: &[ParseType::N(207), ParseType::N(206)],
    },
    // 157 - TypeGroup: BuiltinType;
    Production {
        lhs: 206,
        production: &[ParseType::N(37)],
    },
    // 158 - TypeGroup: Identifier;
    Production {
        lhs: 206,
        production: &[ParseType::N(90)],
    },
    // 159 - TypeList: Width TypeList;
    Production {
        lhs: 207,
        production: &[ParseType::N(207), ParseType::N(217)],
    },
    // 160 - TypeList: ;
    Production {
        lhs: 207,
        production: &[],
    },
    // 161 - Statement: AssignmentStatement;
    Production {
        lhs: 198,
        production: &[ParseType::N(23)],
    },
    // 162 - Statement: IfStatement;
    Production {
        lhs: 198,
        production: &[ParseType::N(101)],
    },
    // 163 - Statement: IfResetStatement;
    Production {
        lhs: 198,
        production: &[ParseType::N(94)],
    },
    // 164 - Statement: ReturnStatement;
    Production {
        lhs: 198,
        production: &[ParseType::N(192)],
    },
    // 165 - Statement: ForStatement;
    Production {
        lhs: 198,
        production: &[ParseType::N(73)],
    },
    // 166 - AssignmentStatement: Identifier AssignmentStatementGroup Expression Semicolon;
    Production {
        lhs: 23,
        production: &[
            ParseType::N(194),
            ParseType::N(58),
            ParseType::N(24),
            ParseType::N(90),
        ],
    },
    // 167 - AssignmentStatementGroup: Equ;
    Production {
        lhs: 24,
        production: &[ParseType::N(54)],
    },
    // 168 - AssignmentStatementGroup: AssignmentOperator;
    Production {
        lhs: 24,
        production: &[ParseType::N(21)],
    },
    // 169 - IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
    Production {
        lhs: 101,
        production: &[
            ParseType::N(105),
            ParseType::N(103),
            ParseType::N(180),
            ParseType::N(102),
            ParseType::N(136),
            ParseType::N(58),
            ParseType::N(92),
        ],
    },
    // 170 - IfStatementList0: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
    Production {
        lhs: 103,
        production: &[
            ParseType::N(103),
            ParseType::N(180),
            ParseType::N(104),
            ParseType::N(136),
            ParseType::N(58),
            ParseType::N(92),
            ParseType::N(52),
        ],
    },
    // 171 - IfStatementList0List: Statement IfStatementList0List;
    Production {
        lhs: 104,
        production: &[ParseType::N(104), ParseType::N(198)],
    },
    // 172 - IfStatementList0List: ;
    Production {
        lhs: 104,
        production: &[],
    },
    // 173 - IfStatementList0: ;
    Production {
        lhs: 103,
        production: &[],
    },
    // 174 - IfStatementList: Statement IfStatementList;
    Production {
        lhs: 102,
        production: &[ParseType::N(102), ParseType::N(198)],
    },
    // 175 - IfStatementList: ;
    Production {
        lhs: 102,
        production: &[],
    },
    // 176 - IfStatementOpt: Else LBrace IfStatementOptList /* Vec */ RBrace;
    Production {
        lhs: 105,
        production: &[
            ParseType::N(180),
            ParseType::N(106),
            ParseType::N(136),
            ParseType::N(52),
        ],
    },
    // 177 - IfStatementOptList: Statement IfStatementOptList;
    Production {
        lhs: 106,
        production: &[ParseType::N(106), ParseType::N(198)],
    },
    // 178 - IfStatementOptList: ;
    Production {
        lhs: 106,
        production: &[],
    },
    // 179 - IfStatementOpt: ;
    Production {
        lhs: 105,
        production: &[],
    },
    // 180 - IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
    Production {
        lhs: 94,
        production: &[
            ParseType::N(98),
            ParseType::N(96),
            ParseType::N(180),
            ParseType::N(95),
            ParseType::N(136),
            ParseType::N(93),
        ],
    },
    // 181 - IfResetStatementList0: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
    Production {
        lhs: 96,
        production: &[
            ParseType::N(96),
            ParseType::N(180),
            ParseType::N(97),
            ParseType::N(136),
            ParseType::N(58),
            ParseType::N(92),
            ParseType::N(52),
        ],
    },
    // 182 - IfResetStatementList0List: Statement IfResetStatementList0List;
    Production {
        lhs: 97,
        production: &[ParseType::N(97), ParseType::N(198)],
    },
    // 183 - IfResetStatementList0List: ;
    Production {
        lhs: 97,
        production: &[],
    },
    // 184 - IfResetStatementList0: ;
    Production {
        lhs: 96,
        production: &[],
    },
    // 185 - IfResetStatementList: Statement IfResetStatementList;
    Production {
        lhs: 95,
        production: &[ParseType::N(95), ParseType::N(198)],
    },
    // 186 - IfResetStatementList: ;
    Production {
        lhs: 95,
        production: &[],
    },
    // 187 - IfResetStatementOpt: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
    Production {
        lhs: 98,
        production: &[
            ParseType::N(180),
            ParseType::N(99),
            ParseType::N(136),
            ParseType::N(52),
        ],
    },
    // 188 - IfResetStatementOptList: Statement IfResetStatementOptList;
    Production {
        lhs: 99,
        production: &[ParseType::N(99), ParseType::N(198)],
    },
    // 189 - IfResetStatementOptList: ;
    Production {
        lhs: 99,
        production: &[],
    },
    // 190 - IfResetStatementOpt: ;
    Production {
        lhs: 98,
        production: &[],
    },
    // 191 - ReturnStatement: Return Expression Semicolon;
    Production {
        lhs: 192,
        production: &[ParseType::N(194), ParseType::N(58), ParseType::N(191)],
    },
    // 192 - ForStatement: For Identifier Colon Type In Expression DotDot Expression ForStatementOpt /* Option */ LBrace ForStatementList /* Vec */ RBrace;
    Production {
        lhs: 73,
        production: &[
            ParseType::N(180),
            ParseType::N(74),
            ParseType::N(136),
            ParseType::N(75),
            ParseType::N(58),
            ParseType::N(50),
            ParseType::N(58),
            ParseType::N(108),
            ParseType::N(205),
            ParseType::N(38),
            ParseType::N(90),
            ParseType::N(72),
        ],
    },
    // 193 - ForStatementList: Statement ForStatementList;
    Production {
        lhs: 74,
        production: &[ParseType::N(74), ParseType::N(198)],
    },
    // 194 - ForStatementList: ;
    Production {
        lhs: 74,
        production: &[],
    },
    // 195 - ForStatementOpt: Step AssignmentOperator Expression;
    Production {
        lhs: 75,
        production: &[ParseType::N(58), ParseType::N(21), ParseType::N(199)],
    },
    // 196 - ForStatementOpt: ;
    Production {
        lhs: 75,
        production: &[],
    },
    // 197 - VariableDeclaration: Identifier Colon Type Semicolon;
    Production {
        lhs: 214,
        production: &[
            ParseType::N(194),
            ParseType::N(205),
            ParseType::N(38),
            ParseType::N(90),
        ],
    },
    // 198 - ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
    Production {
        lhs: 170,
        production: &[
            ParseType::N(194),
            ParseType::N(58),
            ParseType::N(54),
            ParseType::N(205),
            ParseType::N(38),
            ParseType::N(90),
            ParseType::N(169),
        ],
    },
    // 199 - LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
    Production {
        lhs: 143,
        production: &[
            ParseType::N(194),
            ParseType::N(58),
            ParseType::N(54),
            ParseType::N(205),
            ParseType::N(38),
            ParseType::N(90),
            ParseType::N(142),
        ],
    },
    // 200 - AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 10,
        production: &[
            ParseType::N(180),
            ParseType::N(11),
            ParseType::N(136),
            ParseType::N(184),
            ParseType::N(12),
            ParseType::N(7),
            ParseType::N(140),
            ParseType::N(6),
        ],
    },
    // 201 - AlwaysFfDeclarationList: Statement AlwaysFfDeclarationList;
    Production {
        lhs: 11,
        production: &[ParseType::N(11), ParseType::N(198)],
    },
    // 202 - AlwaysFfDeclarationList: ;
    Production {
        lhs: 11,
        production: &[],
    },
    // 203 - AlwaysFfDeclarationOpt: Comma AlwaysFfReset;
    Production {
        lhs: 12,
        production: &[ParseType::N(13), ParseType::N(42)],
    },
    // 204 - AlwaysFfDeclarationOpt: ;
    Production {
        lhs: 12,
        production: &[],
    },
    // 205 - AlwaysFfClock: AlwaysFfClockOpt /* Option */ Identifier;
    Production {
        lhs: 7,
        production: &[ParseType::N(90), ParseType::N(8)],
    },
    // 206 - AlwaysFfClockOpt: AlwaysFfClockOptGroup;
    Production {
        lhs: 8,
        production: &[ParseType::N(9)],
    },
    // 207 - AlwaysFfClockOptGroup: Posedge;
    Production {
        lhs: 9,
        production: &[ParseType::N(178)],
    },
    // 208 - AlwaysFfClockOptGroup: Negedge;
    Production {
        lhs: 9,
        production: &[ParseType::N(164)],
    },
    // 209 - AlwaysFfClockOpt: ;
    Production {
        lhs: 8,
        production: &[],
    },
    // 210 - AlwaysFfReset: AlwaysFfResetOpt /* Option */ Identifier;
    Production {
        lhs: 13,
        production: &[ParseType::N(90), ParseType::N(14)],
    },
    // 211 - AlwaysFfResetOpt: AlwaysFfResetOptGroup;
    Production {
        lhs: 14,
        production: &[ParseType::N(15)],
    },
    // 212 - AlwaysFfResetOptGroup: AsyncLow;
    Production {
        lhs: 15,
        production: &[ParseType::N(27)],
    },
    // 213 - AlwaysFfResetOptGroup: AsyncHigh;
    Production {
        lhs: 15,
        production: &[ParseType::N(25)],
    },
    // 214 - AlwaysFfResetOptGroup: SyncLow;
    Production {
        lhs: 15,
        production: &[ParseType::N(203)],
    },
    // 215 - AlwaysFfResetOptGroup: SyncHigh;
    Production {
        lhs: 15,
        production: &[ParseType::N(201)],
    },
    // 216 - AlwaysFfResetOpt: ;
    Production {
        lhs: 14,
        production: &[],
    },
    // 217 - AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 3,
        production: &[
            ParseType::N(180),
            ParseType::N(4),
            ParseType::N(136),
            ParseType::N(2),
        ],
    },
    // 218 - AlwaysCombDeclarationList: Statement AlwaysCombDeclarationList;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(198)],
    },
    // 219 - AlwaysCombDeclarationList: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 220 - AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
    Production {
        lhs: 18,
        production: &[
            ParseType::N(194),
            ParseType::N(58),
            ParseType::N(54),
            ParseType::N(19),
            ParseType::N(90),
            ParseType::N(17),
        ],
    },
    // 221 - AssignDeclarationOpt: Colon Type;
    Production {
        lhs: 19,
        production: &[ParseType::N(205), ParseType::N(38)],
    },
    // 222 - AssignDeclarationOpt: ;
    Production {
        lhs: 19,
        production: &[],
    },
    // 223 - ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
    Production {
        lhs: 150,
        production: &[
            ParseType::N(180),
            ParseType::N(152),
            ParseType::N(136),
            ParseType::N(90),
            ParseType::N(149),
        ],
    },
    // 224 - ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
    Production {
        lhs: 152,
        production: &[ParseType::N(154), ParseType::N(153), ParseType::N(151)],
    },
    // 225 - ModportListList: Comma ModportItem ModportListList;
    Production {
        lhs: 153,
        production: &[ParseType::N(153), ParseType::N(151), ParseType::N(42)],
    },
    // 226 - ModportListList: ;
    Production {
        lhs: 153,
        production: &[],
    },
    // 227 - ModportListOpt: Comma;
    Production {
        lhs: 154,
        production: &[ParseType::N(42)],
    },
    // 228 - ModportListOpt: ;
    Production {
        lhs: 154,
        production: &[],
    },
    // 229 - ModportItem: Identifier Colon Direction;
    Production {
        lhs: 151,
        production: &[ParseType::N(49), ParseType::N(38), ParseType::N(90)],
    },
    // 230 - Instantiation: Identifier ColonColonColon Identifier InstantiationOpt /* Option */ LBrace InstantiationOpt0 /* Option */ RBrace;
    Production {
        lhs: 126,
        production: &[
            ParseType::N(180),
            ParseType::N(128),
            ParseType::N(136),
            ParseType::N(127),
            ParseType::N(90),
            ParseType::N(39),
            ParseType::N(90),
        ],
    },
    // 231 - InstantiationOpt0: InstancePortList;
    Production {
        lhs: 128,
        production: &[ParseType::N(123)],
    },
    // 232 - InstantiationOpt0: ;
    Production {
        lhs: 128,
        production: &[],
    },
    // 233 - InstantiationOpt: InstanceParameter;
    Production {
        lhs: 127,
        production: &[ParseType::N(114)],
    },
    // 234 - InstantiationOpt: ;
    Production {
        lhs: 127,
        production: &[],
    },
    // 235 - InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
    Production {
        lhs: 114,
        production: &[
            ParseType::N(184),
            ParseType::N(120),
            ParseType::N(140),
            ParseType::N(84),
        ],
    },
    // 236 - InstanceParameterOpt: InstanceParameterList;
    Production {
        lhs: 120,
        production: &[ParseType::N(117)],
    },
    // 237 - InstanceParameterOpt: ;
    Production {
        lhs: 120,
        production: &[],
    },
    // 238 - InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
    Production {
        lhs: 117,
        production: &[ParseType::N(119), ParseType::N(118), ParseType::N(115)],
    },
    // 239 - InstanceParameterListList: Comma InstanceParameterItem InstanceParameterListList;
    Production {
        lhs: 118,
        production: &[ParseType::N(118), ParseType::N(115), ParseType::N(42)],
    },
    // 240 - InstanceParameterListList: ;
    Production {
        lhs: 118,
        production: &[],
    },
    // 241 - InstanceParameterListOpt: Comma;
    Production {
        lhs: 119,
        production: &[ParseType::N(42)],
    },
    // 242 - InstanceParameterListOpt: ;
    Production {
        lhs: 119,
        production: &[],
    },
    // 243 - InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
    Production {
        lhs: 115,
        production: &[ParseType::N(116), ParseType::N(90)],
    },
    // 244 - InstanceParameterItemOpt: Colon Expression;
    Production {
        lhs: 116,
        production: &[ParseType::N(58), ParseType::N(38)],
    },
    // 245 - InstanceParameterItemOpt: ;
    Production {
        lhs: 116,
        production: &[],
    },
    // 246 - InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
    Production {
        lhs: 123,
        production: &[ParseType::N(125), ParseType::N(124), ParseType::N(121)],
    },
    // 247 - InstancePortListList: Comma InstancePortItem InstancePortListList;
    Production {
        lhs: 124,
        production: &[ParseType::N(124), ParseType::N(121), ParseType::N(42)],
    },
    // 248 - InstancePortListList: ;
    Production {
        lhs: 124,
        production: &[],
    },
    // 249 - InstancePortListOpt: Comma;
    Production {
        lhs: 125,
        production: &[ParseType::N(42)],
    },
    // 250 - InstancePortListOpt: ;
    Production {
        lhs: 125,
        production: &[],
    },
    // 251 - InstancePortItem: Identifier InstancePortItemOpt /* Option */;
    Production {
        lhs: 121,
        production: &[ParseType::N(122), ParseType::N(90)],
    },
    // 252 - InstancePortItemOpt: Colon Expression;
    Production {
        lhs: 122,
        production: &[ParseType::N(58), ParseType::N(38)],
    },
    // 253 - InstancePortItemOpt: ;
    Production {
        lhs: 122,
        production: &[],
    },
    // 254 - WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
    Production {
        lhs: 218,
        production: &[
            ParseType::N(184),
            ParseType::N(224),
            ParseType::N(140),
            ParseType::N(84),
        ],
    },
    // 255 - WithParameterOpt: WithParameterList;
    Production {
        lhs: 224,
        production: &[ParseType::N(221)],
    },
    // 256 - WithParameterOpt: ;
    Production {
        lhs: 224,
        production: &[],
    },
    // 257 - WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
    Production {
        lhs: 221,
        production: &[ParseType::N(223), ParseType::N(222), ParseType::N(219)],
    },
    // 258 - WithParameterListList: Comma WithParameterItem WithParameterListList;
    Production {
        lhs: 222,
        production: &[ParseType::N(222), ParseType::N(219), ParseType::N(42)],
    },
    // 259 - WithParameterListList: ;
    Production {
        lhs: 222,
        production: &[],
    },
    // 260 - WithParameterListOpt: Comma;
    Production {
        lhs: 223,
        production: &[ParseType::N(42)],
    },
    // 261 - WithParameterListOpt: ;
    Production {
        lhs: 223,
        production: &[],
    },
    // 262 - WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
    Production {
        lhs: 219,
        production: &[
            ParseType::N(58),
            ParseType::N(54),
            ParseType::N(205),
            ParseType::N(38),
            ParseType::N(90),
            ParseType::N(220),
        ],
    },
    // 263 - WithParameterItemGroup: Parameter;
    Production {
        lhs: 220,
        production: &[ParseType::N(169)],
    },
    // 264 - WithParameterItemGroup: Localparam;
    Production {
        lhs: 220,
        production: &[ParseType::N(142)],
    },
    // 265 - PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
    Production {
        lhs: 172,
        production: &[ParseType::N(184), ParseType::N(177), ParseType::N(140)],
    },
    // 266 - PortDeclarationOpt: PortDeclarationList;
    Production {
        lhs: 177,
        production: &[ParseType::N(174)],
    },
    // 267 - PortDeclarationOpt: ;
    Production {
        lhs: 177,
        production: &[],
    },
    // 268 - PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
    Production {
        lhs: 174,
        production: &[ParseType::N(176), ParseType::N(175), ParseType::N(173)],
    },
    // 269 - PortDeclarationListList: Comma PortDeclarationItem PortDeclarationListList;
    Production {
        lhs: 175,
        production: &[ParseType::N(175), ParseType::N(173), ParseType::N(42)],
    },
    // 270 - PortDeclarationListList: ;
    Production {
        lhs: 175,
        production: &[],
    },
    // 271 - PortDeclarationListOpt: Comma;
    Production {
        lhs: 176,
        production: &[ParseType::N(42)],
    },
    // 272 - PortDeclarationListOpt: ;
    Production {
        lhs: 176,
        production: &[],
    },
    // 273 - PortDeclarationItem: Identifier Colon Direction Type;
    Production {
        lhs: 173,
        production: &[
            ParseType::N(205),
            ParseType::N(49),
            ParseType::N(38),
            ParseType::N(90),
        ],
    },
    // 274 - Direction: Input;
    Production {
        lhs: 49,
        production: &[ParseType::N(112)],
    },
    // 275 - Direction: Output;
    Production {
        lhs: 49,
        production: &[ParseType::N(167)],
    },
    // 276 - Direction: Inout;
    Production {
        lhs: 49,
        production: &[ParseType::N(110)],
    },
    // 277 - Direction: Ref;
    Production {
        lhs: 49,
        production: &[ParseType::N(189)],
    },
    // 278 - FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 78,
        production: &[
            ParseType::N(180),
            ParseType::N(79),
            ParseType::N(136),
            ParseType::N(205),
            ParseType::N(147),
            ParseType::N(81),
            ParseType::N(80),
            ParseType::N(90),
            ParseType::N(77),
        ],
    },
    // 279 - FunctionDeclarationList: FunctionItem FunctionDeclarationList;
    Production {
        lhs: 79,
        production: &[ParseType::N(79), ParseType::N(82)],
    },
    // 280 - FunctionDeclarationList: ;
    Production {
        lhs: 79,
        production: &[],
    },
    // 281 - FunctionDeclarationOpt0: PortDeclaration;
    Production {
        lhs: 81,
        production: &[ParseType::N(172)],
    },
    // 282 - FunctionDeclarationOpt0: ;
    Production {
        lhs: 81,
        production: &[],
    },
    // 283 - FunctionDeclarationOpt: WithParameter;
    Production {
        lhs: 80,
        production: &[ParseType::N(218)],
    },
    // 284 - FunctionDeclarationOpt: ;
    Production {
        lhs: 80,
        production: &[],
    },
    // 285 - FunctionItem: VariableDeclaration;
    Production {
        lhs: 82,
        production: &[ParseType::N(214)],
    },
    // 286 - FunctionItem: Statement;
    Production {
        lhs: 82,
        production: &[ParseType::N(198)],
    },
    // 287 - ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 157,
        production: &[
            ParseType::N(180),
            ParseType::N(158),
            ParseType::N(136),
            ParseType::N(160),
            ParseType::N(159),
            ParseType::N(90),
            ParseType::N(156),
        ],
    },
    // 288 - ModuleDeclarationList: ModuleItem ModuleDeclarationList;
    Production {
        lhs: 158,
        production: &[ParseType::N(158), ParseType::N(161)],
    },
    // 289 - ModuleDeclarationList: ;
    Production {
        lhs: 158,
        production: &[],
    },
    // 290 - ModuleDeclarationOpt0: PortDeclaration;
    Production {
        lhs: 160,
        production: &[ParseType::N(172)],
    },
    // 291 - ModuleDeclarationOpt0: ;
    Production {
        lhs: 160,
        production: &[],
    },
    // 292 - ModuleDeclarationOpt: WithParameter;
    Production {
        lhs: 159,
        production: &[ParseType::N(218)],
    },
    // 293 - ModuleDeclarationOpt: ;
    Production {
        lhs: 159,
        production: &[],
    },
    // 294 - ModuleItem: VariableDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(214)],
    },
    // 295 - ModuleItem: ParameterDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(170)],
    },
    // 296 - ModuleItem: LocalparamDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(143)],
    },
    // 297 - ModuleItem: AlwaysFfDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(10)],
    },
    // 298 - ModuleItem: AlwaysCombDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(3)],
    },
    // 299 - ModuleItem: AssignDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(18)],
    },
    // 300 - ModuleItem: Instantiation;
    Production {
        lhs: 161,
        production: &[ParseType::N(126)],
    },
    // 301 - ModuleItem: FunctionDeclaration;
    Production {
        lhs: 161,
        production: &[ParseType::N(78)],
    },
    // 302 - InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
    Production {
        lhs: 131,
        production: &[
            ParseType::N(180),
            ParseType::N(132),
            ParseType::N(136),
            ParseType::N(133),
            ParseType::N(90),
            ParseType::N(130),
        ],
    },
    // 303 - InterfaceDeclarationList: InterfaceItem InterfaceDeclarationList;
    Production {
        lhs: 132,
        production: &[ParseType::N(132), ParseType::N(134)],
    },
    // 304 - InterfaceDeclarationList: ;
    Production {
        lhs: 132,
        production: &[],
    },
    // 305 - InterfaceDeclarationOpt: WithParameter;
    Production {
        lhs: 133,
        production: &[ParseType::N(218)],
    },
    // 306 - InterfaceDeclarationOpt: ;
    Production {
        lhs: 133,
        production: &[],
    },
    // 307 - InterfaceItem: VariableDeclaration;
    Production {
        lhs: 134,
        production: &[ParseType::N(214)],
    },
    // 308 - InterfaceItem: ParameterDeclaration;
    Production {
        lhs: 134,
        production: &[ParseType::N(170)],
    },
    // 309 - InterfaceItem: LocalparamDeclaration;
    Production {
        lhs: 134,
        production: &[ParseType::N(143)],
    },
    // 310 - InterfaceItem: ModportDeclaration;
    Production {
        lhs: 134,
        production: &[ParseType::N(150)],
    },
    // 311 - Description: ModuleDeclaration;
    Production {
        lhs: 48,
        production: &[ParseType::N(157)],
    },
    // 312 - Description: InterfaceDeclaration;
    Production {
        lhs: 48,
        production: &[ParseType::N(131)],
    },
    // 313 - Veryl: Start VerylList /* Vec */;
    Production {
        lhs: 215,
        production: &[ParseType::N(216), ParseType::N(196)],
    },
    // 314 - VerylList: Description VerylList;
    Production {
        lhs: 216,
        production: &[ParseType::N(216), ParseType::N(48)],
    },
    // 315 - VerylList: ;
    Production {
        lhs: 216,
        production: &[],
    },
];

parol_runtime::lazy_static::lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![
        ("INITIAL", Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()),

    ];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut VerylGrammar,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        215,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = VerylGrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
