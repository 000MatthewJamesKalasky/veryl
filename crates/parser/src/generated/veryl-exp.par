%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type OwnedToken = crate::veryl_token::OwnedToken
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : OwnedToken;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ Start: StartToken : VerylToken;
/*   6 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   7 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   8 */ BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : OwnedToken Comments;
/*   9 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*  10 */ AllBitToken: /'[01]/ : OwnedToken Comments;
/*  11 */ Exponent: ExponentToken : VerylToken;
/*  12 */ FixedPoint: FixedPointToken : VerylToken;
/*  13 */ Based: BasedToken : VerylToken;
/*  14 */ BaseLess: BaseLessToken : VerylToken;
/*  15 */ AllBit: AllBitToken : VerylToken;
/*  16 */ BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" : OwnedToken Comments;
/*  17 */ CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" : OwnedToken Comments;
/*  18 */ UnaryOperatorToken: "!|~" : OwnedToken Comments;
/*  19 */ CommonOperator: CommonOperatorToken : VerylToken;
/*  20 */ BinaryOperator: BinaryOperatorToken : VerylToken;
/*  21 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  22 */ ColonColonToken: '::' : OwnedToken Comments;
/*  23 */ ColonToken: ':' : OwnedToken Comments;
/*  24 */ CommaToken: ',' : OwnedToken Comments;
/*  25 */ EquToken: '=' : OwnedToken Comments;
/*  26 */ HashToken: '#' : OwnedToken Comments;
/*  27 */ LBraceToken: '{' : OwnedToken Comments;
/*  28 */ LBracketToken: '[' : OwnedToken Comments;
/*  29 */ LParenToken: '(' : OwnedToken Comments;
/*  30 */ RBraceToken: '}' : OwnedToken Comments;
/*  31 */ RBracketToken: ']' : OwnedToken Comments;
/*  32 */ RParenToken: ')' : OwnedToken Comments;
/*  33 */ SemicolonToken: ';' : OwnedToken Comments;
/*  34 */ ColonColon: ColonColonToken : VerylToken;
/*  35 */ Colon: ColonToken : VerylToken;
/*  36 */ Comma: CommaToken : VerylToken;
/*  37 */ Equ: EquToken : VerylToken;
/*  38 */ Hash: HashToken : VerylToken;
/*  39 */ LBrace: LBraceToken : VerylToken;
/*  40 */ LBracket: LBracketToken : VerylToken;
/*  41 */ LParen: LParenToken : VerylToken;
/*  42 */ RBrace: RBraceToken : VerylToken;
/*  43 */ RBracket: RBracketToken : VerylToken;
/*  44 */ RParen: RParenToken : VerylToken;
/*  45 */ Semicolon: SemicolonToken : VerylToken;
/*  46 */ AlwaysCombToken: 'always_comb' : OwnedToken Comments;
/*  47 */ AlwaysFfToken: 'always_ff' : OwnedToken Comments;
/*  48 */ AssignToken: 'assign' : OwnedToken Comments;
/*  49 */ AsyncHighToken: 'async_high' : OwnedToken Comments;
/*  50 */ AsyncLowToken: 'async_low' : OwnedToken Comments;
/*  51 */ BitToken: 'bit' : OwnedToken Comments;
/*  52 */ ElseToken: 'else' : OwnedToken Comments;
/*  53 */ F32Token: 'f32' : OwnedToken Comments;
/*  54 */ F64Token: 'f64' : OwnedToken Comments;
/*  55 */ I32Token: 'i32' : OwnedToken Comments;
/*  56 */ I64Token: 'i64' : OwnedToken Comments;
/*  57 */ IfResetToken: 'if_reset' : OwnedToken Comments;
/*  58 */ IfToken: 'if' : OwnedToken Comments;
/*  59 */ InoutToken: 'inout' : OwnedToken Comments;
/*  60 */ InputToken: 'input' : OwnedToken Comments;
/*  61 */ InterfaceToken: 'interface' : OwnedToken Comments;
/*  62 */ LocalparamToken: 'localparam' : OwnedToken Comments;
/*  63 */ LogicToken: 'logic' : OwnedToken Comments;
/*  64 */ ModportToken: 'modport' : OwnedToken Comments;
/*  65 */ ModuleToken: 'module' : OwnedToken Comments;
/*  66 */ NegedgeToken: 'negedge' : OwnedToken Comments;
/*  67 */ OutputToken: 'output' : OwnedToken Comments;
/*  68 */ ParameterToken: 'parameter' : OwnedToken Comments;
/*  69 */ PosedgeToken: 'posedge' : OwnedToken Comments;
/*  70 */ SyncHighToken: 'sync_high' : OwnedToken Comments;
/*  71 */ SyncLowToken: 'sync_low' : OwnedToken Comments;
/*  72 */ U32Token: 'u32' : OwnedToken Comments;
/*  73 */ U64Token: 'u64' : OwnedToken Comments;
/*  74 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  75 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  76 */ Assign: AssignToken : VerylToken;
/*  77 */ AsyncHigh: AsyncHighToken : VerylToken;
/*  78 */ AsyncLow: AsyncLowToken : VerylToken;
/*  79 */ Bit: BitToken : VerylToken;
/*  80 */ Else: ElseToken : VerylToken;
/*  81 */ F32: F32Token : VerylToken;
/*  82 */ F64: F64Token : VerylToken;
/*  83 */ I32: I32Token : VerylToken;
/*  84 */ I64: I64Token : VerylToken;
/*  85 */ IfReset: IfResetToken : VerylToken;
/*  86 */ If: IfToken : VerylToken;
/*  87 */ Inout: InoutToken : VerylToken;
/*  88 */ Input: InputToken : VerylToken;
/*  89 */ Interface: InterfaceToken : VerylToken;
/*  90 */ Localparam: LocalparamToken : VerylToken;
/*  91 */ Logic: LogicToken : VerylToken;
/*  92 */ Modport: ModportToken : VerylToken;
/*  93 */ Module: ModuleToken : VerylToken;
/*  94 */ Negedge: NegedgeToken : VerylToken;
/*  95 */ Output: OutputToken : VerylToken;
/*  96 */ Parameter: ParameterToken : VerylToken;
/*  97 */ Posedge: PosedgeToken : VerylToken;
/*  98 */ SyncHigh: SyncHighToken : VerylToken;
/*  99 */ SyncLow: SyncLowToken : VerylToken;
/* 100 */ U32: U32Token : VerylToken;
/* 101 */ U64: U64Token : VerylToken;
/* 102 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : OwnedToken Comments;
/* 103 */ Identifier: IdentifierToken : VerylToken;
/* 104 */ Number: IntegralNumber;
/* 105 */ Number: RealNumber;
/* 106 */ IntegralNumber: Based;
/* 107 */ IntegralNumber: BaseLess;
/* 108 */ IntegralNumber: AllBit;
/* 109 */ RealNumber: FixedPoint;
/* 110 */ RealNumber: Exponent;
/* 111 */ Expression: Expression1 ExpressionList /* Vec */;
/* 112 */ ExpressionList /* Vec<T>::Push */: ExpressionListGroup Expression1 ExpressionList;
/* 113 */ ExpressionListGroup: BinaryOperator;
/* 114 */ ExpressionListGroup: CommonOperator;
/* 115 */ ExpressionList /* Vec<T>::New */: ;
/* 116 */ Expression1: Expression1Opt /* Option */ Factor;
/* 117 */ Expression1Opt /* Option<T>::Some */: Expression1OptGroup;
/* 118 */ Expression1OptGroup: UnaryOperator;
/* 119 */ Expression1OptGroup: CommonOperator;
/* 120 */ Expression1Opt /* Option<T>::None */: ;
/* 121 */ Factor: Number;
/* 122 */ Factor: Identifier FactorList /* Vec */;
/* 123 */ FactorList /* Vec<T>::Push */: Range FactorList;
/* 124 */ FactorList /* Vec<T>::New */: ;
/* 125 */ Factor: LParen Expression RParen;
/* 126 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 127 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/* 128 */ RangeOpt /* Option<T>::None */: ;
/* 129 */ Width: LBracket Expression RBracket;
/* 130 */ BuiltinType: Logic;
/* 131 */ BuiltinType: Bit;
/* 132 */ BuiltinType: U32;
/* 133 */ BuiltinType: U64;
/* 134 */ BuiltinType: I32;
/* 135 */ BuiltinType: I64;
/* 136 */ BuiltinType: F32;
/* 137 */ BuiltinType: F64;
/* 138 */ Type: TypeGroup TypeList /* Vec */;
/* 139 */ TypeGroup: BuiltinType;
/* 140 */ TypeGroup: Identifier;
/* 141 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 142 */ TypeList /* Vec<T>::New */: ;
/* 143 */ Statement: AssignmentStatement;
/* 144 */ Statement: IfStatement;
/* 145 */ Statement: IfResetStatement;
/* 146 */ AssignmentStatement: Identifier Equ Expression Semicolon;
/* 147 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/* 148 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/* 149 */ IfStatementList /* Vec<T>::New */: ;
/* 150 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/* 151 */ IfStatementOpt /* Option<T>::None */: ;
/* 152 */ IfResetStatement: IfReset LBrace Statement RBrace IfResetStatementList /* Vec */ IfResetStatementOpt /* Option */;
/* 153 */ IfResetStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfResetStatementList;
/* 154 */ IfResetStatementList /* Vec<T>::New */: ;
/* 155 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/* 156 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 157 */ VariableDeclaration: Identifier Colon Type Semicolon;
/* 158 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 159 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 160 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 161 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 162 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 163 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 164 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 165 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ Identifier;
/* 166 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 167 */ AlwaysFfClockOptGroup: Posedge;
/* 168 */ AlwaysFfClockOptGroup: Negedge;
/* 169 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 170 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ Identifier;
/* 171 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 172 */ AlwaysFfResetOptGroup: AsyncLow;
/* 173 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 174 */ AlwaysFfResetOptGroup: SyncLow;
/* 175 */ AlwaysFfResetOptGroup: SyncHigh;
/* 176 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 177 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 178 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 179 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 180 */ AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
/* 181 */ AssignDeclarationOpt /* Option<T>::Some */: Colon Type;
/* 182 */ AssignDeclarationOpt /* Option<T>::None */: ;
/* 183 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 184 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 185 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 186 */ ModportListList /* Vec<T>::New */: ;
/* 187 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 188 */ ModportListOpt /* Option<T>::None */: ;
/* 189 */ ModportItem: Identifier Colon Direction;
/* 190 */ Instantiation: Identifier ColonColon Identifier InstantiationOpt /* Option */ LBrace InstantiationOpt0 /* Option */ RBrace;
/* 191 */ InstantiationOpt0 /* Option<T>::Some */: InstancePortList;
/* 192 */ InstantiationOpt0 /* Option<T>::None */: ;
/* 193 */ InstantiationOpt /* Option<T>::Some */: InstanceParameter;
/* 194 */ InstantiationOpt /* Option<T>::None */: ;
/* 195 */ InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
/* 196 */ InstanceParameterOpt /* Option<T>::Some */: InstanceParameterList;
/* 197 */ InstanceParameterOpt /* Option<T>::None */: ;
/* 198 */ InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
/* 199 */ InstanceParameterListList /* Vec<T>::Push */: Comma InstanceParameterItem InstanceParameterListList;
/* 200 */ InstanceParameterListList /* Vec<T>::New */: ;
/* 201 */ InstanceParameterListOpt /* Option<T>::Some */: Comma;
/* 202 */ InstanceParameterListOpt /* Option<T>::None */: ;
/* 203 */ InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
/* 204 */ InstanceParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 205 */ InstanceParameterItemOpt /* Option<T>::None */: ;
/* 206 */ InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
/* 207 */ InstancePortListList /* Vec<T>::Push */: Comma InstancePortItem InstancePortListList;
/* 208 */ InstancePortListList /* Vec<T>::New */: ;
/* 209 */ InstancePortListOpt /* Option<T>::Some */: Comma;
/* 210 */ InstancePortListOpt /* Option<T>::None */: ;
/* 211 */ InstancePortItem: Identifier InstancePortItemOpt /* Option */;
/* 212 */ InstancePortItemOpt /* Option<T>::Some */: Colon Expression;
/* 213 */ InstancePortItemOpt /* Option<T>::None */: ;
/* 214 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 215 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 216 */ WithParameterOpt /* Option<T>::None */: ;
/* 217 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 218 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 219 */ WithParameterListList /* Vec<T>::New */: ;
/* 220 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 221 */ WithParameterListOpt /* Option<T>::None */: ;
/* 222 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 223 */ WithParameterItemGroup: Parameter;
/* 224 */ WithParameterItemGroup: Localparam;
/* 225 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 226 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 227 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 228 */ PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 229 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationItem PortDeclarationListList;
/* 230 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 231 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 232 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 233 */ PortDeclarationItem: Identifier Colon Direction Type;
/* 234 */ Direction: Input;
/* 235 */ Direction: Output;
/* 236 */ Direction: Inout;
/* 237 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 238 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 239 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 240 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 241 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 242 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 243 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 244 */ ModuleItem: VariableDeclaration;
/* 245 */ ModuleItem: ParameterDeclaration;
/* 246 */ ModuleItem: LocalparamDeclaration;
/* 247 */ ModuleItem: AlwaysFfDeclaration;
/* 248 */ ModuleItem: AlwaysCombDeclaration;
/* 249 */ ModuleItem: AssignDeclaration;
/* 250 */ ModuleItem: Instantiation;
/* 251 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 252 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 253 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 254 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 255 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 256 */ InterfaceItem: VariableDeclaration;
/* 257 */ InterfaceItem: ParameterDeclaration;
/* 258 */ InterfaceItem: LocalparamDeclaration;
/* 259 */ InterfaceItem: ModportDeclaration;
/* 260 */ Description: ModuleDeclaration;
/* 261 */ Description: InterfaceDeclaration;
/* 262 */ Veryl: Start VerylList /* Vec */;
/* 263 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 264 */ VerylList /* Vec<T>::New */: ;
