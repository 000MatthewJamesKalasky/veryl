%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : Token;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token Comments;
/*   6 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token Comments;
/*   7 */ BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token Comments;
/*   8 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : Token Comments;
/*   9 */ AllBitToken: /'[01]/ : Token Comments;
/*  10 */ MinusColonToken: '-:' : Token Comments;
/*  11 */ MinusGTToken: '->' : Token Comments;
/*  12 */ PlusColonToken: '+:' : Token Comments;
/*  13 */ AssignmentOperatorToken: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token Comments;
/*  14 */ BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" : Token Comments;
/*  15 */ CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" : Token Comments;
/*  16 */ UnaryOperatorToken: "!|~" : Token Comments;
/*  17 */ ColonToken: ':' : Token Comments;
/*  18 */ CommaToken: ',' : Token Comments;
/*  19 */ DollarToken: '$' : Token Comments;
/*  20 */ DotDotToken: '..' : Token Comments;
/*  21 */ DotToken: '.' : Token Comments;
/*  22 */ EquToken: '=' : Token Comments;
/*  23 */ HashToken: '#' : Token Comments;
/*  24 */ LBraceToken: '{' : Token Comments;
/*  25 */ LBracketToken: '[' : Token Comments;
/*  26 */ LParenToken: '(' : Token Comments;
/*  27 */ RBraceToken: '}' : Token Comments;
/*  28 */ RBracketToken: ']' : Token Comments;
/*  29 */ RParenToken: ')' : Token Comments;
/*  30 */ SemicolonToken: ';' : Token Comments;
/*  31 */ AlwaysCombToken: /\balways_comb\b/ : Token Comments;
/*  32 */ AlwaysFfToken: /\balways_ff\b/ : Token Comments;
/*  33 */ AssignToken: /\bassign\b/ : Token Comments;
/*  34 */ AsyncHighToken: /\basync_high\b/ : Token Comments;
/*  35 */ AsyncLowToken: /\basync_low\b/ : Token Comments;
/*  36 */ BitToken: /\bbit\b/ : Token Comments;
/*  37 */ ElseToken: /\belse\b/ : Token Comments;
/*  38 */ EnumToken: /\benum\b/ : Token Comments;
/*  39 */ F32Token: /\bf32\b/ : Token Comments;
/*  40 */ F64Token: /\bf64\b/ : Token Comments;
/*  41 */ ForToken: /\bfor\b/ : Token Comments;
/*  42 */ FunctionToken: /\bfunction\b/ : Token Comments;
/*  43 */ I32Token: /\bi32\b/ : Token Comments;
/*  44 */ I64Token: /\bi64\b/ : Token Comments;
/*  45 */ IfResetToken: /\bif_reset\b/ : Token Comments;
/*  46 */ IfToken: /\bif\b/ : Token Comments;
/*  47 */ InoutToken: /\binout\b/ : Token Comments;
/*  48 */ InputToken: /\binput\b/ : Token Comments;
/*  49 */ InstToken: /\binst\b/ : Token Comments;
/*  50 */ InterfaceToken: /\binterface\b/ : Token Comments;
/*  51 */ InToken: /\bin\b/ : Token Comments;
/*  52 */ LetToken: /\blet\b/ : Token Comments;
/*  53 */ LocalparamToken: /\blocalparam\b/ : Token Comments;
/*  54 */ LogicToken: /\blogic\b/ : Token Comments;
/*  55 */ ModportToken: /\bmodport\b/ : Token Comments;
/*  56 */ ModuleToken: /\bmodule\b/ : Token Comments;
/*  57 */ NegedgeToken: /\bnegedge\b/ : Token Comments;
/*  58 */ OutputToken: /\boutput\b/ : Token Comments;
/*  59 */ ParameterToken: /\bparameter\b/ : Token Comments;
/*  60 */ PosedgeToken: /\bposedge\b/ : Token Comments;
/*  61 */ RefToken: /\bref\b/ : Token Comments;
/*  62 */ ReturnToken: /\breturn\b/ : Token Comments;
/*  63 */ StepToken: /\bstep\b/ : Token Comments;
/*  64 */ StructToken: /\bstruct\b/ : Token Comments;
/*  65 */ SyncHighToken: /\bsync_high\b/ : Token Comments;
/*  66 */ SyncLowToken: /\bsync_low\b/ : Token Comments;
/*  67 */ U32Token: /\bu32\b/ : Token Comments;
/*  68 */ U64Token: /\bu64\b/ : Token Comments;
/*  69 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : Token Comments;
/*  70 */ Start: StartToken : VerylToken;
/*  71 */ Exponent: ExponentToken : VerylToken;
/*  72 */ FixedPoint: FixedPointToken : VerylToken;
/*  73 */ Based: BasedToken : VerylToken;
/*  74 */ BaseLess: BaseLessToken : VerylToken;
/*  75 */ AllBit: AllBitToken : VerylToken;
/*  76 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/*  77 */ CommonOperator: CommonOperatorToken : VerylToken;
/*  78 */ BinaryOperator: BinaryOperatorToken : VerylToken;
/*  79 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  80 */ Colon: ColonToken : VerylToken;
/*  81 */ Comma: CommaToken : VerylToken;
/*  82 */ Dollar: DollarToken : VerylToken;
/*  83 */ DotDot: DotDotToken : VerylToken;
/*  84 */ Dot: DotToken : VerylToken;
/*  85 */ Equ: EquToken : VerylToken;
/*  86 */ Hash: HashToken : VerylToken;
/*  87 */ LBrace: LBraceToken : VerylToken;
/*  88 */ LBracket: LBracketToken : VerylToken;
/*  89 */ LParen: LParenToken : VerylToken;
/*  90 */ MinusColon: MinusColonToken : VerylToken;
/*  91 */ MinusGT: MinusGTToken : VerylToken;
/*  92 */ PlusColon: PlusColonToken : VerylToken;
/*  93 */ RBrace: RBraceToken : VerylToken;
/*  94 */ RBracket: RBracketToken : VerylToken;
/*  95 */ RParen: RParenToken : VerylToken;
/*  96 */ Semicolon: SemicolonToken : VerylToken;
/*  97 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  98 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  99 */ Assign: AssignToken : VerylToken;
/* 100 */ AsyncHigh: AsyncHighToken : VerylToken;
/* 101 */ AsyncLow: AsyncLowToken : VerylToken;
/* 102 */ Bit: BitToken : VerylToken;
/* 103 */ Else: ElseToken : VerylToken;
/* 104 */ Enum: EnumToken : VerylToken;
/* 105 */ F32: F32Token : VerylToken;
/* 106 */ F64: F64Token : VerylToken;
/* 107 */ For: ForToken : VerylToken;
/* 108 */ Function: FunctionToken : VerylToken;
/* 109 */ I32: I32Token : VerylToken;
/* 110 */ I64: I64Token : VerylToken;
/* 111 */ If: IfToken : VerylToken;
/* 112 */ IfReset: IfResetToken : VerylToken;
/* 113 */ In: InToken : VerylToken;
/* 114 */ Inout: InoutToken : VerylToken;
/* 115 */ Input: InputToken : VerylToken;
/* 116 */ Inst: InstToken : VerylToken;
/* 117 */ Interface: InterfaceToken : VerylToken;
/* 118 */ Let: LetToken : VerylToken;
/* 119 */ Localparam: LocalparamToken : VerylToken;
/* 120 */ Logic: LogicToken : VerylToken;
/* 121 */ Modport: ModportToken : VerylToken;
/* 122 */ Module: ModuleToken : VerylToken;
/* 123 */ Negedge: NegedgeToken : VerylToken;
/* 124 */ Output: OutputToken : VerylToken;
/* 125 */ Parameter: ParameterToken : VerylToken;
/* 126 */ Posedge: PosedgeToken : VerylToken;
/* 127 */ Ref: RefToken : VerylToken;
/* 128 */ Return: ReturnToken : VerylToken;
/* 129 */ Step: StepToken : VerylToken;
/* 130 */ Struct: StructToken : VerylToken;
/* 131 */ SyncHigh: SyncHighToken : VerylToken;
/* 132 */ SyncLow: SyncLowToken : VerylToken;
/* 133 */ U32: U32Token : VerylToken;
/* 134 */ U64: U64Token : VerylToken;
/* 135 */ Identifier: IdentifierToken : VerylToken;
/* 136 */ Number: IntegralNumber;
/* 137 */ Number: RealNumber;
/* 138 */ IntegralNumber: Based;
/* 139 */ IntegralNumber: BaseLess;
/* 140 */ IntegralNumber: AllBit;
/* 141 */ RealNumber: FixedPoint;
/* 142 */ RealNumber: Exponent;
/* 143 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/* 144 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/* 145 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Range HierarchicalIdentifierList0List;
/* 146 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/* 147 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/* 148 */ HierarchicalIdentifierList /* Vec<T>::Push */: Range HierarchicalIdentifierList;
/* 149 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/* 150 */ Expression: Expression1 ExpressionList /* Vec */;
/* 151 */ ExpressionList /* Vec<T>::Push */: ExpressionListGroup Expression1 ExpressionList;
/* 152 */ ExpressionListGroup: BinaryOperator;
/* 153 */ ExpressionListGroup: CommonOperator;
/* 154 */ ExpressionList /* Vec<T>::New */: ;
/* 155 */ Expression1: Expression1Opt /* Option */ Factor;
/* 156 */ Expression1Opt /* Option<T>::Some */: Expression1OptGroup;
/* 157 */ Expression1OptGroup: UnaryOperator;
/* 158 */ Expression1OptGroup: CommonOperator;
/* 159 */ Expression1Opt /* Option<T>::None */: ;
/* 160 */ Factor: Number;
/* 161 */ Factor: FactorOpt /* Option */ HierarchicalIdentifier FactorOpt0 /* Option */;
/* 162 */ Factor: LParen Expression RParen;
/* 163 */ FactorOpt0 /* Option<T>::Some */: LParen FactorOpt1 /* Option */ RParen;
/* 164 */ FactorOpt1 /* Option<T>::Some */: FunctionCallArg;
/* 165 */ FactorOpt1 /* Option<T>::None */: ;
/* 166 */ FactorOpt0 /* Option<T>::None */: ;
/* 167 */ FactorOpt /* Option<T>::Some */: Dollar;
/* 168 */ FactorOpt /* Option<T>::None */: ;
/* 169 */ FunctionCallArg: Expression FunctionCallArgList /* Vec */ FunctionCallArgOpt /* Option */;
/* 170 */ FunctionCallArgList /* Vec<T>::Push */: Comma Expression FunctionCallArgList;
/* 171 */ FunctionCallArgList /* Vec<T>::New */: ;
/* 172 */ FunctionCallArgOpt /* Option<T>::Some */: Comma;
/* 173 */ FunctionCallArgOpt /* Option<T>::None */: ;
/* 174 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 175 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/* 176 */ RangeOpt /* Option<T>::None */: ;
/* 177 */ RangeOperator: Colon;
/* 178 */ RangeOperator: PlusColon;
/* 179 */ RangeOperator: MinusColon;
/* 180 */ RangeOperator: Step;
/* 181 */ Width: LBracket Expression RBracket;
/* 182 */ BuiltinType: Logic;
/* 183 */ BuiltinType: Bit;
/* 184 */ BuiltinType: U32;
/* 185 */ BuiltinType: U64;
/* 186 */ BuiltinType: I32;
/* 187 */ BuiltinType: I64;
/* 188 */ BuiltinType: F32;
/* 189 */ BuiltinType: F64;
/* 190 */ Type: TypeGroup TypeList /* Vec */;
/* 191 */ TypeGroup: BuiltinType;
/* 192 */ TypeGroup: Identifier;
/* 193 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 194 */ TypeList /* Vec<T>::New */: ;
/* 195 */ Statement: AssignmentStatement;
/* 196 */ Statement: IfStatement;
/* 197 */ Statement: IfResetStatement;
/* 198 */ Statement: ReturnStatement;
/* 199 */ Statement: ForStatement;
/* 200 */ AssignmentStatement: HierarchicalIdentifier AssignmentStatementGroup Expression Semicolon;
/* 201 */ AssignmentStatementGroup: Equ;
/* 202 */ AssignmentStatementGroup: AssignmentOperator;
/* 203 */ IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
/* 204 */ IfStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
/* 205 */ IfStatementList0List /* Vec<T>::Push */: Statement IfStatementList0List;
/* 206 */ IfStatementList0List /* Vec<T>::New */: ;
/* 207 */ IfStatementList0 /* Vec<T>::New */: ;
/* 208 */ IfStatementList /* Vec<T>::Push */: Statement IfStatementList;
/* 209 */ IfStatementList /* Vec<T>::New */: ;
/* 210 */ IfStatementOpt /* Option<T>::Some */: Else LBrace IfStatementOptList /* Vec */ RBrace;
/* 211 */ IfStatementOptList /* Vec<T>::Push */: Statement IfStatementOptList;
/* 212 */ IfStatementOptList /* Vec<T>::New */: ;
/* 213 */ IfStatementOpt /* Option<T>::None */: ;
/* 214 */ IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
/* 215 */ IfResetStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
/* 216 */ IfResetStatementList0List /* Vec<T>::Push */: Statement IfResetStatementList0List;
/* 217 */ IfResetStatementList0List /* Vec<T>::New */: ;
/* 218 */ IfResetStatementList0 /* Vec<T>::New */: ;
/* 219 */ IfResetStatementList /* Vec<T>::Push */: Statement IfResetStatementList;
/* 220 */ IfResetStatementList /* Vec<T>::New */: ;
/* 221 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
/* 222 */ IfResetStatementOptList /* Vec<T>::Push */: Statement IfResetStatementOptList;
/* 223 */ IfResetStatementOptList /* Vec<T>::New */: ;
/* 224 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 225 */ ReturnStatement: Return Expression Semicolon;
/* 226 */ ForStatement: For Identifier Colon Type In Expression DotDot Expression ForStatementOpt /* Option */ LBrace ForStatementList /* Vec */ RBrace;
/* 227 */ ForStatementList /* Vec<T>::Push */: Statement ForStatementList;
/* 228 */ ForStatementList /* Vec<T>::New */: ;
/* 229 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 230 */ ForStatementOpt /* Option<T>::None */: ;
/* 231 */ LetDeclaration: Let Identifier Colon LetDeclarationGroup Semicolon;
/* 232 */ LetDeclarationGroup: VariableDeclaration;
/* 233 */ LetDeclarationGroup: InstanceDeclaration;
/* 234 */ VariableDeclaration: Type VariableDeclarationOpt /* Option */;
/* 235 */ VariableDeclarationOpt /* Option<T>::Some */: Equ Expression;
/* 236 */ VariableDeclarationOpt /* Option<T>::None */: ;
/* 237 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 238 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 239 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 240 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 241 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 242 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 243 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 244 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ HierarchicalIdentifier;
/* 245 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 246 */ AlwaysFfClockOptGroup: Posedge;
/* 247 */ AlwaysFfClockOptGroup: Negedge;
/* 248 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 249 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ HierarchicalIdentifier;
/* 250 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 251 */ AlwaysFfResetOptGroup: AsyncLow;
/* 252 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 253 */ AlwaysFfResetOptGroup: SyncLow;
/* 254 */ AlwaysFfResetOptGroup: SyncHigh;
/* 255 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 256 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 257 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 258 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 259 */ AssignDeclaration: Assign HierarchicalIdentifier Equ Expression Semicolon;
/* 260 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 261 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 262 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 263 */ ModportListList /* Vec<T>::New */: ;
/* 264 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 265 */ ModportListOpt /* Option<T>::None */: ;
/* 266 */ ModportItem: Identifier Colon Direction;
/* 267 */ EnumDeclaration: Enum Identifier Colon Type LBrace EnumList RBrace;
/* 268 */ EnumList: EnumItem EnumListList /* Vec */ EnumListOpt /* Option */;
/* 269 */ EnumListList /* Vec<T>::Push */: Comma EnumItem EnumListList;
/* 270 */ EnumListList /* Vec<T>::New */: ;
/* 271 */ EnumListOpt /* Option<T>::Some */: Comma;
/* 272 */ EnumListOpt /* Option<T>::None */: ;
/* 273 */ EnumItem: Identifier EnumItemOpt /* Option */;
/* 274 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/* 275 */ EnumItemOpt /* Option<T>::None */: ;
/* 276 */ StructDeclaration: Struct Identifier LBrace StructList RBrace;
/* 277 */ StructList: StructItem StructListList /* Vec */ StructListOpt /* Option */;
/* 278 */ StructListList /* Vec<T>::Push */: Comma StructItem StructListList;
/* 279 */ StructListList /* Vec<T>::New */: ;
/* 280 */ StructListOpt /* Option<T>::Some */: Comma;
/* 281 */ StructListOpt /* Option<T>::None */: ;
/* 282 */ StructItem: Identifier Colon Type;
/* 283 */ InstanceDeclaration: Inst Identifier InstanceDeclarationOpt /* Option */ InstanceDeclarationOpt0 /* Option */ InstanceDeclarationOpt1 /* Option */;
/* 284 */ InstanceDeclarationOpt1 /* Option<T>::Some */: LBrace InstanceDeclarationOpt2 /* Option */ RBrace;
/* 285 */ InstanceDeclarationOpt2 /* Option<T>::Some */: InstancePortList;
/* 286 */ InstanceDeclarationOpt2 /* Option<T>::None */: ;
/* 287 */ InstanceDeclarationOpt1 /* Option<T>::None */: ;
/* 288 */ InstanceDeclarationOpt0 /* Option<T>::Some */: InstanceParameter;
/* 289 */ InstanceDeclarationOpt0 /* Option<T>::None */: ;
/* 290 */ InstanceDeclarationOpt /* Option<T>::Some */: Width;
/* 291 */ InstanceDeclarationOpt /* Option<T>::None */: ;
/* 292 */ InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
/* 293 */ InstanceParameterOpt /* Option<T>::Some */: InstanceParameterList;
/* 294 */ InstanceParameterOpt /* Option<T>::None */: ;
/* 295 */ InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
/* 296 */ InstanceParameterListList /* Vec<T>::Push */: Comma InstanceParameterItem InstanceParameterListList;
/* 297 */ InstanceParameterListList /* Vec<T>::New */: ;
/* 298 */ InstanceParameterListOpt /* Option<T>::Some */: Comma;
/* 299 */ InstanceParameterListOpt /* Option<T>::None */: ;
/* 300 */ InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
/* 301 */ InstanceParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 302 */ InstanceParameterItemOpt /* Option<T>::None */: ;
/* 303 */ InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
/* 304 */ InstancePortListList /* Vec<T>::Push */: Comma InstancePortItem InstancePortListList;
/* 305 */ InstancePortListList /* Vec<T>::New */: ;
/* 306 */ InstancePortListOpt /* Option<T>::Some */: Comma;
/* 307 */ InstancePortListOpt /* Option<T>::None */: ;
/* 308 */ InstancePortItem: Identifier InstancePortItemOpt /* Option */;
/* 309 */ InstancePortItemOpt /* Option<T>::Some */: Colon Expression;
/* 310 */ InstancePortItemOpt /* Option<T>::None */: ;
/* 311 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 312 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 313 */ WithParameterOpt /* Option<T>::None */: ;
/* 314 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 315 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 316 */ WithParameterListList /* Vec<T>::New */: ;
/* 317 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 318 */ WithParameterListOpt /* Option<T>::None */: ;
/* 319 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 320 */ WithParameterItemGroup: Parameter;
/* 321 */ WithParameterItemGroup: Localparam;
/* 322 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 323 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 324 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 325 */ PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 326 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationItem PortDeclarationListList;
/* 327 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 328 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 329 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 330 */ PortDeclarationItem: Identifier Colon Direction Type;
/* 331 */ Direction: Input;
/* 332 */ Direction: Output;
/* 333 */ Direction: Inout;
/* 334 */ Direction: Ref;
/* 335 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
/* 336 */ FunctionDeclarationList /* Vec<T>::Push */: FunctionItem FunctionDeclarationList;
/* 337 */ FunctionDeclarationList /* Vec<T>::New */: ;
/* 338 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 339 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 340 */ FunctionDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 341 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 342 */ FunctionItem: LetDeclaration;
/* 343 */ FunctionItem: Statement;
/* 344 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 345 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 346 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 347 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 348 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 349 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 350 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 351 */ ModuleIfDeclaration: If Expression Colon Identifier LBrace ModuleIfDeclarationList /* Vec */ RBrace ModuleIfDeclarationList0 /* Vec */ ModuleIfDeclarationOpt0 /* Option */;
/* 352 */ ModuleIfDeclarationList0 /* Vec<T>::Push */: Else If Expression ModuleIfDeclarationOpt /* Option */ LBrace ModuleIfDeclarationList0List /* Vec */ RBrace ModuleIfDeclarationList0;
/* 353 */ ModuleIfDeclarationList0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList0List;
/* 354 */ ModuleIfDeclarationList0List /* Vec<T>::New */: ;
/* 355 */ ModuleIfDeclarationList0 /* Vec<T>::New */: ;
/* 356 */ ModuleIfDeclarationList /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList;
/* 357 */ ModuleIfDeclarationList /* Vec<T>::New */: ;
/* 358 */ ModuleIfDeclarationOpt0 /* Option<T>::Some */: Else ModuleIfDeclarationOpt1 /* Option */ LBrace ModuleIfDeclarationOpt0List /* Vec */ RBrace;
/* 359 */ ModuleIfDeclarationOpt0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationOpt0List;
/* 360 */ ModuleIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 361 */ ModuleIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 362 */ ModuleIfDeclarationOpt1 /* Option<T>::None */: ;
/* 363 */ ModuleIfDeclarationOpt0 /* Option<T>::None */: ;
/* 364 */ ModuleIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 365 */ ModuleIfDeclarationOpt /* Option<T>::None */: ;
/* 366 */ ModuleForDeclaration: For Identifier In Expression DotDot Expression ModuleForDeclarationOpt /* Option */ Colon Identifier LBrace ModuleForDeclarationList /* Vec */ RBrace;
/* 367 */ ModuleForDeclarationList /* Vec<T>::Push */: ModuleItem ModuleForDeclarationList;
/* 368 */ ModuleForDeclarationList /* Vec<T>::New */: ;
/* 369 */ ModuleForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 370 */ ModuleForDeclarationOpt /* Option<T>::None */: ;
/* 371 */ ModuleItem: LetDeclaration;
/* 372 */ ModuleItem: ParameterDeclaration;
/* 373 */ ModuleItem: LocalparamDeclaration;
/* 374 */ ModuleItem: AlwaysFfDeclaration;
/* 375 */ ModuleItem: AlwaysCombDeclaration;
/* 376 */ ModuleItem: AssignDeclaration;
/* 377 */ ModuleItem: FunctionDeclaration;
/* 378 */ ModuleItem: ModuleIfDeclaration;
/* 379 */ ModuleItem: ModuleForDeclaration;
/* 380 */ ModuleItem: EnumDeclaration;
/* 381 */ ModuleItem: StructDeclaration;
/* 382 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 383 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 384 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 385 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 386 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 387 */ InterfaceIfDeclaration: If Expression Colon Identifier LBrace InterfaceIfDeclarationList /* Vec */ RBrace InterfaceIfDeclarationList0 /* Vec */ InterfaceIfDeclarationOpt0 /* Option */;
/* 388 */ InterfaceIfDeclarationList0 /* Vec<T>::Push */: Else If Expression InterfaceIfDeclarationOpt /* Option */ LBrace InterfaceIfDeclarationList0List /* Vec */ RBrace InterfaceIfDeclarationList0;
/* 389 */ InterfaceIfDeclarationList0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList0List;
/* 390 */ InterfaceIfDeclarationList0List /* Vec<T>::New */: ;
/* 391 */ InterfaceIfDeclarationList0 /* Vec<T>::New */: ;
/* 392 */ InterfaceIfDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList;
/* 393 */ InterfaceIfDeclarationList /* Vec<T>::New */: ;
/* 394 */ InterfaceIfDeclarationOpt0 /* Option<T>::Some */: Else InterfaceIfDeclarationOpt1 /* Option */ LBrace InterfaceIfDeclarationOpt0List /* Vec */ RBrace;
/* 395 */ InterfaceIfDeclarationOpt0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationOpt0List;
/* 396 */ InterfaceIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 397 */ InterfaceIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 398 */ InterfaceIfDeclarationOpt1 /* Option<T>::None */: ;
/* 399 */ InterfaceIfDeclarationOpt0 /* Option<T>::None */: ;
/* 400 */ InterfaceIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 401 */ InterfaceIfDeclarationOpt /* Option<T>::None */: ;
/* 402 */ InterfaceForDeclaration: For Identifier In Expression DotDot Expression InterfaceForDeclarationOpt /* Option */ Colon Identifier LBrace InterfaceForDeclarationList /* Vec */ RBrace;
/* 403 */ InterfaceForDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceForDeclarationList;
/* 404 */ InterfaceForDeclarationList /* Vec<T>::New */: ;
/* 405 */ InterfaceForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 406 */ InterfaceForDeclarationOpt /* Option<T>::None */: ;
/* 407 */ InterfaceItem: LetDeclaration;
/* 408 */ InterfaceItem: ParameterDeclaration;
/* 409 */ InterfaceItem: LocalparamDeclaration;
/* 410 */ InterfaceItem: ModportDeclaration;
/* 411 */ InterfaceItem: InterfaceIfDeclaration;
/* 412 */ InterfaceItem: InterfaceForDeclaration;
/* 413 */ InterfaceItem: EnumDeclaration;
/* 414 */ InterfaceItem: StructDeclaration;
/* 415 */ Description: ModuleDeclaration;
/* 416 */ Description: InterfaceDeclaration;
/* 417 */ Veryl: Start VerylList /* Vec */;
/* 418 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 419 */ VerylList /* Vec<T>::New */: ;
