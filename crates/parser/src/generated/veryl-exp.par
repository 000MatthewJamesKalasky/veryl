%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ CommentsTerm: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : Token;
/*   1 */ ExponentTerm: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token;
/*   2 */ FixedPointTerm: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token;
/*   3 */ BasedTerm: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token;
/*   4 */ BaseLessTerm: /[0-9]+(?:_[0-9]+)*/ : Token;
/*   5 */ AllBitTerm: /'[01]/ : Token;
/*   6 */ MinusColonTerm: '-:' : Token;
/*   7 */ MinusGTTerm: '->' : Token;
/*   8 */ PlusColonTerm: '+:' : Token;
/*   9 */ AssignmentOperatorTerm: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token;
/*  10 */ Operator11Term: "\*\*" : Token;
/*  11 */ Operator10Term: "\*|/|%" : Token;
/*  12 */ Operator09Term: "\+|-" : Token;
/*  13 */ Operator08Term: "<<<|>>>|<<|>>" : Token;
/*  14 */ Operator07Term: "<=|>=|<|>" : Token;
/*  15 */ Operator06Term: "===|==\?|!==|!=\?|==|!=" : Token;
/*  16 */ Operator02Term: "&&" : Token;
/*  17 */ Operator01Term: "\|\|" : Token;
/*  18 */ Operator05Term: "&" : Token;
/*  19 */ Operator04Term: "\^~|\^|~\^" : Token;
/*  20 */ Operator03Term: "\|" : Token;
/*  21 */ UnaryOperatorTerm: "~&|~\||!|~" : Token;
/*  22 */ ColonTerm: ':' : Token;
/*  23 */ CommaTerm: ',' : Token;
/*  24 */ DollarTerm: '$' : Token;
/*  25 */ DotDotTerm: '..' : Token;
/*  26 */ DotTerm: '.' : Token;
/*  27 */ EquTerm: '=' : Token;
/*  28 */ HashTerm: '#' : Token;
/*  29 */ LBraceTerm: '{' : Token;
/*  30 */ LBracketTerm: '[' : Token;
/*  31 */ LParenTerm: '(' : Token;
/*  32 */ RBraceTerm: '}' : Token;
/*  33 */ RBracketTerm: ']' : Token;
/*  34 */ RParenTerm: ')' : Token;
/*  35 */ SemicolonTerm: ';' : Token;
/*  36 */ AlwaysCombTerm: /\balways_comb\b/ : Token;
/*  37 */ AlwaysFfTerm: /\balways_ff\b/ : Token;
/*  38 */ AssignTerm: /\bassign\b/ : Token;
/*  39 */ AsyncHighTerm: /\basync_high\b/ : Token;
/*  40 */ AsyncLowTerm: /\basync_low\b/ : Token;
/*  41 */ BitTerm: /\bbit\b/ : Token;
/*  42 */ ElseTerm: /\belse\b/ : Token;
/*  43 */ EnumTerm: /\benum\b/ : Token;
/*  44 */ F32Term: /\bf32\b/ : Token;
/*  45 */ F64Term: /\bf64\b/ : Token;
/*  46 */ ForTerm: /\bfor\b/ : Token;
/*  47 */ FunctionTerm: /\bfunction\b/ : Token;
/*  48 */ I32Term: /\bi32\b/ : Token;
/*  49 */ I64Term: /\bi64\b/ : Token;
/*  50 */ IfResetTerm: /\bif_reset\b/ : Token;
/*  51 */ IfTerm: /\bif\b/ : Token;
/*  52 */ InoutTerm: /\binout\b/ : Token;
/*  53 */ InputTerm: /\binput\b/ : Token;
/*  54 */ InstTerm: /\binst\b/ : Token;
/*  55 */ InterfaceTerm: /\binterface\b/ : Token;
/*  56 */ InTerm: /\bin\b/ : Token;
/*  57 */ LetTerm: /\blet\b/ : Token;
/*  58 */ LocalparamTerm: /\blocalparam\b/ : Token;
/*  59 */ LogicTerm: /\blogic\b/ : Token;
/*  60 */ ModportTerm: /\bmodport\b/ : Token;
/*  61 */ ModuleTerm: /\bmodule\b/ : Token;
/*  62 */ NegedgeTerm: /\bnegedge\b/ : Token;
/*  63 */ OutputTerm: /\boutput\b/ : Token;
/*  64 */ ParameterTerm: /\bparameter\b/ : Token;
/*  65 */ PosedgeTerm: /\bposedge\b/ : Token;
/*  66 */ RefTerm: /\bref\b/ : Token;
/*  67 */ ReturnTerm: /\breturn\b/ : Token;
/*  68 */ StepTerm: /\bstep\b/ : Token;
/*  69 */ StructTerm: /\bstruct\b/ : Token;
/*  70 */ SyncHighTerm: /\bsync_high\b/ : Token;
/*  71 */ SyncLowTerm: /\bsync_low\b/ : Token;
/*  72 */ U32Term: /\bu32\b/ : Token;
/*  73 */ U64Term: /\bu64\b/ : Token;
/*  74 */ IdentifierTerm: /[a-zA-Z_][0-9a-zA-Z_]*/ : Token;
/*  75 */ Comments: CommentsOpt /* Option */;
/*  76 */ CommentsOpt /* Option<T>::Some */: CommentsTerm;
/*  77 */ CommentsOpt /* Option<T>::None */: ;
/*  78 */ StartToken: Comments;
/*  79 */ ExponentToken: ExponentTerm : Token Comments;
/*  80 */ FixedPointToken: FixedPointTerm : Token Comments;
/*  81 */ BasedToken: BasedTerm : Token Comments;
/*  82 */ BaseLessToken: BaseLessTerm : Token Comments;
/*  83 */ AllBitToken: AllBitTerm : Token Comments;
/*  84 */ AssignmentOperatorToken: AssignmentOperatorTerm : Token Comments;
/*  85 */ Operator01Token: Operator01Term : Token Comments;
/*  86 */ Operator02Token: Operator02Term : Token Comments;
/*  87 */ Operator03Token: Operator03Term : Token Comments;
/*  88 */ Operator04Token: Operator04Term : Token Comments;
/*  89 */ Operator05Token: Operator05Term : Token Comments;
/*  90 */ Operator06Token: Operator06Term : Token Comments;
/*  91 */ Operator07Token: Operator07Term : Token Comments;
/*  92 */ Operator08Token: Operator08Term : Token Comments;
/*  93 */ Operator09Token: Operator09Term : Token Comments;
/*  94 */ Operator10Token: Operator10Term : Token Comments;
/*  95 */ Operator11Token: Operator11Term : Token Comments;
/*  96 */ UnaryOperatorToken: UnaryOperatorTerm : Token Comments;
/*  97 */ ColonToken: ColonTerm : Token Comments;
/*  98 */ CommaToken: CommaTerm : Token Comments;
/*  99 */ DollarToken: DollarTerm : Token Comments;
/* 100 */ DotDotToken: DotDotTerm : Token Comments;
/* 101 */ DotToken: DotTerm : Token Comments;
/* 102 */ EquToken: EquTerm : Token Comments;
/* 103 */ HashToken: HashTerm : Token Comments;
/* 104 */ LBraceToken: LBraceTerm : Token Comments;
/* 105 */ LBracketToken: LBracketTerm : Token Comments;
/* 106 */ LParenToken: LParenTerm : Token Comments;
/* 107 */ MinusColonToken: MinusColonTerm : Token Comments;
/* 108 */ MinusGTToken: MinusGTTerm : Token Comments;
/* 109 */ PlusColonToken: PlusColonTerm : Token Comments;
/* 110 */ RBraceToken: RBraceTerm : Token Comments;
/* 111 */ RBracketToken: RBracketTerm : Token Comments;
/* 112 */ RParenToken: RParenTerm : Token Comments;
/* 113 */ SemicolonToken: SemicolonTerm : Token Comments;
/* 114 */ AlwaysCombToken: AlwaysCombTerm : Token Comments;
/* 115 */ AlwaysFfToken: AlwaysFfTerm : Token Comments;
/* 116 */ AssignToken: AssignTerm : Token Comments;
/* 117 */ AsyncHighToken: AsyncHighTerm : Token Comments;
/* 118 */ AsyncLowToken: AsyncLowTerm : Token Comments;
/* 119 */ BitToken: BitTerm : Token Comments;
/* 120 */ ElseToken: ElseTerm : Token Comments;
/* 121 */ EnumToken: EnumTerm : Token Comments;
/* 122 */ F32Token: F32Term : Token Comments;
/* 123 */ F64Token: F64Term : Token Comments;
/* 124 */ ForToken: ForTerm : Token Comments;
/* 125 */ FunctionToken: FunctionTerm : Token Comments;
/* 126 */ I32Token: I32Term : Token Comments;
/* 127 */ I64Token: I64Term : Token Comments;
/* 128 */ IfResetToken: IfResetTerm : Token Comments;
/* 129 */ IfToken: IfTerm : Token Comments;
/* 130 */ InoutToken: InoutTerm : Token Comments;
/* 131 */ InputToken: InputTerm : Token Comments;
/* 132 */ InstToken: InstTerm : Token Comments;
/* 133 */ InterfaceToken: InterfaceTerm : Token Comments;
/* 134 */ InToken: InTerm : Token Comments;
/* 135 */ LetToken: LetTerm : Token Comments;
/* 136 */ LocalparamToken: LocalparamTerm : Token Comments;
/* 137 */ LogicToken: LogicTerm : Token Comments;
/* 138 */ ModportToken: ModportTerm : Token Comments;
/* 139 */ ModuleToken: ModuleTerm : Token Comments;
/* 140 */ NegedgeToken: NegedgeTerm : Token Comments;
/* 141 */ OutputToken: OutputTerm : Token Comments;
/* 142 */ ParameterToken: ParameterTerm : Token Comments;
/* 143 */ PosedgeToken: PosedgeTerm : Token Comments;
/* 144 */ RefToken: RefTerm : Token Comments;
/* 145 */ ReturnToken: ReturnTerm : Token Comments;
/* 146 */ StepToken: StepTerm : Token Comments;
/* 147 */ StructToken: StructTerm : Token Comments;
/* 148 */ SyncHighToken: SyncHighTerm : Token Comments;
/* 149 */ SyncLowToken: SyncLowTerm : Token Comments;
/* 150 */ U32Token: U32Term : Token Comments;
/* 151 */ U64Token: U64Term : Token Comments;
/* 152 */ IdentifierToken: IdentifierTerm : Token Comments;
/* 153 */ Start: StartToken : VerylToken;
/* 154 */ Exponent: ExponentToken : VerylToken;
/* 155 */ FixedPoint: FixedPointToken : VerylToken;
/* 156 */ Based: BasedToken : VerylToken;
/* 157 */ BaseLess: BaseLessToken : VerylToken;
/* 158 */ AllBit: AllBitToken : VerylToken;
/* 159 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/* 160 */ Operator01: Operator01Token : VerylToken;
/* 161 */ Operator02: Operator02Token : VerylToken;
/* 162 */ Operator03: Operator03Token : VerylToken;
/* 163 */ Operator04: Operator04Token : VerylToken;
/* 164 */ Operator05: Operator05Token : VerylToken;
/* 165 */ Operator06: Operator06Token : VerylToken;
/* 166 */ Operator07: Operator07Token : VerylToken;
/* 167 */ Operator08: Operator08Token : VerylToken;
/* 168 */ Operator09: Operator09Token : VerylToken;
/* 169 */ Operator10: Operator10Token : VerylToken;
/* 170 */ Operator11: Operator11Token : VerylToken;
/* 171 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/* 172 */ Colon: ColonToken : VerylToken;
/* 173 */ Comma: CommaToken : VerylToken;
/* 174 */ Dollar: DollarToken : VerylToken;
/* 175 */ DotDot: DotDotToken : VerylToken;
/* 176 */ Dot: DotToken : VerylToken;
/* 177 */ Equ: EquToken : VerylToken;
/* 178 */ Hash: HashToken : VerylToken;
/* 179 */ LBrace: LBraceToken : VerylToken;
/* 180 */ LBracket: LBracketToken : VerylToken;
/* 181 */ LParen: LParenToken : VerylToken;
/* 182 */ MinusColon: MinusColonToken : VerylToken;
/* 183 */ MinusGT: MinusGTToken : VerylToken;
/* 184 */ PlusColon: PlusColonToken : VerylToken;
/* 185 */ RBrace: RBraceToken : VerylToken;
/* 186 */ RBracket: RBracketToken : VerylToken;
/* 187 */ RParen: RParenToken : VerylToken;
/* 188 */ Semicolon: SemicolonToken : VerylToken;
/* 189 */ AlwaysComb: AlwaysCombToken : VerylToken;
/* 190 */ AlwaysFf: AlwaysFfToken : VerylToken;
/* 191 */ Assign: AssignToken : VerylToken;
/* 192 */ AsyncHigh: AsyncHighToken : VerylToken;
/* 193 */ AsyncLow: AsyncLowToken : VerylToken;
/* 194 */ Bit: BitToken : VerylToken;
/* 195 */ Else: ElseToken : VerylToken;
/* 196 */ Enum: EnumToken : VerylToken;
/* 197 */ F32: F32Token : VerylToken;
/* 198 */ F64: F64Token : VerylToken;
/* 199 */ For: ForToken : VerylToken;
/* 200 */ Function: FunctionToken : VerylToken;
/* 201 */ I32: I32Token : VerylToken;
/* 202 */ I64: I64Token : VerylToken;
/* 203 */ If: IfToken : VerylToken;
/* 204 */ IfReset: IfResetToken : VerylToken;
/* 205 */ In: InToken : VerylToken;
/* 206 */ Inout: InoutToken : VerylToken;
/* 207 */ Input: InputToken : VerylToken;
/* 208 */ Inst: InstToken : VerylToken;
/* 209 */ Interface: InterfaceToken : VerylToken;
/* 210 */ Let: LetToken : VerylToken;
/* 211 */ Localparam: LocalparamToken : VerylToken;
/* 212 */ Logic: LogicToken : VerylToken;
/* 213 */ Modport: ModportToken : VerylToken;
/* 214 */ Module: ModuleToken : VerylToken;
/* 215 */ Negedge: NegedgeToken : VerylToken;
/* 216 */ Output: OutputToken : VerylToken;
/* 217 */ Parameter: ParameterToken : VerylToken;
/* 218 */ Posedge: PosedgeToken : VerylToken;
/* 219 */ Ref: RefToken : VerylToken;
/* 220 */ Return: ReturnToken : VerylToken;
/* 221 */ Step: StepToken : VerylToken;
/* 222 */ Struct: StructToken : VerylToken;
/* 223 */ SyncHigh: SyncHighToken : VerylToken;
/* 224 */ SyncLow: SyncLowToken : VerylToken;
/* 225 */ U32: U32Token : VerylToken;
/* 226 */ U64: U64Token : VerylToken;
/* 227 */ Identifier: IdentifierToken : VerylToken;
/* 228 */ Number: IntegralNumber;
/* 229 */ Number: RealNumber;
/* 230 */ IntegralNumber: Based;
/* 231 */ IntegralNumber: BaseLess;
/* 232 */ IntegralNumber: AllBit;
/* 233 */ RealNumber: FixedPoint;
/* 234 */ RealNumber: Exponent;
/* 235 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/* 236 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/* 237 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Range HierarchicalIdentifierList0List;
/* 238 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/* 239 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/* 240 */ HierarchicalIdentifierList /* Vec<T>::Push */: Range HierarchicalIdentifierList;
/* 241 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/* 242 */ Expression: Expression01 ExpressionList /* Vec */;
/* 243 */ ExpressionList /* Vec<T>::Push */: Operator01 Expression01 ExpressionList;
/* 244 */ ExpressionList /* Vec<T>::New */: ;
/* 245 */ Expression01: Expression02 Expression01List /* Vec */;
/* 246 */ Expression01List /* Vec<T>::Push */: Operator02 Expression02 Expression01List;
/* 247 */ Expression01List /* Vec<T>::New */: ;
/* 248 */ Expression02: Expression03 Expression02List /* Vec */;
/* 249 */ Expression02List /* Vec<T>::Push */: Operator03 Expression03 Expression02List;
/* 250 */ Expression02List /* Vec<T>::New */: ;
/* 251 */ Expression03: Expression04 Expression03List /* Vec */;
/* 252 */ Expression03List /* Vec<T>::Push */: Operator04 Expression04 Expression03List;
/* 253 */ Expression03List /* Vec<T>::New */: ;
/* 254 */ Expression04: Expression05 Expression04List /* Vec */;
/* 255 */ Expression04List /* Vec<T>::Push */: Operator05 Expression05 Expression04List;
/* 256 */ Expression04List /* Vec<T>::New */: ;
/* 257 */ Expression05: Expression06 Expression05List /* Vec */;
/* 258 */ Expression05List /* Vec<T>::Push */: Operator06 Expression06 Expression05List;
/* 259 */ Expression05List /* Vec<T>::New */: ;
/* 260 */ Expression06: Expression07 Expression06List /* Vec */;
/* 261 */ Expression06List /* Vec<T>::Push */: Operator07 Expression07 Expression06List;
/* 262 */ Expression06List /* Vec<T>::New */: ;
/* 263 */ Expression07: Expression08 Expression07List /* Vec */;
/* 264 */ Expression07List /* Vec<T>::Push */: Operator08 Expression08 Expression07List;
/* 265 */ Expression07List /* Vec<T>::New */: ;
/* 266 */ Expression08: Expression09 Expression08List /* Vec */;
/* 267 */ Expression08List /* Vec<T>::Push */: Operator09 Expression09 Expression08List;
/* 268 */ Expression08List /* Vec<T>::New */: ;
/* 269 */ Expression09: Expression10 Expression09List /* Vec */;
/* 270 */ Expression09List /* Vec<T>::Push */: Operator10 Expression10 Expression09List;
/* 271 */ Expression09List /* Vec<T>::New */: ;
/* 272 */ Expression10: Expression11 Expression10List /* Vec */;
/* 273 */ Expression10List /* Vec<T>::Push */: Operator11 Expression11 Expression10List;
/* 274 */ Expression10List /* Vec<T>::New */: ;
/* 275 */ Expression11: Expression11Opt /* Option */ Factor;
/* 276 */ Expression11Opt /* Option<T>::Some */: Expression11OptGroup;
/* 277 */ Expression11OptGroup: UnaryOperator;
/* 278 */ Expression11OptGroup: Operator09;
/* 279 */ Expression11OptGroup: Operator05;
/* 280 */ Expression11OptGroup: Operator03;
/* 281 */ Expression11OptGroup: Operator04;
/* 282 */ Expression11Opt /* Option<T>::None */: ;
/* 283 */ Factor: Number;
/* 284 */ Factor: FactorOpt /* Option */ HierarchicalIdentifier FactorOpt0 /* Option */;
/* 285 */ Factor: LParen Expression RParen;
/* 286 */ FactorOpt0 /* Option<T>::Some */: LParen FactorOpt1 /* Option */ RParen;
/* 287 */ FactorOpt1 /* Option<T>::Some */: FunctionCallArg;
/* 288 */ FactorOpt1 /* Option<T>::None */: ;
/* 289 */ FactorOpt0 /* Option<T>::None */: ;
/* 290 */ FactorOpt /* Option<T>::Some */: Dollar;
/* 291 */ FactorOpt /* Option<T>::None */: ;
/* 292 */ FunctionCallArg: Expression FunctionCallArgList /* Vec */ FunctionCallArgOpt /* Option */;
/* 293 */ FunctionCallArgList /* Vec<T>::Push */: Comma Expression FunctionCallArgList;
/* 294 */ FunctionCallArgList /* Vec<T>::New */: ;
/* 295 */ FunctionCallArgOpt /* Option<T>::Some */: Comma;
/* 296 */ FunctionCallArgOpt /* Option<T>::None */: ;
/* 297 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 298 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/* 299 */ RangeOpt /* Option<T>::None */: ;
/* 300 */ RangeOperator: Colon;
/* 301 */ RangeOperator: PlusColon;
/* 302 */ RangeOperator: MinusColon;
/* 303 */ RangeOperator: Step;
/* 304 */ Width: LBracket Expression RBracket;
/* 305 */ BuiltinType: Logic;
/* 306 */ BuiltinType: Bit;
/* 307 */ BuiltinType: U32;
/* 308 */ BuiltinType: U64;
/* 309 */ BuiltinType: I32;
/* 310 */ BuiltinType: I64;
/* 311 */ BuiltinType: F32;
/* 312 */ BuiltinType: F64;
/* 313 */ Type: TypeGroup TypeList /* Vec */;
/* 314 */ TypeGroup: BuiltinType;
/* 315 */ TypeGroup: Identifier;
/* 316 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 317 */ TypeList /* Vec<T>::New */: ;
/* 318 */ Statement: AssignmentStatement;
/* 319 */ Statement: IfStatement;
/* 320 */ Statement: IfResetStatement;
/* 321 */ Statement: ReturnStatement;
/* 322 */ Statement: ForStatement;
/* 323 */ AssignmentStatement: HierarchicalIdentifier AssignmentStatementGroup Expression Semicolon;
/* 324 */ AssignmentStatementGroup: Equ;
/* 325 */ AssignmentStatementGroup: AssignmentOperator;
/* 326 */ IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
/* 327 */ IfStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
/* 328 */ IfStatementList0List /* Vec<T>::Push */: Statement IfStatementList0List;
/* 329 */ IfStatementList0List /* Vec<T>::New */: ;
/* 330 */ IfStatementList0 /* Vec<T>::New */: ;
/* 331 */ IfStatementList /* Vec<T>::Push */: Statement IfStatementList;
/* 332 */ IfStatementList /* Vec<T>::New */: ;
/* 333 */ IfStatementOpt /* Option<T>::Some */: Else LBrace IfStatementOptList /* Vec */ RBrace;
/* 334 */ IfStatementOptList /* Vec<T>::Push */: Statement IfStatementOptList;
/* 335 */ IfStatementOptList /* Vec<T>::New */: ;
/* 336 */ IfStatementOpt /* Option<T>::None */: ;
/* 337 */ IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
/* 338 */ IfResetStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
/* 339 */ IfResetStatementList0List /* Vec<T>::Push */: Statement IfResetStatementList0List;
/* 340 */ IfResetStatementList0List /* Vec<T>::New */: ;
/* 341 */ IfResetStatementList0 /* Vec<T>::New */: ;
/* 342 */ IfResetStatementList /* Vec<T>::Push */: Statement IfResetStatementList;
/* 343 */ IfResetStatementList /* Vec<T>::New */: ;
/* 344 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
/* 345 */ IfResetStatementOptList /* Vec<T>::Push */: Statement IfResetStatementOptList;
/* 346 */ IfResetStatementOptList /* Vec<T>::New */: ;
/* 347 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 348 */ ReturnStatement: Return Expression Semicolon;
/* 349 */ ForStatement: For Identifier Colon Type In Expression DotDot Expression ForStatementOpt /* Option */ LBrace ForStatementList /* Vec */ RBrace;
/* 350 */ ForStatementList /* Vec<T>::Push */: Statement ForStatementList;
/* 351 */ ForStatementList /* Vec<T>::New */: ;
/* 352 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 353 */ ForStatementOpt /* Option<T>::None */: ;
/* 354 */ LetDeclaration: Let Identifier Colon Type LetDeclarationOpt /* Option */ Semicolon;
/* 355 */ LetDeclarationOpt /* Option<T>::Some */: Equ Expression;
/* 356 */ LetDeclarationOpt /* Option<T>::None */: ;
/* 357 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 358 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 359 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 360 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 361 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 362 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 363 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ HierarchicalIdentifier;
/* 364 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 365 */ AlwaysFfClockOptGroup: Posedge;
/* 366 */ AlwaysFfClockOptGroup: Negedge;
/* 367 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 368 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ HierarchicalIdentifier;
/* 369 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 370 */ AlwaysFfResetOptGroup: AsyncLow;
/* 371 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 372 */ AlwaysFfResetOptGroup: SyncLow;
/* 373 */ AlwaysFfResetOptGroup: SyncHigh;
/* 374 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 375 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 376 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 377 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 378 */ AssignDeclaration: Assign HierarchicalIdentifier Equ Expression Semicolon;
/* 379 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 380 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 381 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 382 */ ModportListList /* Vec<T>::New */: ;
/* 383 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 384 */ ModportListOpt /* Option<T>::None */: ;
/* 385 */ ModportItem: Identifier Colon Direction;
/* 386 */ EnumDeclaration: Enum Identifier Colon Type LBrace EnumList RBrace;
/* 387 */ EnumList: EnumItem EnumListList /* Vec */ EnumListOpt /* Option */;
/* 388 */ EnumListList /* Vec<T>::Push */: Comma EnumItem EnumListList;
/* 389 */ EnumListList /* Vec<T>::New */: ;
/* 390 */ EnumListOpt /* Option<T>::Some */: Comma;
/* 391 */ EnumListOpt /* Option<T>::None */: ;
/* 392 */ EnumItem: Identifier EnumItemOpt /* Option */;
/* 393 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/* 394 */ EnumItemOpt /* Option<T>::None */: ;
/* 395 */ StructDeclaration: Struct Identifier LBrace StructList RBrace;
/* 396 */ StructList: StructItem StructListList /* Vec */ StructListOpt /* Option */;
/* 397 */ StructListList /* Vec<T>::Push */: Comma StructItem StructListList;
/* 398 */ StructListList /* Vec<T>::New */: ;
/* 399 */ StructListOpt /* Option<T>::Some */: Comma;
/* 400 */ StructListOpt /* Option<T>::None */: ;
/* 401 */ StructItem: Identifier Colon Type;
/* 402 */ InstDeclaration: Inst Identifier Colon Identifier InstDeclarationOpt /* Option */ InstDeclarationOpt0 /* Option */ InstDeclarationOpt1 /* Option */ Semicolon;
/* 403 */ InstDeclarationOpt1 /* Option<T>::Some */: LBrace InstDeclarationOpt2 /* Option */ RBrace;
/* 404 */ InstDeclarationOpt2 /* Option<T>::Some */: InstPortList;
/* 405 */ InstDeclarationOpt2 /* Option<T>::None */: ;
/* 406 */ InstDeclarationOpt1 /* Option<T>::None */: ;
/* 407 */ InstDeclarationOpt0 /* Option<T>::Some */: InstParameter;
/* 408 */ InstDeclarationOpt0 /* Option<T>::None */: ;
/* 409 */ InstDeclarationOpt /* Option<T>::Some */: Width;
/* 410 */ InstDeclarationOpt /* Option<T>::None */: ;
/* 411 */ InstParameter: Hash LParen InstParameterOpt /* Option */ RParen;
/* 412 */ InstParameterOpt /* Option<T>::Some */: InstParameterList;
/* 413 */ InstParameterOpt /* Option<T>::None */: ;
/* 414 */ InstParameterList: InstParameterItem InstParameterListList /* Vec */ InstParameterListOpt /* Option */;
/* 415 */ InstParameterListList /* Vec<T>::Push */: Comma InstParameterItem InstParameterListList;
/* 416 */ InstParameterListList /* Vec<T>::New */: ;
/* 417 */ InstParameterListOpt /* Option<T>::Some */: Comma;
/* 418 */ InstParameterListOpt /* Option<T>::None */: ;
/* 419 */ InstParameterItem: Identifier InstParameterItemOpt /* Option */;
/* 420 */ InstParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 421 */ InstParameterItemOpt /* Option<T>::None */: ;
/* 422 */ InstPortList: InstPortItem InstPortListList /* Vec */ InstPortListOpt /* Option */;
/* 423 */ InstPortListList /* Vec<T>::Push */: Comma InstPortItem InstPortListList;
/* 424 */ InstPortListList /* Vec<T>::New */: ;
/* 425 */ InstPortListOpt /* Option<T>::Some */: Comma;
/* 426 */ InstPortListOpt /* Option<T>::None */: ;
/* 427 */ InstPortItem: Identifier InstPortItemOpt /* Option */;
/* 428 */ InstPortItemOpt /* Option<T>::Some */: Colon Expression;
/* 429 */ InstPortItemOpt /* Option<T>::None */: ;
/* 430 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 431 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 432 */ WithParameterOpt /* Option<T>::None */: ;
/* 433 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 434 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 435 */ WithParameterListList /* Vec<T>::New */: ;
/* 436 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 437 */ WithParameterListOpt /* Option<T>::None */: ;
/* 438 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 439 */ WithParameterItemGroup: Parameter;
/* 440 */ WithParameterItemGroup: Localparam;
/* 441 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 442 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 443 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 444 */ PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 445 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationItem PortDeclarationListList;
/* 446 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 447 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 448 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 449 */ PortDeclarationItem: Identifier Colon Direction Type;
/* 450 */ Direction: Input;
/* 451 */ Direction: Output;
/* 452 */ Direction: Inout;
/* 453 */ Direction: Ref;
/* 454 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
/* 455 */ FunctionDeclarationList /* Vec<T>::Push */: FunctionItem FunctionDeclarationList;
/* 456 */ FunctionDeclarationList /* Vec<T>::New */: ;
/* 457 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 458 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 459 */ FunctionDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 460 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 461 */ FunctionItem: LetDeclaration;
/* 462 */ FunctionItem: Statement;
/* 463 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 464 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 465 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 466 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 467 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 468 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 469 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 470 */ ModuleIfDeclaration: If Expression Colon Identifier LBrace ModuleIfDeclarationList /* Vec */ RBrace ModuleIfDeclarationList0 /* Vec */ ModuleIfDeclarationOpt0 /* Option */;
/* 471 */ ModuleIfDeclarationList0 /* Vec<T>::Push */: Else If Expression ModuleIfDeclarationOpt /* Option */ LBrace ModuleIfDeclarationList0List /* Vec */ RBrace ModuleIfDeclarationList0;
/* 472 */ ModuleIfDeclarationList0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList0List;
/* 473 */ ModuleIfDeclarationList0List /* Vec<T>::New */: ;
/* 474 */ ModuleIfDeclarationList0 /* Vec<T>::New */: ;
/* 475 */ ModuleIfDeclarationList /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList;
/* 476 */ ModuleIfDeclarationList /* Vec<T>::New */: ;
/* 477 */ ModuleIfDeclarationOpt0 /* Option<T>::Some */: Else ModuleIfDeclarationOpt1 /* Option */ LBrace ModuleIfDeclarationOpt0List /* Vec */ RBrace;
/* 478 */ ModuleIfDeclarationOpt0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationOpt0List;
/* 479 */ ModuleIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 480 */ ModuleIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 481 */ ModuleIfDeclarationOpt1 /* Option<T>::None */: ;
/* 482 */ ModuleIfDeclarationOpt0 /* Option<T>::None */: ;
/* 483 */ ModuleIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 484 */ ModuleIfDeclarationOpt /* Option<T>::None */: ;
/* 485 */ ModuleForDeclaration: For Identifier In Expression DotDot Expression ModuleForDeclarationOpt /* Option */ Colon Identifier LBrace ModuleForDeclarationList /* Vec */ RBrace;
/* 486 */ ModuleForDeclarationList /* Vec<T>::Push */: ModuleItem ModuleForDeclarationList;
/* 487 */ ModuleForDeclarationList /* Vec<T>::New */: ;
/* 488 */ ModuleForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 489 */ ModuleForDeclarationOpt /* Option<T>::None */: ;
/* 490 */ ModuleItem: LetDeclaration;
/* 491 */ ModuleItem: InstDeclaration;
/* 492 */ ModuleItem: LocalparamDeclaration;
/* 493 */ ModuleItem: AlwaysFfDeclaration;
/* 494 */ ModuleItem: AlwaysCombDeclaration;
/* 495 */ ModuleItem: AssignDeclaration;
/* 496 */ ModuleItem: FunctionDeclaration;
/* 497 */ ModuleItem: ModuleIfDeclaration;
/* 498 */ ModuleItem: ModuleForDeclaration;
/* 499 */ ModuleItem: EnumDeclaration;
/* 500 */ ModuleItem: StructDeclaration;
/* 501 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 502 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 503 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 504 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 505 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 506 */ InterfaceIfDeclaration: If Expression Colon Identifier LBrace InterfaceIfDeclarationList /* Vec */ RBrace InterfaceIfDeclarationList0 /* Vec */ InterfaceIfDeclarationOpt0 /* Option */;
/* 507 */ InterfaceIfDeclarationList0 /* Vec<T>::Push */: Else If Expression InterfaceIfDeclarationOpt /* Option */ LBrace InterfaceIfDeclarationList0List /* Vec */ RBrace InterfaceIfDeclarationList0;
/* 508 */ InterfaceIfDeclarationList0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList0List;
/* 509 */ InterfaceIfDeclarationList0List /* Vec<T>::New */: ;
/* 510 */ InterfaceIfDeclarationList0 /* Vec<T>::New */: ;
/* 511 */ InterfaceIfDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList;
/* 512 */ InterfaceIfDeclarationList /* Vec<T>::New */: ;
/* 513 */ InterfaceIfDeclarationOpt0 /* Option<T>::Some */: Else InterfaceIfDeclarationOpt1 /* Option */ LBrace InterfaceIfDeclarationOpt0List /* Vec */ RBrace;
/* 514 */ InterfaceIfDeclarationOpt0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationOpt0List;
/* 515 */ InterfaceIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 516 */ InterfaceIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 517 */ InterfaceIfDeclarationOpt1 /* Option<T>::None */: ;
/* 518 */ InterfaceIfDeclarationOpt0 /* Option<T>::None */: ;
/* 519 */ InterfaceIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 520 */ InterfaceIfDeclarationOpt /* Option<T>::None */: ;
/* 521 */ InterfaceForDeclaration: For Identifier In Expression DotDot Expression InterfaceForDeclarationOpt /* Option */ Colon Identifier LBrace InterfaceForDeclarationList /* Vec */ RBrace;
/* 522 */ InterfaceForDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceForDeclarationList;
/* 523 */ InterfaceForDeclarationList /* Vec<T>::New */: ;
/* 524 */ InterfaceForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 525 */ InterfaceForDeclarationOpt /* Option<T>::None */: ;
/* 526 */ InterfaceItem: LetDeclaration;
/* 527 */ InterfaceItem: LocalparamDeclaration;
/* 528 */ InterfaceItem: ModportDeclaration;
/* 529 */ InterfaceItem: InterfaceIfDeclaration;
/* 530 */ InterfaceItem: InterfaceForDeclaration;
/* 531 */ InterfaceItem: EnumDeclaration;
/* 532 */ InterfaceItem: StructDeclaration;
/* 533 */ Description: ModuleDeclaration;
/* 534 */ Description: InterfaceDeclaration;
/* 535 */ Veryl: Start VerylList /* Vec */;
/* 536 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 537 */ VerylList /* Vec<T>::New */: ;
