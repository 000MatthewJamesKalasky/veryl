%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type OwnedToken = crate::veryl_token::OwnedToken
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : OwnedToken;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   6 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   7 */ BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : OwnedToken Comments;
/*   8 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   9 */ AllBitToken: /'[01]/ : OwnedToken Comments;
/*  10 */ MinusGTToken: '->' : OwnedToken Comments;
/*  11 */ AssignmentOperatorToken: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : OwnedToken Comments;
/*  12 */ BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" : OwnedToken Comments;
/*  13 */ CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" : OwnedToken Comments;
/*  14 */ UnaryOperatorToken: "!|~" : OwnedToken Comments;
/*  15 */ ColonColonColonToken: ':::' : OwnedToken Comments;
/*  16 */ ColonToken: ':' : OwnedToken Comments;
/*  17 */ CommaToken: ',' : OwnedToken Comments;
/*  18 */ DotDotToken: '..' : OwnedToken Comments;
/*  19 */ EquToken: '=' : OwnedToken Comments;
/*  20 */ HashToken: '#' : OwnedToken Comments;
/*  21 */ LBraceToken: '{' : OwnedToken Comments;
/*  22 */ LBracketToken: '[' : OwnedToken Comments;
/*  23 */ LParenToken: '(' : OwnedToken Comments;
/*  24 */ RBraceToken: '}' : OwnedToken Comments;
/*  25 */ RBracketToken: ']' : OwnedToken Comments;
/*  26 */ RParenToken: ')' : OwnedToken Comments;
/*  27 */ SemicolonToken: ';' : OwnedToken Comments;
/*  28 */ AlwaysCombToken: 'always_comb' : OwnedToken Comments;
/*  29 */ AlwaysFfToken: 'always_ff' : OwnedToken Comments;
/*  30 */ AssignToken: 'assign' : OwnedToken Comments;
/*  31 */ AsyncHighToken: 'async_high' : OwnedToken Comments;
/*  32 */ AsyncLowToken: 'async_low' : OwnedToken Comments;
/*  33 */ BitToken: 'bit' : OwnedToken Comments;
/*  34 */ ElseToken: 'else' : OwnedToken Comments;
/*  35 */ F32Token: 'f32' : OwnedToken Comments;
/*  36 */ F64Token: 'f64' : OwnedToken Comments;
/*  37 */ ForToken: 'for' : OwnedToken Comments;
/*  38 */ FunctionToken: 'function' : OwnedToken Comments;
/*  39 */ I32Token: 'i32' : OwnedToken Comments;
/*  40 */ I64Token: 'i64' : OwnedToken Comments;
/*  41 */ IfResetToken: 'if_reset' : OwnedToken Comments;
/*  42 */ IfToken: 'if' : OwnedToken Comments;
/*  43 */ InoutToken: 'inout' : OwnedToken Comments;
/*  44 */ InputToken: 'input' : OwnedToken Comments;
/*  45 */ InterfaceToken: 'interface' : OwnedToken Comments;
/*  46 */ InToken: 'in' : OwnedToken Comments;
/*  47 */ LocalparamToken: 'localparam' : OwnedToken Comments;
/*  48 */ LogicToken: 'logic' : OwnedToken Comments;
/*  49 */ ModportToken: 'modport' : OwnedToken Comments;
/*  50 */ ModuleToken: 'module' : OwnedToken Comments;
/*  51 */ NegedgeToken: 'negedge' : OwnedToken Comments;
/*  52 */ OutputToken: 'output' : OwnedToken Comments;
/*  53 */ ParameterToken: 'parameter' : OwnedToken Comments;
/*  54 */ PosedgeToken: 'posedge' : OwnedToken Comments;
/*  55 */ RefToken: 'ref' : OwnedToken Comments;
/*  56 */ ReturnToken: 'return' : OwnedToken Comments;
/*  57 */ SyncHighToken: 'sync_high' : OwnedToken Comments;
/*  58 */ SyncLowToken: 'sync_low' : OwnedToken Comments;
/*  59 */ U32Token: 'u32' : OwnedToken Comments;
/*  60 */ U64Token: 'u64' : OwnedToken Comments;
/*  61 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : OwnedToken Comments;
/*  62 */ Start: StartToken : VerylToken;
/*  63 */ Exponent: ExponentToken : VerylToken;
/*  64 */ FixedPoint: FixedPointToken : VerylToken;
/*  65 */ Based: BasedToken : VerylToken;
/*  66 */ BaseLess: BaseLessToken : VerylToken;
/*  67 */ AllBit: AllBitToken : VerylToken;
/*  68 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/*  69 */ CommonOperator: CommonOperatorToken : VerylToken;
/*  70 */ BinaryOperator: BinaryOperatorToken : VerylToken;
/*  71 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  72 */ Colon: ColonToken : VerylToken;
/*  73 */ ColonColonColon: ColonColonColonToken : VerylToken;
/*  74 */ Comma: CommaToken : VerylToken;
/*  75 */ DotDot: DotDotToken : VerylToken;
/*  76 */ Equ: EquToken : VerylToken;
/*  77 */ Hash: HashToken : VerylToken;
/*  78 */ LBrace: LBraceToken : VerylToken;
/*  79 */ LBracket: LBracketToken : VerylToken;
/*  80 */ LParen: LParenToken : VerylToken;
/*  81 */ MinusGT: MinusGTToken : VerylToken;
/*  82 */ RBrace: RBraceToken : VerylToken;
/*  83 */ RBracket: RBracketToken : VerylToken;
/*  84 */ RParen: RParenToken : VerylToken;
/*  85 */ Semicolon: SemicolonToken : VerylToken;
/*  86 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  87 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  88 */ Assign: AssignToken : VerylToken;
/*  89 */ AsyncHigh: AsyncHighToken : VerylToken;
/*  90 */ AsyncLow: AsyncLowToken : VerylToken;
/*  91 */ Bit: BitToken : VerylToken;
/*  92 */ Else: ElseToken : VerylToken;
/*  93 */ F32: F32Token : VerylToken;
/*  94 */ F64: F64Token : VerylToken;
/*  95 */ For: ForToken : VerylToken;
/*  96 */ Function: FunctionToken : VerylToken;
/*  97 */ I32: I32Token : VerylToken;
/*  98 */ I64: I64Token : VerylToken;
/*  99 */ If: IfToken : VerylToken;
/* 100 */ IfReset: IfResetToken : VerylToken;
/* 101 */ In: InToken : VerylToken;
/* 102 */ Inout: InoutToken : VerylToken;
/* 103 */ Input: InputToken : VerylToken;
/* 104 */ Interface: InterfaceToken : VerylToken;
/* 105 */ Localparam: LocalparamToken : VerylToken;
/* 106 */ Logic: LogicToken : VerylToken;
/* 107 */ Modport: ModportToken : VerylToken;
/* 108 */ Module: ModuleToken : VerylToken;
/* 109 */ Negedge: NegedgeToken : VerylToken;
/* 110 */ Output: OutputToken : VerylToken;
/* 111 */ Parameter: ParameterToken : VerylToken;
/* 112 */ Posedge: PosedgeToken : VerylToken;
/* 113 */ Ref: RefToken : VerylToken;
/* 114 */ Return: ReturnToken : VerylToken;
/* 115 */ SyncHigh: SyncHighToken : VerylToken;
/* 116 */ SyncLow: SyncLowToken : VerylToken;
/* 117 */ U32: U32Token : VerylToken;
/* 118 */ U64: U64Token : VerylToken;
/* 119 */ Identifier: IdentifierToken : VerylToken;
/* 120 */ Number: IntegralNumber;
/* 121 */ Number: RealNumber;
/* 122 */ IntegralNumber: Based;
/* 123 */ IntegralNumber: BaseLess;
/* 124 */ IntegralNumber: AllBit;
/* 125 */ RealNumber: FixedPoint;
/* 126 */ RealNumber: Exponent;
/* 127 */ Expression: Expression1 ExpressionList /* Vec */;
/* 128 */ ExpressionList /* Vec<T>::Push */: ExpressionListGroup Expression1 ExpressionList;
/* 129 */ ExpressionListGroup: BinaryOperator;
/* 130 */ ExpressionListGroup: CommonOperator;
/* 131 */ ExpressionList /* Vec<T>::New */: ;
/* 132 */ Expression1: Expression1Opt /* Option */ Factor;
/* 133 */ Expression1Opt /* Option<T>::Some */: Expression1OptGroup;
/* 134 */ Expression1OptGroup: UnaryOperator;
/* 135 */ Expression1OptGroup: CommonOperator;
/* 136 */ Expression1Opt /* Option<T>::None */: ;
/* 137 */ Factor: Number;
/* 138 */ Factor: Identifier FactorList /* Vec */;
/* 139 */ FactorList /* Vec<T>::Push */: Range FactorList;
/* 140 */ FactorList /* Vec<T>::New */: ;
/* 141 */ Factor: LParen Expression RParen;
/* 142 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 143 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/* 144 */ RangeOpt /* Option<T>::None */: ;
/* 145 */ Width: LBracket Expression RBracket;
/* 146 */ BuiltinType: Logic;
/* 147 */ BuiltinType: Bit;
/* 148 */ BuiltinType: U32;
/* 149 */ BuiltinType: U64;
/* 150 */ BuiltinType: I32;
/* 151 */ BuiltinType: I64;
/* 152 */ BuiltinType: F32;
/* 153 */ BuiltinType: F64;
/* 154 */ Type: TypeGroup TypeList /* Vec */;
/* 155 */ TypeGroup: BuiltinType;
/* 156 */ TypeGroup: Identifier;
/* 157 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 158 */ TypeList /* Vec<T>::New */: ;
/* 159 */ Statement: AssignmentStatement;
/* 160 */ Statement: IfStatement;
/* 161 */ Statement: IfResetStatement;
/* 162 */ Statement: ReturnStatement;
/* 163 */ Statement: ForStatement;
/* 164 */ AssignmentStatement: Identifier AssignmentStatementGroup Expression Semicolon;
/* 165 */ AssignmentStatementGroup: Equ;
/* 166 */ AssignmentStatementGroup: AssignmentOperator;
/* 167 */ IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
/* 168 */ IfStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
/* 169 */ IfStatementList0List /* Vec<T>::Push */: Statement IfStatementList0List;
/* 170 */ IfStatementList0List /* Vec<T>::New */: ;
/* 171 */ IfStatementList0 /* Vec<T>::New */: ;
/* 172 */ IfStatementList /* Vec<T>::Push */: Statement IfStatementList;
/* 173 */ IfStatementList /* Vec<T>::New */: ;
/* 174 */ IfStatementOpt /* Option<T>::Some */: Else LBrace IfStatementOptList /* Vec */ RBrace;
/* 175 */ IfStatementOptList /* Vec<T>::Push */: Statement IfStatementOptList;
/* 176 */ IfStatementOptList /* Vec<T>::New */: ;
/* 177 */ IfStatementOpt /* Option<T>::None */: ;
/* 178 */ IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
/* 179 */ IfResetStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
/* 180 */ IfResetStatementList0List /* Vec<T>::Push */: Statement IfResetStatementList0List;
/* 181 */ IfResetStatementList0List /* Vec<T>::New */: ;
/* 182 */ IfResetStatementList0 /* Vec<T>::New */: ;
/* 183 */ IfResetStatementList /* Vec<T>::Push */: Statement IfResetStatementList;
/* 184 */ IfResetStatementList /* Vec<T>::New */: ;
/* 185 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
/* 186 */ IfResetStatementOptList /* Vec<T>::Push */: Statement IfResetStatementOptList;
/* 187 */ IfResetStatementOptList /* Vec<T>::New */: ;
/* 188 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 189 */ ReturnStatement: Return Expression Semicolon;
/* 190 */ ForStatement: For Identifier Colon Type In Expression DotDot Expression LBrace ForStatementList /* Vec */ RBrace;
/* 191 */ ForStatementList /* Vec<T>::Push */: Statement ForStatementList;
/* 192 */ ForStatementList /* Vec<T>::New */: ;
/* 193 */ VariableDeclaration: Identifier Colon Type Semicolon;
/* 194 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 195 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 196 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 197 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 198 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 199 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 200 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 201 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ Identifier;
/* 202 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 203 */ AlwaysFfClockOptGroup: Posedge;
/* 204 */ AlwaysFfClockOptGroup: Negedge;
/* 205 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 206 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ Identifier;
/* 207 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 208 */ AlwaysFfResetOptGroup: AsyncLow;
/* 209 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 210 */ AlwaysFfResetOptGroup: SyncLow;
/* 211 */ AlwaysFfResetOptGroup: SyncHigh;
/* 212 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 213 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 214 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 215 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 216 */ AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
/* 217 */ AssignDeclarationOpt /* Option<T>::Some */: Colon Type;
/* 218 */ AssignDeclarationOpt /* Option<T>::None */: ;
/* 219 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 220 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 221 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 222 */ ModportListList /* Vec<T>::New */: ;
/* 223 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 224 */ ModportListOpt /* Option<T>::None */: ;
/* 225 */ ModportItem: Identifier Colon Direction;
/* 226 */ Instantiation: Identifier ColonColonColon Identifier InstantiationOpt /* Option */ LBrace InstantiationOpt0 /* Option */ RBrace;
/* 227 */ InstantiationOpt0 /* Option<T>::Some */: InstancePortList;
/* 228 */ InstantiationOpt0 /* Option<T>::None */: ;
/* 229 */ InstantiationOpt /* Option<T>::Some */: InstanceParameter;
/* 230 */ InstantiationOpt /* Option<T>::None */: ;
/* 231 */ InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
/* 232 */ InstanceParameterOpt /* Option<T>::Some */: InstanceParameterList;
/* 233 */ InstanceParameterOpt /* Option<T>::None */: ;
/* 234 */ InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
/* 235 */ InstanceParameterListList /* Vec<T>::Push */: Comma InstanceParameterItem InstanceParameterListList;
/* 236 */ InstanceParameterListList /* Vec<T>::New */: ;
/* 237 */ InstanceParameterListOpt /* Option<T>::Some */: Comma;
/* 238 */ InstanceParameterListOpt /* Option<T>::None */: ;
/* 239 */ InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
/* 240 */ InstanceParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 241 */ InstanceParameterItemOpt /* Option<T>::None */: ;
/* 242 */ InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
/* 243 */ InstancePortListList /* Vec<T>::Push */: Comma InstancePortItem InstancePortListList;
/* 244 */ InstancePortListList /* Vec<T>::New */: ;
/* 245 */ InstancePortListOpt /* Option<T>::Some */: Comma;
/* 246 */ InstancePortListOpt /* Option<T>::None */: ;
/* 247 */ InstancePortItem: Identifier InstancePortItemOpt /* Option */;
/* 248 */ InstancePortItemOpt /* Option<T>::Some */: Colon Expression;
/* 249 */ InstancePortItemOpt /* Option<T>::None */: ;
/* 250 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 251 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 252 */ WithParameterOpt /* Option<T>::None */: ;
/* 253 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 254 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 255 */ WithParameterListList /* Vec<T>::New */: ;
/* 256 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 257 */ WithParameterListOpt /* Option<T>::None */: ;
/* 258 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 259 */ WithParameterItemGroup: Parameter;
/* 260 */ WithParameterItemGroup: Localparam;
/* 261 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 262 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 263 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 264 */ PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 265 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationItem PortDeclarationListList;
/* 266 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 267 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 268 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 269 */ PortDeclarationItem: Identifier Colon Direction Type;
/* 270 */ Direction: Input;
/* 271 */ Direction: Output;
/* 272 */ Direction: Inout;
/* 273 */ Direction: Ref;
/* 274 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
/* 275 */ FunctionDeclarationList /* Vec<T>::Push */: FunctionItem FunctionDeclarationList;
/* 276 */ FunctionDeclarationList /* Vec<T>::New */: ;
/* 277 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 278 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 279 */ FunctionDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 280 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 281 */ FunctionItem: VariableDeclaration;
/* 282 */ FunctionItem: Statement;
/* 283 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 284 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 285 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 286 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 287 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 288 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 289 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 290 */ ModuleItem: VariableDeclaration;
/* 291 */ ModuleItem: ParameterDeclaration;
/* 292 */ ModuleItem: LocalparamDeclaration;
/* 293 */ ModuleItem: AlwaysFfDeclaration;
/* 294 */ ModuleItem: AlwaysCombDeclaration;
/* 295 */ ModuleItem: AssignDeclaration;
/* 296 */ ModuleItem: Instantiation;
/* 297 */ ModuleItem: FunctionDeclaration;
/* 298 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 299 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 300 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 301 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 302 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 303 */ InterfaceItem: VariableDeclaration;
/* 304 */ InterfaceItem: ParameterDeclaration;
/* 305 */ InterfaceItem: LocalparamDeclaration;
/* 306 */ InterfaceItem: ModportDeclaration;
/* 307 */ Description: ModuleDeclaration;
/* 308 */ Description: InterfaceDeclaration;
/* 309 */ Veryl: Start VerylList /* Vec */;
/* 310 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 311 */ VerylList /* Vec<T>::New */: ;
