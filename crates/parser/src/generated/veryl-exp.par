%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type OwnedToken = crate::veryl_token::OwnedToken
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : OwnedToken;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   6 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   7 */ BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : OwnedToken Comments;
/*   8 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   9 */ AllBitToken: /'[01]/ : OwnedToken Comments;
/*  10 */ MinusGTToken: '->' : OwnedToken Comments;
/*  11 */ AssignmentOperatorToken: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : OwnedToken Comments;
/*  12 */ BinaryOperatorToken: "\*\*|\*|/|%|<<<|>>>|<<|>>|<=|>=|<|>|===|==\?|!==|!=\?|==|!=|&&|\|\|" : OwnedToken Comments;
/*  13 */ CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" : OwnedToken Comments;
/*  14 */ UnaryOperatorToken: "!|~" : OwnedToken Comments;
/*  15 */ ColonToken: ':' : OwnedToken Comments;
/*  16 */ CommaToken: ',' : OwnedToken Comments;
/*  17 */ DollarToken: '$' : OwnedToken Comments;
/*  18 */ DotDotToken: '..' : OwnedToken Comments;
/*  19 */ EquToken: '=' : OwnedToken Comments;
/*  20 */ HashToken: '#' : OwnedToken Comments;
/*  21 */ LBraceToken: '{' : OwnedToken Comments;
/*  22 */ LBracketToken: '[' : OwnedToken Comments;
/*  23 */ LParenToken: '(' : OwnedToken Comments;
/*  24 */ RBraceToken: '}' : OwnedToken Comments;
/*  25 */ RBracketToken: ']' : OwnedToken Comments;
/*  26 */ RParenToken: ')' : OwnedToken Comments;
/*  27 */ SemicolonToken: ';' : OwnedToken Comments;
/*  28 */ AlwaysCombToken: /\balways_comb\b/ : OwnedToken Comments;
/*  29 */ AlwaysFfToken: /\balways_ff\b/ : OwnedToken Comments;
/*  30 */ AssignToken: /\bassign\b/ : OwnedToken Comments;
/*  31 */ AsyncHighToken: /\basync_high\b/ : OwnedToken Comments;
/*  32 */ AsyncLowToken: /\basync_low\b/ : OwnedToken Comments;
/*  33 */ BitToken: /\bbit\b/ : OwnedToken Comments;
/*  34 */ ElseToken: /\belse\b/ : OwnedToken Comments;
/*  35 */ EnumToken: /\benum\b/ : OwnedToken Comments;
/*  36 */ F32Token: /\bf32\b/ : OwnedToken Comments;
/*  37 */ F64Token: /\bf64\b/ : OwnedToken Comments;
/*  38 */ ForToken: /\bfor\b/ : OwnedToken Comments;
/*  39 */ FunctionToken: /\bfunction\b/ : OwnedToken Comments;
/*  40 */ I32Token: /\bi32\b/ : OwnedToken Comments;
/*  41 */ I64Token: /\bi64\b/ : OwnedToken Comments;
/*  42 */ IfResetToken: /\bif_reset\b/ : OwnedToken Comments;
/*  43 */ IfToken: /\bif\b/ : OwnedToken Comments;
/*  44 */ InoutToken: /\binout\b/ : OwnedToken Comments;
/*  45 */ InputToken: /\binput\b/ : OwnedToken Comments;
/*  46 */ InstToken: /\binst\b/ : OwnedToken Comments;
/*  47 */ InterfaceToken: /\binterface\b/ : OwnedToken Comments;
/*  48 */ InToken: /\bin\b/ : OwnedToken Comments;
/*  49 */ LetToken: /\blet\b/ : OwnedToken Comments;
/*  50 */ LocalparamToken: /\blocalparam\b/ : OwnedToken Comments;
/*  51 */ LogicToken: /\blogic\b/ : OwnedToken Comments;
/*  52 */ ModportToken: /\bmodport\b/ : OwnedToken Comments;
/*  53 */ ModuleToken: /\bmodule\b/ : OwnedToken Comments;
/*  54 */ NegedgeToken: /\bnegedge\b/ : OwnedToken Comments;
/*  55 */ OutputToken: /\boutput\b/ : OwnedToken Comments;
/*  56 */ ParameterToken: /\bparameter\b/ : OwnedToken Comments;
/*  57 */ PosedgeToken: /\bposedge\b/ : OwnedToken Comments;
/*  58 */ RefToken: /\bref\b/ : OwnedToken Comments;
/*  59 */ ReturnToken: /\breturn\b/ : OwnedToken Comments;
/*  60 */ StepToken: /\bstep\b/ : OwnedToken Comments;
/*  61 */ StructToken: /\bstruct\b/ : OwnedToken Comments;
/*  62 */ SyncHighToken: /\bsync_high\b/ : OwnedToken Comments;
/*  63 */ SyncLowToken: /\bsync_low\b/ : OwnedToken Comments;
/*  64 */ U32Token: /\bu32\b/ : OwnedToken Comments;
/*  65 */ U64Token: /\bu64\b/ : OwnedToken Comments;
/*  66 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : OwnedToken Comments;
/*  67 */ Start: StartToken : VerylToken;
/*  68 */ Exponent: ExponentToken : VerylToken;
/*  69 */ FixedPoint: FixedPointToken : VerylToken;
/*  70 */ Based: BasedToken : VerylToken;
/*  71 */ BaseLess: BaseLessToken : VerylToken;
/*  72 */ AllBit: AllBitToken : VerylToken;
/*  73 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/*  74 */ CommonOperator: CommonOperatorToken : VerylToken;
/*  75 */ BinaryOperator: BinaryOperatorToken : VerylToken;
/*  76 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  77 */ Colon: ColonToken : VerylToken;
/*  78 */ Comma: CommaToken : VerylToken;
/*  79 */ Dollar: DollarToken : VerylToken;
/*  80 */ DotDot: DotDotToken : VerylToken;
/*  81 */ Equ: EquToken : VerylToken;
/*  82 */ Hash: HashToken : VerylToken;
/*  83 */ LBrace: LBraceToken : VerylToken;
/*  84 */ LBracket: LBracketToken : VerylToken;
/*  85 */ LParen: LParenToken : VerylToken;
/*  86 */ MinusGT: MinusGTToken : VerylToken;
/*  87 */ RBrace: RBraceToken : VerylToken;
/*  88 */ RBracket: RBracketToken : VerylToken;
/*  89 */ RParen: RParenToken : VerylToken;
/*  90 */ Semicolon: SemicolonToken : VerylToken;
/*  91 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  92 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  93 */ Assign: AssignToken : VerylToken;
/*  94 */ AsyncHigh: AsyncHighToken : VerylToken;
/*  95 */ AsyncLow: AsyncLowToken : VerylToken;
/*  96 */ Bit: BitToken : VerylToken;
/*  97 */ Else: ElseToken : VerylToken;
/*  98 */ Enum: EnumToken : VerylToken;
/*  99 */ F32: F32Token : VerylToken;
/* 100 */ F64: F64Token : VerylToken;
/* 101 */ For: ForToken : VerylToken;
/* 102 */ Function: FunctionToken : VerylToken;
/* 103 */ I32: I32Token : VerylToken;
/* 104 */ I64: I64Token : VerylToken;
/* 105 */ If: IfToken : VerylToken;
/* 106 */ IfReset: IfResetToken : VerylToken;
/* 107 */ In: InToken : VerylToken;
/* 108 */ Inout: InoutToken : VerylToken;
/* 109 */ Input: InputToken : VerylToken;
/* 110 */ Inst: InstToken : VerylToken;
/* 111 */ Interface: InterfaceToken : VerylToken;
/* 112 */ Let: LetToken : VerylToken;
/* 113 */ Localparam: LocalparamToken : VerylToken;
/* 114 */ Logic: LogicToken : VerylToken;
/* 115 */ Modport: ModportToken : VerylToken;
/* 116 */ Module: ModuleToken : VerylToken;
/* 117 */ Negedge: NegedgeToken : VerylToken;
/* 118 */ Output: OutputToken : VerylToken;
/* 119 */ Parameter: ParameterToken : VerylToken;
/* 120 */ Posedge: PosedgeToken : VerylToken;
/* 121 */ Ref: RefToken : VerylToken;
/* 122 */ Return: ReturnToken : VerylToken;
/* 123 */ Step: StepToken : VerylToken;
/* 124 */ Struct: StructToken : VerylToken;
/* 125 */ SyncHigh: SyncHighToken : VerylToken;
/* 126 */ SyncLow: SyncLowToken : VerylToken;
/* 127 */ U32: U32Token : VerylToken;
/* 128 */ U64: U64Token : VerylToken;
/* 129 */ Identifier: IdentifierToken : VerylToken;
/* 130 */ Number: IntegralNumber;
/* 131 */ Number: RealNumber;
/* 132 */ IntegralNumber: Based;
/* 133 */ IntegralNumber: BaseLess;
/* 134 */ IntegralNumber: AllBit;
/* 135 */ RealNumber: FixedPoint;
/* 136 */ RealNumber: Exponent;
/* 137 */ Expression: Expression1 ExpressionList /* Vec */;
/* 138 */ ExpressionList /* Vec<T>::Push */: ExpressionListGroup Expression1 ExpressionList;
/* 139 */ ExpressionListGroup: BinaryOperator;
/* 140 */ ExpressionListGroup: CommonOperator;
/* 141 */ ExpressionList /* Vec<T>::New */: ;
/* 142 */ Expression1: Expression1Opt /* Option */ Factor;
/* 143 */ Expression1Opt /* Option<T>::Some */: Expression1OptGroup;
/* 144 */ Expression1OptGroup: UnaryOperator;
/* 145 */ Expression1OptGroup: CommonOperator;
/* 146 */ Expression1Opt /* Option<T>::None */: ;
/* 147 */ Factor: Number;
/* 148 */ Factor: Identifier FactorList /* Vec */;
/* 149 */ FactorList /* Vec<T>::Push */: Range FactorList;
/* 150 */ FactorList /* Vec<T>::New */: ;
/* 151 */ Factor: LParen Expression RParen;
/* 152 */ Factor: FunctionCall;
/* 153 */ FunctionCall: FunctionCallOpt /* Option */ Identifier LParen FunctionCallOpt0 /* Option */ RParen;
/* 154 */ FunctionCallOpt0 /* Option<T>::Some */: FunctionCallArg;
/* 155 */ FunctionCallOpt0 /* Option<T>::None */: ;
/* 156 */ FunctionCallOpt /* Option<T>::Some */: Dollar;
/* 157 */ FunctionCallOpt /* Option<T>::None */: ;
/* 158 */ FunctionCallArg: Expression FunctionCallArgList /* Vec */ FunctionCallArgOpt /* Option */;
/* 159 */ FunctionCallArgList /* Vec<T>::Push */: Comma Expression FunctionCallArgList;
/* 160 */ FunctionCallArgList /* Vec<T>::New */: ;
/* 161 */ FunctionCallArgOpt /* Option<T>::Some */: Comma;
/* 162 */ FunctionCallArgOpt /* Option<T>::None */: ;
/* 163 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 164 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/* 165 */ RangeOpt /* Option<T>::None */: ;
/* 166 */ Width: LBracket Expression RBracket;
/* 167 */ BuiltinType: Logic;
/* 168 */ BuiltinType: Bit;
/* 169 */ BuiltinType: U32;
/* 170 */ BuiltinType: U64;
/* 171 */ BuiltinType: I32;
/* 172 */ BuiltinType: I64;
/* 173 */ BuiltinType: F32;
/* 174 */ BuiltinType: F64;
/* 175 */ Type: TypeGroup TypeList /* Vec */;
/* 176 */ TypeGroup: BuiltinType;
/* 177 */ TypeGroup: Identifier;
/* 178 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 179 */ TypeList /* Vec<T>::New */: ;
/* 180 */ Statement: AssignmentStatement;
/* 181 */ Statement: IfStatement;
/* 182 */ Statement: IfResetStatement;
/* 183 */ Statement: ReturnStatement;
/* 184 */ Statement: ForStatement;
/* 185 */ AssignmentStatement: Identifier AssignmentStatementGroup Expression Semicolon;
/* 186 */ AssignmentStatementGroup: Equ;
/* 187 */ AssignmentStatementGroup: AssignmentOperator;
/* 188 */ IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
/* 189 */ IfStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
/* 190 */ IfStatementList0List /* Vec<T>::Push */: Statement IfStatementList0List;
/* 191 */ IfStatementList0List /* Vec<T>::New */: ;
/* 192 */ IfStatementList0 /* Vec<T>::New */: ;
/* 193 */ IfStatementList /* Vec<T>::Push */: Statement IfStatementList;
/* 194 */ IfStatementList /* Vec<T>::New */: ;
/* 195 */ IfStatementOpt /* Option<T>::Some */: Else LBrace IfStatementOptList /* Vec */ RBrace;
/* 196 */ IfStatementOptList /* Vec<T>::Push */: Statement IfStatementOptList;
/* 197 */ IfStatementOptList /* Vec<T>::New */: ;
/* 198 */ IfStatementOpt /* Option<T>::None */: ;
/* 199 */ IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
/* 200 */ IfResetStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
/* 201 */ IfResetStatementList0List /* Vec<T>::Push */: Statement IfResetStatementList0List;
/* 202 */ IfResetStatementList0List /* Vec<T>::New */: ;
/* 203 */ IfResetStatementList0 /* Vec<T>::New */: ;
/* 204 */ IfResetStatementList /* Vec<T>::Push */: Statement IfResetStatementList;
/* 205 */ IfResetStatementList /* Vec<T>::New */: ;
/* 206 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
/* 207 */ IfResetStatementOptList /* Vec<T>::Push */: Statement IfResetStatementOptList;
/* 208 */ IfResetStatementOptList /* Vec<T>::New */: ;
/* 209 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 210 */ ReturnStatement: Return Expression Semicolon;
/* 211 */ ForStatement: For Identifier Colon Type In Expression DotDot Expression ForStatementOpt /* Option */ LBrace ForStatementList /* Vec */ RBrace;
/* 212 */ ForStatementList /* Vec<T>::Push */: Statement ForStatementList;
/* 213 */ ForStatementList /* Vec<T>::New */: ;
/* 214 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 215 */ ForStatementOpt /* Option<T>::None */: ;
/* 216 */ LetDeclaration: Let Identifier Colon LetDeclarationGroup Semicolon;
/* 217 */ LetDeclarationGroup: VariableDeclaration;
/* 218 */ LetDeclarationGroup: InstanceDeclaration;
/* 219 */ VariableDeclaration: Type VariableDeclarationOpt /* Option */;
/* 220 */ VariableDeclarationOpt /* Option<T>::Some */: Equ Expression;
/* 221 */ VariableDeclarationOpt /* Option<T>::None */: ;
/* 222 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 223 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 224 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 225 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 226 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 227 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 228 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 229 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ Identifier;
/* 230 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 231 */ AlwaysFfClockOptGroup: Posedge;
/* 232 */ AlwaysFfClockOptGroup: Negedge;
/* 233 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 234 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ Identifier;
/* 235 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 236 */ AlwaysFfResetOptGroup: AsyncLow;
/* 237 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 238 */ AlwaysFfResetOptGroup: SyncLow;
/* 239 */ AlwaysFfResetOptGroup: SyncHigh;
/* 240 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 241 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 242 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 243 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 244 */ AssignDeclaration: Assign Identifier Equ Expression Semicolon;
/* 245 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 246 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 247 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 248 */ ModportListList /* Vec<T>::New */: ;
/* 249 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 250 */ ModportListOpt /* Option<T>::None */: ;
/* 251 */ ModportItem: Identifier Colon Direction;
/* 252 */ EnumDeclaration: Enum Identifier Colon Type LBrace EnumList RBrace;
/* 253 */ EnumList: EnumItem EnumListList /* Vec */ EnumListOpt /* Option */;
/* 254 */ EnumListList /* Vec<T>::Push */: Comma EnumItem EnumListList;
/* 255 */ EnumListList /* Vec<T>::New */: ;
/* 256 */ EnumListOpt /* Option<T>::Some */: Comma;
/* 257 */ EnumListOpt /* Option<T>::None */: ;
/* 258 */ EnumItem: Identifier EnumItemOpt /* Option */;
/* 259 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/* 260 */ EnumItemOpt /* Option<T>::None */: ;
/* 261 */ StructDeclaration: Struct Identifier LBrace StructList RBrace;
/* 262 */ StructList: StructItem StructListList /* Vec */ StructListOpt /* Option */;
/* 263 */ StructListList /* Vec<T>::Push */: Comma StructItem StructListList;
/* 264 */ StructListList /* Vec<T>::New */: ;
/* 265 */ StructListOpt /* Option<T>::Some */: Comma;
/* 266 */ StructListOpt /* Option<T>::None */: ;
/* 267 */ StructItem: Identifier Colon Type;
/* 268 */ InstanceDeclaration: Inst Identifier InstanceDeclarationOpt /* Option */ InstanceDeclarationOpt0 /* Option */ InstanceDeclarationOpt1 /* Option */;
/* 269 */ InstanceDeclarationOpt1 /* Option<T>::Some */: LBrace InstanceDeclarationOpt2 /* Option */ RBrace;
/* 270 */ InstanceDeclarationOpt2 /* Option<T>::Some */: InstancePortList;
/* 271 */ InstanceDeclarationOpt2 /* Option<T>::None */: ;
/* 272 */ InstanceDeclarationOpt1 /* Option<T>::None */: ;
/* 273 */ InstanceDeclarationOpt0 /* Option<T>::Some */: InstanceParameter;
/* 274 */ InstanceDeclarationOpt0 /* Option<T>::None */: ;
/* 275 */ InstanceDeclarationOpt /* Option<T>::Some */: Width;
/* 276 */ InstanceDeclarationOpt /* Option<T>::None */: ;
/* 277 */ InstanceParameter: Hash LParen InstanceParameterOpt /* Option */ RParen;
/* 278 */ InstanceParameterOpt /* Option<T>::Some */: InstanceParameterList;
/* 279 */ InstanceParameterOpt /* Option<T>::None */: ;
/* 280 */ InstanceParameterList: InstanceParameterItem InstanceParameterListList /* Vec */ InstanceParameterListOpt /* Option */;
/* 281 */ InstanceParameterListList /* Vec<T>::Push */: Comma InstanceParameterItem InstanceParameterListList;
/* 282 */ InstanceParameterListList /* Vec<T>::New */: ;
/* 283 */ InstanceParameterListOpt /* Option<T>::Some */: Comma;
/* 284 */ InstanceParameterListOpt /* Option<T>::None */: ;
/* 285 */ InstanceParameterItem: Identifier InstanceParameterItemOpt /* Option */;
/* 286 */ InstanceParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 287 */ InstanceParameterItemOpt /* Option<T>::None */: ;
/* 288 */ InstancePortList: InstancePortItem InstancePortListList /* Vec */ InstancePortListOpt /* Option */;
/* 289 */ InstancePortListList /* Vec<T>::Push */: Comma InstancePortItem InstancePortListList;
/* 290 */ InstancePortListList /* Vec<T>::New */: ;
/* 291 */ InstancePortListOpt /* Option<T>::Some */: Comma;
/* 292 */ InstancePortListOpt /* Option<T>::None */: ;
/* 293 */ InstancePortItem: Identifier InstancePortItemOpt /* Option */;
/* 294 */ InstancePortItemOpt /* Option<T>::Some */: Colon Expression;
/* 295 */ InstancePortItemOpt /* Option<T>::None */: ;
/* 296 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 297 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 298 */ WithParameterOpt /* Option<T>::None */: ;
/* 299 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 300 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 301 */ WithParameterListList /* Vec<T>::New */: ;
/* 302 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 303 */ WithParameterListOpt /* Option<T>::None */: ;
/* 304 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 305 */ WithParameterItemGroup: Parameter;
/* 306 */ WithParameterItemGroup: Localparam;
/* 307 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 308 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 309 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 310 */ PortDeclarationList: PortDeclarationItem PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 311 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationItem PortDeclarationListList;
/* 312 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 313 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 314 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 315 */ PortDeclarationItem: Identifier Colon Direction Type;
/* 316 */ Direction: Input;
/* 317 */ Direction: Output;
/* 318 */ Direction: Inout;
/* 319 */ Direction: Ref;
/* 320 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT Type LBrace FunctionDeclarationList /* Vec */ RBrace;
/* 321 */ FunctionDeclarationList /* Vec<T>::Push */: FunctionItem FunctionDeclarationList;
/* 322 */ FunctionDeclarationList /* Vec<T>::New */: ;
/* 323 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 324 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 325 */ FunctionDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 326 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 327 */ FunctionItem: LetDeclaration;
/* 328 */ FunctionItem: Statement;
/* 329 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 330 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 331 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 332 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 333 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 334 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 335 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 336 */ ModuleIfDeclaration: If Expression Colon Identifier LBrace ModuleIfDeclarationList /* Vec */ RBrace ModuleIfDeclarationList0 /* Vec */ ModuleIfDeclarationOpt0 /* Option */;
/* 337 */ ModuleIfDeclarationList0 /* Vec<T>::Push */: Else If Expression ModuleIfDeclarationOpt /* Option */ LBrace ModuleIfDeclarationList0List /* Vec */ RBrace ModuleIfDeclarationList0;
/* 338 */ ModuleIfDeclarationList0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList0List;
/* 339 */ ModuleIfDeclarationList0List /* Vec<T>::New */: ;
/* 340 */ ModuleIfDeclarationList0 /* Vec<T>::New */: ;
/* 341 */ ModuleIfDeclarationList /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationList;
/* 342 */ ModuleIfDeclarationList /* Vec<T>::New */: ;
/* 343 */ ModuleIfDeclarationOpt0 /* Option<T>::Some */: Else ModuleIfDeclarationOpt1 /* Option */ LBrace ModuleIfDeclarationOpt0List /* Vec */ RBrace;
/* 344 */ ModuleIfDeclarationOpt0List /* Vec<T>::Push */: ModuleItem ModuleIfDeclarationOpt0List;
/* 345 */ ModuleIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 346 */ ModuleIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 347 */ ModuleIfDeclarationOpt1 /* Option<T>::None */: ;
/* 348 */ ModuleIfDeclarationOpt0 /* Option<T>::None */: ;
/* 349 */ ModuleIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 350 */ ModuleIfDeclarationOpt /* Option<T>::None */: ;
/* 351 */ ModuleForDeclaration: For Identifier In Expression DotDot Expression ModuleForDeclarationOpt /* Option */ Colon Identifier LBrace ModuleForDeclarationList /* Vec */ RBrace;
/* 352 */ ModuleForDeclarationList /* Vec<T>::Push */: ModuleItem ModuleForDeclarationList;
/* 353 */ ModuleForDeclarationList /* Vec<T>::New */: ;
/* 354 */ ModuleForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 355 */ ModuleForDeclarationOpt /* Option<T>::None */: ;
/* 356 */ ModuleItem: LetDeclaration;
/* 357 */ ModuleItem: ParameterDeclaration;
/* 358 */ ModuleItem: LocalparamDeclaration;
/* 359 */ ModuleItem: AlwaysFfDeclaration;
/* 360 */ ModuleItem: AlwaysCombDeclaration;
/* 361 */ ModuleItem: AssignDeclaration;
/* 362 */ ModuleItem: FunctionDeclaration;
/* 363 */ ModuleItem: ModuleIfDeclaration;
/* 364 */ ModuleItem: ModuleForDeclaration;
/* 365 */ ModuleItem: EnumDeclaration;
/* 366 */ ModuleItem: StructDeclaration;
/* 367 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 368 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 369 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 370 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 371 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 372 */ InterfaceIfDeclaration: If Expression Colon Identifier LBrace InterfaceIfDeclarationList /* Vec */ RBrace InterfaceIfDeclarationList0 /* Vec */ InterfaceIfDeclarationOpt0 /* Option */;
/* 373 */ InterfaceIfDeclarationList0 /* Vec<T>::Push */: Else If Expression InterfaceIfDeclarationOpt /* Option */ LBrace InterfaceIfDeclarationList0List /* Vec */ RBrace InterfaceIfDeclarationList0;
/* 374 */ InterfaceIfDeclarationList0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList0List;
/* 375 */ InterfaceIfDeclarationList0List /* Vec<T>::New */: ;
/* 376 */ InterfaceIfDeclarationList0 /* Vec<T>::New */: ;
/* 377 */ InterfaceIfDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationList;
/* 378 */ InterfaceIfDeclarationList /* Vec<T>::New */: ;
/* 379 */ InterfaceIfDeclarationOpt0 /* Option<T>::Some */: Else InterfaceIfDeclarationOpt1 /* Option */ LBrace InterfaceIfDeclarationOpt0List /* Vec */ RBrace;
/* 380 */ InterfaceIfDeclarationOpt0List /* Vec<T>::Push */: InterfaceItem InterfaceIfDeclarationOpt0List;
/* 381 */ InterfaceIfDeclarationOpt0List /* Vec<T>::New */: ;
/* 382 */ InterfaceIfDeclarationOpt1 /* Option<T>::Some */: Colon Identifier;
/* 383 */ InterfaceIfDeclarationOpt1 /* Option<T>::None */: ;
/* 384 */ InterfaceIfDeclarationOpt0 /* Option<T>::None */: ;
/* 385 */ InterfaceIfDeclarationOpt /* Option<T>::Some */: Colon Identifier;
/* 386 */ InterfaceIfDeclarationOpt /* Option<T>::None */: ;
/* 387 */ InterfaceForDeclaration: For Identifier In Expression DotDot Expression InterfaceForDeclarationOpt /* Option */ Colon Identifier LBrace InterfaceForDeclarationList /* Vec */ RBrace;
/* 388 */ InterfaceForDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceForDeclarationList;
/* 389 */ InterfaceForDeclarationList /* Vec<T>::New */: ;
/* 390 */ InterfaceForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 391 */ InterfaceForDeclarationOpt /* Option<T>::None */: ;
/* 392 */ InterfaceItem: LetDeclaration;
/* 393 */ InterfaceItem: ParameterDeclaration;
/* 394 */ InterfaceItem: LocalparamDeclaration;
/* 395 */ InterfaceItem: ModportDeclaration;
/* 396 */ InterfaceItem: InterfaceIfDeclaration;
/* 397 */ InterfaceItem: InterfaceForDeclaration;
/* 398 */ InterfaceItem: EnumDeclaration;
/* 399 */ InterfaceItem: StructDeclaration;
/* 400 */ Description: ModuleDeclaration;
/* 401 */ Description: InterfaceDeclaration;
/* 402 */ Veryl: Start VerylList /* Vec */;
/* 403 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 404 */ VerylList /* Vec<T>::New */: ;
