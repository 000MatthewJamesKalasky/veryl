%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type Token = crate::veryl_token::Token
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ CommentsTerm: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : Token;
/*   1 */ StringLiteralTerm: "\u{0022}(?:\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}" : Token;
/*   2 */ ExponentTerm: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : Token;
/*   3 */ FixedPointTerm: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : Token;
/*   4 */ BasedTerm: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : Token;
/*   5 */ BaseLessTerm: /[0-9]+(?:_[0-9]+)*/ : Token;
/*   6 */ AllBitTerm: /'[01xzXZ]/ : Token;
/*   7 */ MinusColonTerm: '-:' : Token;
/*   8 */ MinusGTTerm: '->' : Token;
/*   9 */ PlusColonTerm: '+:' : Token;
/*  10 */ AssignmentOperatorTerm: "\+=|-=|\*=|/=|%=|&=|\|=|\^=|<<=|>>=|<<<=|>>>=" : Token;
/*  11 */ Operator11Term: "\*\*" : Token;
/*  12 */ Operator10Term: "/|%" : Token;
/*  13 */ Operator09Term: "\+|-" : Token;
/*  14 */ Operator08Term: "<<<|>>>|<<|>>" : Token;
/*  15 */ Operator07Term: "<=|>=|<:|>:" : Token;
/*  16 */ Operator06Term: "===|==\?|!==|!=\?|==|!=" : Token;
/*  17 */ Operator02Term: "&&" : Token;
/*  18 */ Operator01Term: "\|\|" : Token;
/*  19 */ Operator05Term: "&" : Token;
/*  20 */ Operator04Term: "\^~|\^|~\^" : Token;
/*  21 */ Operator03Term: "\|" : Token;
/*  22 */ UnaryOperatorTerm: "~&|~\||!|~" : Token;
/*  23 */ ColonColonTerm: '::' : Token;
/*  24 */ ColonTerm: ':' : Token;
/*  25 */ CommaTerm: ',' : Token;
/*  26 */ DollarTerm: '$' : Token;
/*  27 */ DotDotEquTerm: '..=' : Token;
/*  28 */ DotDotTerm: '..' : Token;
/*  29 */ DotTerm: '.' : Token;
/*  30 */ EquTerm: '=' : Token;
/*  31 */ HashTerm: '#' : Token;
/*  32 */ LAngleTerm: '<' : Token;
/*  33 */ LBraceTerm: '{' : Token;
/*  34 */ LBracketTerm: '[' : Token;
/*  35 */ LParenTerm: '(' : Token;
/*  36 */ RAngleTerm: '>' : Token;
/*  37 */ RBraceTerm: '}' : Token;
/*  38 */ RBracketTerm: ']' : Token;
/*  39 */ RParenTerm: ')' : Token;
/*  40 */ SemicolonTerm: ';' : Token;
/*  41 */ StarTerm: '*' : Token;
/*  42 */ AlwaysCombTerm: /(?-u:\b)always_comb(?-u:\b)/ : Token;
/*  43 */ AlwaysFfTerm: /(?-u:\b)always_ff(?-u:\b)/ : Token;
/*  44 */ AssignTerm: /(?-u:\b)assign(?-u:\b)/ : Token;
/*  45 */ AsyncHighTerm: /(?-u:\b)async_high(?-u:\b)/ : Token;
/*  46 */ AsyncLowTerm: /(?-u:\b)async_low(?-u:\b)/ : Token;
/*  47 */ AsTerm: /(?-u:\b)as(?-u:\b)/ : Token;
/*  48 */ BitTerm: /(?-u:\b)bit(?-u:\b)/ : Token;
/*  49 */ CaseTerm: /(?-u:\b)case(?-u:\b)/ : Token;
/*  50 */ DefaultTerm: /(?-u:\b)default(?-u:\b)/ : Token;
/*  51 */ ElseTerm: /(?-u:\b)else(?-u:\b)/ : Token;
/*  52 */ EnumTerm: /(?-u:\b)enum(?-u:\b)/ : Token;
/*  53 */ ExportTerm: /(?-u:\b)export(?-u:\b)/ : Token;
/*  54 */ F32Term: /(?-u:\b)f32(?-u:\b)/ : Token;
/*  55 */ F64Term: /(?-u:\b)f64(?-u:\b)/ : Token;
/*  56 */ FinalTerm: /(?-u:\b)final(?-u:\b)/ : Token;
/*  57 */ ForTerm: /(?-u:\b)for(?-u:\b)/ : Token;
/*  58 */ FunctionTerm: /(?-u:\b)function(?-u:\b)/ : Token;
/*  59 */ I32Term: /(?-u:\b)i32(?-u:\b)/ : Token;
/*  60 */ I64Term: /(?-u:\b)i64(?-u:\b)/ : Token;
/*  61 */ IfResetTerm: /(?-u:\b)if_reset(?-u:\b)/ : Token;
/*  62 */ IfTerm: /(?-u:\b)if(?-u:\b)/ : Token;
/*  63 */ ImportTerm: /(?-u:\b)import(?-u:\b)/ : Token;
/*  64 */ InitialTerm: /(?-u:\b)initial(?-u:\b)/ : Token;
/*  65 */ InoutTerm: /(?-u:\b)inout(?-u:\b)/ : Token;
/*  66 */ InputTerm: /(?-u:\b)input(?-u:\b)/ : Token;
/*  67 */ InstTerm: /(?-u:\b)inst(?-u:\b)/ : Token;
/*  68 */ InterfaceTerm: /(?-u:\b)interface(?-u:\b)/ : Token;
/*  69 */ InTerm: /(?-u:\b)in(?-u:\b)/ : Token;
/*  70 */ LocalparamTerm: /(?-u:\b)localparam(?-u:\b)/ : Token;
/*  71 */ LogicTerm: /(?-u:\b)logic(?-u:\b)/ : Token;
/*  72 */ LsbTerm: /(?-u:\b)lsb(?-u:\b)/ : Token;
/*  73 */ ModportTerm: /(?-u:\b)modport(?-u:\b)/ : Token;
/*  74 */ ModuleTerm: /(?-u:\b)module(?-u:\b)/ : Token;
/*  75 */ MsbTerm: /(?-u:\b)msb(?-u:\b)/ : Token;
/*  76 */ NegedgeTerm: /(?-u:\b)negedge(?-u:\b)/ : Token;
/*  77 */ OutputTerm: /(?-u:\b)output(?-u:\b)/ : Token;
/*  78 */ PackageTerm: /(?-u:\b)package(?-u:\b)/ : Token;
/*  79 */ ParameterTerm: /(?-u:\b)parameter(?-u:\b)/ : Token;
/*  80 */ PosedgeTerm: /(?-u:\b)posedge(?-u:\b)/ : Token;
/*  81 */ RefTerm: /(?-u:\b)ref(?-u:\b)/ : Token;
/*  82 */ RepeatTerm: /(?-u:\b)repeat(?-u:\b)/ : Token;
/*  83 */ ReturnTerm: /(?-u:\b)return(?-u:\b)/ : Token;
/*  84 */ SignedTerm: /(?-u:\b)signed(?-u:\b)/ : Token;
/*  85 */ StepTerm: /(?-u:\b)step(?-u:\b)/ : Token;
/*  86 */ StringTerm: /(?-u:\b)string(?-u:\b)/ : Token;
/*  87 */ StructTerm: /(?-u:\b)struct(?-u:\b)/ : Token;
/*  88 */ SyncHighTerm: /(?-u:\b)sync_high(?-u:\b)/ : Token;
/*  89 */ SyncLowTerm: /(?-u:\b)sync_low(?-u:\b)/ : Token;
/*  90 */ TriTerm: /(?-u:\b)tri(?-u:\b)/ : Token;
/*  91 */ TypeTerm: /(?-u:\b)type(?-u:\b)/ : Token;
/*  92 */ U32Term: /(?-u:\b)u32(?-u:\b)/ : Token;
/*  93 */ U64Term: /(?-u:\b)u64(?-u:\b)/ : Token;
/*  94 */ VarTerm: /(?-u:\b)var(?-u:\b)/ : Token;
/*  95 */ IdentifierTerm: /[a-zA-Z_][0-9a-zA-Z_]*/ : Token;
/*  96 */ Comments: CommentsOpt /* Option */;
/*  97 */ CommentsOpt /* Option<T>::Some */: CommentsTerm;
/*  98 */ CommentsOpt /* Option<T>::None */: ;
/*  99 */ StartToken: Comments;
/* 100 */ StringLiteralToken: StringLiteralTerm : Token Comments;
/* 101 */ ExponentToken: ExponentTerm : Token Comments;
/* 102 */ FixedPointToken: FixedPointTerm : Token Comments;
/* 103 */ BasedToken: BasedTerm : Token Comments;
/* 104 */ BaseLessToken: BaseLessTerm : Token Comments;
/* 105 */ AllBitToken: AllBitTerm : Token Comments;
/* 106 */ AssignmentOperatorToken: AssignmentOperatorTerm : Token Comments;
/* 107 */ Operator01Token: Operator01Term : Token Comments;
/* 108 */ Operator02Token: Operator02Term : Token Comments;
/* 109 */ Operator03Token: Operator03Term : Token Comments;
/* 110 */ Operator04Token: Operator04Term : Token Comments;
/* 111 */ Operator05Token: Operator05Term : Token Comments;
/* 112 */ Operator06Token: Operator06Term : Token Comments;
/* 113 */ Operator07Token: Operator07Term : Token Comments;
/* 114 */ Operator08Token: Operator08Term : Token Comments;
/* 115 */ Operator09Token: Operator09Term : Token Comments;
/* 116 */ Operator10Token: Operator10Term : Token Comments;
/* 117 */ Operator11Token: Operator11Term : Token Comments;
/* 118 */ UnaryOperatorToken: UnaryOperatorTerm : Token Comments;
/* 119 */ ColonToken: ColonTerm : Token Comments;
/* 120 */ ColonColonToken: ColonColonTerm : Token Comments;
/* 121 */ CommaToken: CommaTerm : Token Comments;
/* 122 */ DollarToken: DollarTerm : Token Comments;
/* 123 */ DotDotToken: DotDotTerm : Token Comments;
/* 124 */ DotDotEquToken: DotDotEquTerm : Token Comments;
/* 125 */ DotToken: DotTerm : Token Comments;
/* 126 */ EquToken: EquTerm : Token Comments;
/* 127 */ HashToken: HashTerm : Token Comments;
/* 128 */ LAngleToken: LAngleTerm : Token Comments;
/* 129 */ LBraceToken: LBraceTerm : Token Comments;
/* 130 */ LBracketToken: LBracketTerm : Token Comments;
/* 131 */ LParenToken: LParenTerm : Token Comments;
/* 132 */ MinusColonToken: MinusColonTerm : Token Comments;
/* 133 */ MinusGTToken: MinusGTTerm : Token Comments;
/* 134 */ PlusColonToken: PlusColonTerm : Token Comments;
/* 135 */ RAngleToken: RAngleTerm : Token Comments;
/* 136 */ RBraceToken: RBraceTerm : Token Comments;
/* 137 */ RBracketToken: RBracketTerm : Token Comments;
/* 138 */ RParenToken: RParenTerm : Token Comments;
/* 139 */ SemicolonToken: SemicolonTerm : Token Comments;
/* 140 */ StarToken: StarTerm : Token Comments;
/* 141 */ AlwaysCombToken: AlwaysCombTerm : Token Comments;
/* 142 */ AlwaysFfToken: AlwaysFfTerm : Token Comments;
/* 143 */ AsToken: AsTerm : Token Comments;
/* 144 */ AssignToken: AssignTerm : Token Comments;
/* 145 */ AsyncHighToken: AsyncHighTerm : Token Comments;
/* 146 */ AsyncLowToken: AsyncLowTerm : Token Comments;
/* 147 */ BitToken: BitTerm : Token Comments;
/* 148 */ CaseToken: CaseTerm : Token Comments;
/* 149 */ DefaultToken: DefaultTerm : Token Comments;
/* 150 */ ElseToken: ElseTerm : Token Comments;
/* 151 */ EnumToken: EnumTerm : Token Comments;
/* 152 */ ExportToken: ExportTerm : Token Comments;
/* 153 */ F32Token: F32Term : Token Comments;
/* 154 */ F64Token: F64Term : Token Comments;
/* 155 */ FinalToken: FinalTerm : Token Comments;
/* 156 */ ForToken: ForTerm : Token Comments;
/* 157 */ FunctionToken: FunctionTerm : Token Comments;
/* 158 */ I32Token: I32Term : Token Comments;
/* 159 */ I64Token: I64Term : Token Comments;
/* 160 */ IfResetToken: IfResetTerm : Token Comments;
/* 161 */ IfToken: IfTerm : Token Comments;
/* 162 */ ImportToken: ImportTerm : Token Comments;
/* 163 */ InitialToken: InitialTerm : Token Comments;
/* 164 */ InoutToken: InoutTerm : Token Comments;
/* 165 */ InputToken: InputTerm : Token Comments;
/* 166 */ InstToken: InstTerm : Token Comments;
/* 167 */ InterfaceToken: InterfaceTerm : Token Comments;
/* 168 */ InToken: InTerm : Token Comments;
/* 169 */ LocalparamToken: LocalparamTerm : Token Comments;
/* 170 */ LogicToken: LogicTerm : Token Comments;
/* 171 */ LsbToken: LsbTerm : Token Comments;
/* 172 */ ModportToken: ModportTerm : Token Comments;
/* 173 */ ModuleToken: ModuleTerm : Token Comments;
/* 174 */ MsbToken: MsbTerm : Token Comments;
/* 175 */ NegedgeToken: NegedgeTerm : Token Comments;
/* 176 */ OutputToken: OutputTerm : Token Comments;
/* 177 */ PackageToken: PackageTerm : Token Comments;
/* 178 */ ParameterToken: ParameterTerm : Token Comments;
/* 179 */ PosedgeToken: PosedgeTerm : Token Comments;
/* 180 */ RefToken: RefTerm : Token Comments;
/* 181 */ RepeatToken: RepeatTerm : Token Comments;
/* 182 */ ReturnToken: ReturnTerm : Token Comments;
/* 183 */ SignedToken: SignedTerm : Token Comments;
/* 184 */ StepToken: StepTerm : Token Comments;
/* 185 */ StringToken: StringTerm : Token Comments;
/* 186 */ StructToken: StructTerm : Token Comments;
/* 187 */ SyncHighToken: SyncHighTerm : Token Comments;
/* 188 */ SyncLowToken: SyncLowTerm : Token Comments;
/* 189 */ TriToken: TriTerm : Token Comments;
/* 190 */ TypeToken: TypeTerm : Token Comments;
/* 191 */ U32Token: U32Term : Token Comments;
/* 192 */ U64Token: U64Term : Token Comments;
/* 193 */ VarToken: VarTerm : Token Comments;
/* 194 */ IdentifierToken: IdentifierTerm : Token Comments;
/* 195 */ Start: StartToken : VerylToken;
/* 196 */ StringLiteral: StringLiteralToken : VerylToken;
/* 197 */ Exponent: ExponentToken : VerylToken;
/* 198 */ FixedPoint: FixedPointToken : VerylToken;
/* 199 */ Based: BasedToken : VerylToken;
/* 200 */ BaseLess: BaseLessToken : VerylToken;
/* 201 */ AllBit: AllBitToken : VerylToken;
/* 202 */ AssignmentOperator: AssignmentOperatorToken : VerylToken;
/* 203 */ Operator01: Operator01Token : VerylToken;
/* 204 */ Operator02: Operator02Token : VerylToken;
/* 205 */ Operator03: Operator03Token : VerylToken;
/* 206 */ Operator04: Operator04Token : VerylToken;
/* 207 */ Operator05: Operator05Token : VerylToken;
/* 208 */ Operator06: Operator06Token : VerylToken;
/* 209 */ Operator07: Operator07Token : VerylToken;
/* 210 */ Operator08: Operator08Token : VerylToken;
/* 211 */ Operator09: Operator09Token : VerylToken;
/* 212 */ Operator10: Operator10Token : VerylToken;
/* 213 */ Operator11: Operator11Token : VerylToken;
/* 214 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/* 215 */ Colon: ColonToken : VerylToken;
/* 216 */ ColonColon: ColonColonToken : VerylToken;
/* 217 */ Comma: CommaToken : VerylToken;
/* 218 */ Dollar: DollarToken : VerylToken;
/* 219 */ DotDot: DotDotToken : VerylToken;
/* 220 */ DotDotEqu: DotDotEquToken : VerylToken;
/* 221 */ Dot: DotToken : VerylToken;
/* 222 */ Equ: EquToken : VerylToken;
/* 223 */ Hash: HashToken : VerylToken;
/* 224 */ LAngle: LAngleToken : VerylToken;
/* 225 */ LBrace: LBraceToken : VerylToken;
/* 226 */ LBracket: LBracketToken : VerylToken;
/* 227 */ LParen: LParenToken : VerylToken;
/* 228 */ MinusColon: MinusColonToken : VerylToken;
/* 229 */ MinusGT: MinusGTToken : VerylToken;
/* 230 */ PlusColon: PlusColonToken : VerylToken;
/* 231 */ RAngle: RAngleToken : VerylToken;
/* 232 */ RBrace: RBraceToken : VerylToken;
/* 233 */ RBracket: RBracketToken : VerylToken;
/* 234 */ RParen: RParenToken : VerylToken;
/* 235 */ Semicolon: SemicolonToken : VerylToken;
/* 236 */ Star: StarToken : VerylToken;
/* 237 */ AlwaysComb: AlwaysCombToken : VerylToken;
/* 238 */ AlwaysFf: AlwaysFfToken : VerylToken;
/* 239 */ As: AsToken : VerylToken;
/* 240 */ Assign: AssignToken : VerylToken;
/* 241 */ AsyncHigh: AsyncHighToken : VerylToken;
/* 242 */ AsyncLow: AsyncLowToken : VerylToken;
/* 243 */ Bit: BitToken : VerylToken;
/* 244 */ Case: CaseToken : VerylToken;
/* 245 */ Defaul: DefaultToken : VerylToken;
/* 246 */ Else: ElseToken : VerylToken;
/* 247 */ Enum: EnumToken : VerylToken;
/* 248 */ Export: ExportToken : VerylToken;
/* 249 */ F32: F32Token : VerylToken;
/* 250 */ F64: F64Token : VerylToken;
/* 251 */ Final: FinalToken : VerylToken;
/* 252 */ For: ForToken : VerylToken;
/* 253 */ Function: FunctionToken : VerylToken;
/* 254 */ I32: I32Token : VerylToken;
/* 255 */ I64: I64Token : VerylToken;
/* 256 */ If: IfToken : VerylToken;
/* 257 */ IfReset: IfResetToken : VerylToken;
/* 258 */ Import: ImportToken : VerylToken;
/* 259 */ In: InToken : VerylToken;
/* 260 */ Initial: InitialToken : VerylToken;
/* 261 */ Inout: InoutToken : VerylToken;
/* 262 */ Input: InputToken : VerylToken;
/* 263 */ Inst: InstToken : VerylToken;
/* 264 */ Interface: InterfaceToken : VerylToken;
/* 265 */ Localparam: LocalparamToken : VerylToken;
/* 266 */ Logic: LogicToken : VerylToken;
/* 267 */ Lsb: LsbToken : VerylToken;
/* 268 */ Modport: ModportToken : VerylToken;
/* 269 */ Module: ModuleToken : VerylToken;
/* 270 */ Msb: MsbToken : VerylToken;
/* 271 */ Negedge: NegedgeToken : VerylToken;
/* 272 */ Output: OutputToken : VerylToken;
/* 273 */ Package: PackageToken : VerylToken;
/* 274 */ Parameter: ParameterToken : VerylToken;
/* 275 */ Posedge: PosedgeToken : VerylToken;
/* 276 */ Ref: RefToken : VerylToken;
/* 277 */ Repeat: RepeatToken : VerylToken;
/* 278 */ Return: ReturnToken : VerylToken;
/* 279 */ Signed: SignedToken : VerylToken;
/* 280 */ Step: StepToken : VerylToken;
/* 281 */ Strin: StringToken : VerylToken;
/* 282 */ Struct: StructToken : VerylToken;
/* 283 */ SyncHigh: SyncHighToken : VerylToken;
/* 284 */ SyncLow: SyncLowToken : VerylToken;
/* 285 */ Tri: TriToken : VerylToken;
/* 286 */ Type: TypeToken : VerylToken;
/* 287 */ U32: U32Token : VerylToken;
/* 288 */ U64: U64Token : VerylToken;
/* 289 */ Var: VarToken : VerylToken;
/* 290 */ Identifier: IdentifierToken : VerylToken;
/* 291 */ Number: IntegralNumber;
/* 292 */ Number: RealNumber;
/* 293 */ IntegralNumber: Based;
/* 294 */ IntegralNumber: BaseLess;
/* 295 */ IntegralNumber: AllBit;
/* 296 */ RealNumber: FixedPoint;
/* 297 */ RealNumber: Exponent;
/* 298 */ HierarchicalIdentifier: Identifier HierarchicalIdentifierList /* Vec */ HierarchicalIdentifierList0 /* Vec */;
/* 299 */ HierarchicalIdentifierList0 /* Vec<T>::Push */: Dot Identifier HierarchicalIdentifierList0List /* Vec */ HierarchicalIdentifierList0;
/* 300 */ HierarchicalIdentifierList0List /* Vec<T>::Push */: Select HierarchicalIdentifierList0List;
/* 301 */ HierarchicalIdentifierList0List /* Vec<T>::New */: ;
/* 302 */ HierarchicalIdentifierList0 /* Vec<T>::New */: ;
/* 303 */ HierarchicalIdentifierList /* Vec<T>::Push */: Select HierarchicalIdentifierList;
/* 304 */ HierarchicalIdentifierList /* Vec<T>::New */: ;
/* 305 */ ScopedIdentifier: Identifier ScopedIdentifierList /* Vec */;
/* 306 */ ScopedIdentifierList /* Vec<T>::Push */: ColonColon Identifier ScopedIdentifierList;
/* 307 */ ScopedIdentifierList /* Vec<T>::New */: ;
/* 308 */ ExpressionIdentifier: ExpressionIdentifierOpt /* Option */ Identifier ExpressionIdentifierGroup;
/* 309 */ ExpressionIdentifierGroup: ColonColon Identifier ExpressionIdentifierGroupList /* Vec */ ExpressionIdentifierGroupList0 /* Vec */;
/* 310 */ ExpressionIdentifierGroupList0 /* Vec<T>::Push */: Select ExpressionIdentifierGroupList0;
/* 311 */ ExpressionIdentifierGroupList0 /* Vec<T>::New */: ;
/* 312 */ ExpressionIdentifierGroupList /* Vec<T>::Push */: ColonColon Identifier ExpressionIdentifierGroupList;
/* 313 */ ExpressionIdentifierGroupList /* Vec<T>::New */: ;
/* 314 */ ExpressionIdentifierGroup: ExpressionIdentifierGroupList1 /* Vec */ ExpressionIdentifierGroupList2 /* Vec */;
/* 315 */ ExpressionIdentifierGroupList2 /* Vec<T>::Push */: Dot Identifier ExpressionIdentifierGroupList2List /* Vec */ ExpressionIdentifierGroupList2;
/* 316 */ ExpressionIdentifierGroupList2List /* Vec<T>::Push */: Select ExpressionIdentifierGroupList2List;
/* 317 */ ExpressionIdentifierGroupList2List /* Vec<T>::New */: ;
/* 318 */ ExpressionIdentifierGroupList2 /* Vec<T>::New */: ;
/* 319 */ ExpressionIdentifierGroupList1 /* Vec<T>::Push */: Select ExpressionIdentifierGroupList1;
/* 320 */ ExpressionIdentifierGroupList1 /* Vec<T>::New */: ;
/* 321 */ ExpressionIdentifierOpt /* Option<T>::Some */: Dollar;
/* 322 */ ExpressionIdentifierOpt /* Option<T>::None */: ;
/* 323 */ Expression: Expression01 ExpressionList /* Vec */;
/* 324 */ ExpressionList /* Vec<T>::Push */: Operator01 Expression01 ExpressionList;
/* 325 */ ExpressionList /* Vec<T>::New */: ;
/* 326 */ Expression01: Expression02 Expression01List /* Vec */;
/* 327 */ Expression01List /* Vec<T>::Push */: Operator02 Expression02 Expression01List;
/* 328 */ Expression01List /* Vec<T>::New */: ;
/* 329 */ Expression02: Expression03 Expression02List /* Vec */;
/* 330 */ Expression02List /* Vec<T>::Push */: Operator03 Expression03 Expression02List;
/* 331 */ Expression02List /* Vec<T>::New */: ;
/* 332 */ Expression03: Expression04 Expression03List /* Vec */;
/* 333 */ Expression03List /* Vec<T>::Push */: Operator04 Expression04 Expression03List;
/* 334 */ Expression03List /* Vec<T>::New */: ;
/* 335 */ Expression04: Expression05 Expression04List /* Vec */;
/* 336 */ Expression04List /* Vec<T>::Push */: Operator05 Expression05 Expression04List;
/* 337 */ Expression04List /* Vec<T>::New */: ;
/* 338 */ Expression05: Expression06 Expression05List /* Vec */;
/* 339 */ Expression05List /* Vec<T>::Push */: Operator06 Expression06 Expression05List;
/* 340 */ Expression05List /* Vec<T>::New */: ;
/* 341 */ Expression06: Expression07 Expression06List /* Vec */;
/* 342 */ Expression06List /* Vec<T>::Push */: Operator07 Expression07 Expression06List;
/* 343 */ Expression06List /* Vec<T>::New */: ;
/* 344 */ Expression07: Expression08 Expression07List /* Vec */;
/* 345 */ Expression07List /* Vec<T>::Push */: Operator08 Expression08 Expression07List;
/* 346 */ Expression07List /* Vec<T>::New */: ;
/* 347 */ Expression08: Expression09 Expression08List /* Vec */;
/* 348 */ Expression08List /* Vec<T>::Push */: Operator09 Expression09 Expression08List;
/* 349 */ Expression08List /* Vec<T>::New */: ;
/* 350 */ Expression09: Expression10 Expression09List /* Vec */;
/* 351 */ Expression09List /* Vec<T>::Push */: Expression09ListGroup Expression10 Expression09List;
/* 352 */ Expression09ListGroup: Operator10;
/* 353 */ Expression09ListGroup: Star;
/* 354 */ Expression09List /* Vec<T>::New */: ;
/* 355 */ Expression10: Expression11 Expression10List /* Vec */;
/* 356 */ Expression10List /* Vec<T>::Push */: Operator11 Expression11 Expression10List;
/* 357 */ Expression10List /* Vec<T>::New */: ;
/* 358 */ Expression11: Expression12 Expression11List /* Vec */;
/* 359 */ Expression11List /* Vec<T>::Push */: As ScopedIdentifier Expression11List;
/* 360 */ Expression11List /* Vec<T>::New */: ;
/* 361 */ Expression12: Expression12List /* Vec */ Factor;
/* 362 */ Expression12List /* Vec<T>::Push */: Expression12ListGroup Expression12List;
/* 363 */ Expression12ListGroup: UnaryOperator;
/* 364 */ Expression12ListGroup: Operator09;
/* 365 */ Expression12ListGroup: Operator05;
/* 366 */ Expression12ListGroup: Operator03;
/* 367 */ Expression12ListGroup: Operator04;
/* 368 */ Expression12List /* Vec<T>::New */: ;
/* 369 */ Factor: Number;
/* 370 */ Factor: ExpressionIdentifier FactorOpt /* Option */;
/* 371 */ Factor: LParen Expression RParen;
/* 372 */ Factor: LBrace ConcatenationList RBrace;
/* 373 */ Factor: IfExpression;
/* 374 */ Factor: CaseExpression;
/* 375 */ Factor: StringLiteral;
/* 376 */ Factor: FactorGroup;
/* 377 */ FactorGroup: Msb;
/* 378 */ FactorGroup: Lsb;
/* 379 */ FactorOpt /* Option<T>::Some */: FunctionCall;
/* 380 */ FactorOpt /* Option<T>::None */: ;
/* 381 */ FunctionCall: LParen FunctionCallOpt /* Option */ RParen;
/* 382 */ FunctionCallOpt /* Option<T>::Some */: ArgumentList;
/* 383 */ FunctionCallOpt /* Option<T>::None */: ;
/* 384 */ ArgumentList: ArgumentItem ArgumentListList /* Vec */ ArgumentListOpt /* Option */;
/* 385 */ ArgumentListList /* Vec<T>::Push */: Comma ArgumentItem ArgumentListList;
/* 386 */ ArgumentListList /* Vec<T>::New */: ;
/* 387 */ ArgumentListOpt /* Option<T>::Some */: Comma;
/* 388 */ ArgumentListOpt /* Option<T>::None */: ;
/* 389 */ ArgumentItem: Expression;
/* 390 */ ConcatenationList: ConcatenationItem ConcatenationListList /* Vec */ ConcatenationListOpt /* Option */;
/* 391 */ ConcatenationListList /* Vec<T>::Push */: Comma ConcatenationItem ConcatenationListList;
/* 392 */ ConcatenationListList /* Vec<T>::New */: ;
/* 393 */ ConcatenationListOpt /* Option<T>::Some */: Comma;
/* 394 */ ConcatenationListOpt /* Option<T>::None */: ;
/* 395 */ ConcatenationItem: Expression ConcatenationItemOpt /* Option */;
/* 396 */ ConcatenationItemOpt /* Option<T>::Some */: Repeat Expression;
/* 397 */ ConcatenationItemOpt /* Option<T>::None */: ;
/* 398 */ IfExpression: If Expression LBrace Expression RBrace IfExpressionList /* Vec */ Else LBrace Expression RBrace;
/* 399 */ IfExpressionList /* Vec<T>::Push */: Else If Expression LBrace Expression RBrace IfExpressionList;
/* 400 */ IfExpressionList /* Vec<T>::New */: ;
/* 401 */ CaseExpression: Case Expression LBrace Expression Colon Expression Comma CaseExpressionList /* Vec */ Defaul Colon Expression CaseExpressionOpt /* Option */ RBrace;
/* 402 */ CaseExpressionList /* Vec<T>::Push */: Expression Colon Expression Comma CaseExpressionList;
/* 403 */ CaseExpressionList /* Vec<T>::New */: ;
/* 404 */ CaseExpressionOpt /* Option<T>::Some */: Comma;
/* 405 */ CaseExpressionOpt /* Option<T>::None */: ;
/* 406 */ TypeExpression: ScalarType;
/* 407 */ TypeExpression: Type LParen Expression RParen;
/* 408 */ Select: LBracket Expression SelectOpt /* Option */ RBracket;
/* 409 */ SelectOpt /* Option<T>::Some */: SelectOperator Expression;
/* 410 */ SelectOpt /* Option<T>::None */: ;
/* 411 */ SelectOperator: Colon;
/* 412 */ SelectOperator: PlusColon;
/* 413 */ SelectOperator: MinusColon;
/* 414 */ SelectOperator: Step;
/* 415 */ Width: LAngle Expression WidthList /* Vec */ RAngle;
/* 416 */ WidthList /* Vec<T>::Push */: Comma Expression WidthList;
/* 417 */ WidthList /* Vec<T>::New */: ;
/* 418 */ Array: LBracket Expression ArrayList /* Vec */ RBracket;
/* 419 */ ArrayList /* Vec<T>::Push */: Comma Expression ArrayList;
/* 420 */ ArrayList /* Vec<T>::New */: ;
/* 421 */ Range: Expression RangeOpt /* Option */;
/* 422 */ RangeOpt /* Option<T>::Some */: RangeOperator Expression;
/* 423 */ RangeOpt /* Option<T>::None */: ;
/* 424 */ RangeOperator: DotDot;
/* 425 */ RangeOperator: DotDotEqu;
/* 426 */ FixedType: U32;
/* 427 */ FixedType: U64;
/* 428 */ FixedType: I32;
/* 429 */ FixedType: I64;
/* 430 */ FixedType: F32;
/* 431 */ FixedType: F64;
/* 432 */ FixedType: Strin;
/* 433 */ VariableType: VariableTypeGroup VariableTypeOpt /* Option */;
/* 434 */ VariableTypeGroup: Logic;
/* 435 */ VariableTypeGroup: Bit;
/* 436 */ VariableTypeGroup: ScopedIdentifier;
/* 437 */ VariableTypeOpt /* Option<T>::Some */: Width;
/* 438 */ VariableTypeOpt /* Option<T>::None */: ;
/* 439 */ TypeModifier: Tri;
/* 440 */ TypeModifier: Signed;
/* 441 */ ScalarType: ScalarTypeList /* Vec */ ScalarTypeGroup;
/* 442 */ ScalarTypeGroup: VariableType;
/* 443 */ ScalarTypeGroup: FixedType;
/* 444 */ ScalarTypeList /* Vec<T>::Push */: TypeModifier ScalarTypeList;
/* 445 */ ScalarTypeList /* Vec<T>::New */: ;
/* 446 */ ArrayType: ScalarType ArrayTypeOpt /* Option */;
/* 447 */ ArrayTypeOpt /* Option<T>::Some */: Array;
/* 448 */ ArrayTypeOpt /* Option<T>::None */: ;
/* 449 */ Statement: IdentifierStatement;
/* 450 */ Statement: IfStatement;
/* 451 */ Statement: IfResetStatement;
/* 452 */ Statement: ReturnStatement;
/* 453 */ Statement: ForStatement;
/* 454 */ Statement: CaseStatement;
/* 455 */ IdentifierStatement: ExpressionIdentifier IdentifierStatementGroup Semicolon;
/* 456 */ IdentifierStatementGroup: FunctionCall;
/* 457 */ IdentifierStatementGroup: Assignment;
/* 458 */ Assignment: AssignmentGroup Expression;
/* 459 */ AssignmentGroup: Equ;
/* 460 */ AssignmentGroup: AssignmentOperator;
/* 461 */ IfStatement: If Expression LBrace IfStatementList /* Vec */ RBrace IfStatementList0 /* Vec */ IfStatementOpt /* Option */;
/* 462 */ IfStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfStatementList0List /* Vec */ RBrace IfStatementList0;
/* 463 */ IfStatementList0List /* Vec<T>::Push */: Statement IfStatementList0List;
/* 464 */ IfStatementList0List /* Vec<T>::New */: ;
/* 465 */ IfStatementList0 /* Vec<T>::New */: ;
/* 466 */ IfStatementList /* Vec<T>::Push */: Statement IfStatementList;
/* 467 */ IfStatementList /* Vec<T>::New */: ;
/* 468 */ IfStatementOpt /* Option<T>::Some */: Else LBrace IfStatementOptList /* Vec */ RBrace;
/* 469 */ IfStatementOptList /* Vec<T>::Push */: Statement IfStatementOptList;
/* 470 */ IfStatementOptList /* Vec<T>::New */: ;
/* 471 */ IfStatementOpt /* Option<T>::None */: ;
/* 472 */ IfResetStatement: IfReset LBrace IfResetStatementList /* Vec */ RBrace IfResetStatementList0 /* Vec */ IfResetStatementOpt /* Option */;
/* 473 */ IfResetStatementList0 /* Vec<T>::Push */: Else If Expression LBrace IfResetStatementList0List /* Vec */ RBrace IfResetStatementList0;
/* 474 */ IfResetStatementList0List /* Vec<T>::Push */: Statement IfResetStatementList0List;
/* 475 */ IfResetStatementList0List /* Vec<T>::New */: ;
/* 476 */ IfResetStatementList0 /* Vec<T>::New */: ;
/* 477 */ IfResetStatementList /* Vec<T>::Push */: Statement IfResetStatementList;
/* 478 */ IfResetStatementList /* Vec<T>::New */: ;
/* 479 */ IfResetStatementOpt /* Option<T>::Some */: Else LBrace IfResetStatementOptList /* Vec */ RBrace;
/* 480 */ IfResetStatementOptList /* Vec<T>::Push */: Statement IfResetStatementOptList;
/* 481 */ IfResetStatementOptList /* Vec<T>::New */: ;
/* 482 */ IfResetStatementOpt /* Option<T>::None */: ;
/* 483 */ ReturnStatement: Return Expression Semicolon;
/* 484 */ ForStatement: For Identifier Colon ScalarType In Range ForStatementOpt /* Option */ LBrace ForStatementList /* Vec */ RBrace;
/* 485 */ ForStatementList /* Vec<T>::Push */: Statement ForStatementList;
/* 486 */ ForStatementList /* Vec<T>::New */: ;
/* 487 */ ForStatementOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 488 */ ForStatementOpt /* Option<T>::None */: ;
/* 489 */ CaseStatement: Case Expression LBrace CaseStatementList /* Vec */ RBrace;
/* 490 */ CaseStatementList /* Vec<T>::Push */: CaseItem CaseStatementList;
/* 491 */ CaseStatementList /* Vec<T>::New */: ;
/* 492 */ CaseItem: CaseItemGroup Colon CaseItemGroup0;
/* 493 */ CaseItemGroup0: Statement;
/* 494 */ CaseItemGroup0: LBrace CaseItemGroup0List /* Vec */ RBrace;
/* 495 */ CaseItemGroup0List /* Vec<T>::Push */: Statement CaseItemGroup0List;
/* 496 */ CaseItemGroup0List /* Vec<T>::New */: ;
/* 497 */ CaseItemGroup: Expression;
/* 498 */ CaseItemGroup: Defaul;
/* 499 */ Attribute: Hash LBracket Identifier AttributeOpt /* Option */ RBracket;
/* 500 */ AttributeOpt /* Option<T>::Some */: LParen AttributeList RParen;
/* 501 */ AttributeOpt /* Option<T>::None */: ;
/* 502 */ AttributeList: AttributeItem AttributeListList /* Vec */ AttributeListOpt /* Option */;
/* 503 */ AttributeListList /* Vec<T>::Push */: Comma AttributeItem AttributeListList;
/* 504 */ AttributeListList /* Vec<T>::New */: ;
/* 505 */ AttributeListOpt /* Option<T>::Some */: Comma;
/* 506 */ AttributeListOpt /* Option<T>::None */: ;
/* 507 */ AttributeItem: Identifier;
/* 508 */ AttributeItem: StringLiteral;
/* 509 */ VarDeclaration: Var Identifier Colon ArrayType VarDeclarationOpt /* Option */ Semicolon;
/* 510 */ VarDeclarationOpt /* Option<T>::Some */: Equ Expression;
/* 511 */ VarDeclarationOpt /* Option<T>::None */: ;
/* 512 */ LocalparamDeclaration: Localparam Identifier Colon LocalparamDeclarationGroup Semicolon;
/* 513 */ LocalparamDeclarationGroup: ArrayType Equ Expression;
/* 514 */ LocalparamDeclarationGroup: Type Equ TypeExpression;
/* 515 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfClock AlwaysFfDeclarationOpt /* Option */ RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 516 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 517 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 518 */ AlwaysFfDeclarationOpt /* Option<T>::Some */: Comma AlwaysFfReset;
/* 519 */ AlwaysFfDeclarationOpt /* Option<T>::None */: ;
/* 520 */ AlwaysFfClock: AlwaysFfClockOpt /* Option */ HierarchicalIdentifier;
/* 521 */ AlwaysFfClockOpt /* Option<T>::Some */: AlwaysFfClockOptGroup;
/* 522 */ AlwaysFfClockOptGroup: Posedge;
/* 523 */ AlwaysFfClockOptGroup: Negedge;
/* 524 */ AlwaysFfClockOpt /* Option<T>::None */: ;
/* 525 */ AlwaysFfReset: AlwaysFfResetOpt /* Option */ HierarchicalIdentifier;
/* 526 */ AlwaysFfResetOpt /* Option<T>::Some */: AlwaysFfResetOptGroup;
/* 527 */ AlwaysFfResetOptGroup: AsyncLow;
/* 528 */ AlwaysFfResetOptGroup: AsyncHigh;
/* 529 */ AlwaysFfResetOptGroup: SyncLow;
/* 530 */ AlwaysFfResetOptGroup: SyncHigh;
/* 531 */ AlwaysFfResetOpt /* Option<T>::None */: ;
/* 532 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 533 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 534 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 535 */ AssignDeclaration: Assign HierarchicalIdentifier Equ Expression Semicolon;
/* 536 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 537 */ ModportList: ModportGroup ModportListList /* Vec */ ModportListOpt /* Option */;
/* 538 */ ModportListList /* Vec<T>::Push */: Comma ModportGroup ModportListList;
/* 539 */ ModportListList /* Vec<T>::New */: ;
/* 540 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 541 */ ModportListOpt /* Option<T>::None */: ;
/* 542 */ ModportGroup: ModportGroupList /* Vec */ ModportGroupGroup;
/* 543 */ ModportGroupGroup: LBrace ModportList RBrace;
/* 544 */ ModportGroupGroup: ModportItem;
/* 545 */ ModportGroupList /* Vec<T>::Push */: Attribute ModportGroupList;
/* 546 */ ModportGroupList /* Vec<T>::New */: ;
/* 547 */ ModportItem: Identifier Colon Direction;
/* 548 */ EnumDeclaration: Enum Identifier Colon ScalarType LBrace EnumList RBrace;
/* 549 */ EnumList: EnumGroup EnumListList /* Vec */ EnumListOpt /* Option */;
/* 550 */ EnumListList /* Vec<T>::Push */: Comma EnumGroup EnumListList;
/* 551 */ EnumListList /* Vec<T>::New */: ;
/* 552 */ EnumListOpt /* Option<T>::Some */: Comma;
/* 553 */ EnumListOpt /* Option<T>::None */: ;
/* 554 */ EnumGroup: EnumGroupList /* Vec */ EnumGroupGroup;
/* 555 */ EnumGroupGroup: LBrace EnumList RBrace;
/* 556 */ EnumGroupGroup: EnumItem;
/* 557 */ EnumGroupList /* Vec<T>::Push */: Attribute EnumGroupList;
/* 558 */ EnumGroupList /* Vec<T>::New */: ;
/* 559 */ EnumItem: Identifier EnumItemOpt /* Option */;
/* 560 */ EnumItemOpt /* Option<T>::Some */: Equ Expression;
/* 561 */ EnumItemOpt /* Option<T>::None */: ;
/* 562 */ StructDeclaration: Struct Identifier LBrace StructList RBrace;
/* 563 */ StructList: StructGroup StructListList /* Vec */ StructListOpt /* Option */;
/* 564 */ StructListList /* Vec<T>::Push */: Comma StructGroup StructListList;
/* 565 */ StructListList /* Vec<T>::New */: ;
/* 566 */ StructListOpt /* Option<T>::Some */: Comma;
/* 567 */ StructListOpt /* Option<T>::None */: ;
/* 568 */ StructGroup: StructGroupList /* Vec */ StructGroupGroup;
/* 569 */ StructGroupGroup: LBrace StructList RBrace;
/* 570 */ StructGroupGroup: StructItem;
/* 571 */ StructGroupList /* Vec<T>::Push */: Attribute StructGroupList;
/* 572 */ StructGroupList /* Vec<T>::New */: ;
/* 573 */ StructItem: Identifier Colon ScalarType;
/* 574 */ InitialDeclaration: Initial LBrace InitialDeclarationList /* Vec */ RBrace;
/* 575 */ InitialDeclarationList /* Vec<T>::Push */: Statement InitialDeclarationList;
/* 576 */ InitialDeclarationList /* Vec<T>::New */: ;
/* 577 */ FinalDeclaration: Final LBrace FinalDeclarationList /* Vec */ RBrace;
/* 578 */ FinalDeclarationList /* Vec<T>::Push */: Statement FinalDeclarationList;
/* 579 */ FinalDeclarationList /* Vec<T>::New */: ;
/* 580 */ InstDeclaration: Inst Identifier Colon ScopedIdentifier InstDeclarationOpt /* Option */ InstDeclarationOpt0 /* Option */ InstDeclarationOpt1 /* Option */ Semicolon;
/* 581 */ InstDeclarationOpt1 /* Option<T>::Some */: LParen InstDeclarationOpt2 /* Option */ RParen;
/* 582 */ InstDeclarationOpt2 /* Option<T>::Some */: InstPortList;
/* 583 */ InstDeclarationOpt2 /* Option<T>::None */: ;
/* 584 */ InstDeclarationOpt1 /* Option<T>::None */: ;
/* 585 */ InstDeclarationOpt0 /* Option<T>::Some */: InstParameter;
/* 586 */ InstDeclarationOpt0 /* Option<T>::None */: ;
/* 587 */ InstDeclarationOpt /* Option<T>::Some */: Array;
/* 588 */ InstDeclarationOpt /* Option<T>::None */: ;
/* 589 */ InstParameter: Hash LParen InstParameterOpt /* Option */ RParen;
/* 590 */ InstParameterOpt /* Option<T>::Some */: InstParameterList;
/* 591 */ InstParameterOpt /* Option<T>::None */: ;
/* 592 */ InstParameterList: InstParameterGroup InstParameterListList /* Vec */ InstParameterListOpt /* Option */;
/* 593 */ InstParameterListList /* Vec<T>::Push */: Comma InstParameterGroup InstParameterListList;
/* 594 */ InstParameterListList /* Vec<T>::New */: ;
/* 595 */ InstParameterListOpt /* Option<T>::Some */: Comma;
/* 596 */ InstParameterListOpt /* Option<T>::None */: ;
/* 597 */ InstParameterGroup: InstParameterGroupList /* Vec */ InstParameterGroupGroup;
/* 598 */ InstParameterGroupGroup: LBrace InstParameterList RBrace;
/* 599 */ InstParameterGroupGroup: InstParameterItem;
/* 600 */ InstParameterGroupList /* Vec<T>::Push */: Attribute InstParameterGroupList;
/* 601 */ InstParameterGroupList /* Vec<T>::New */: ;
/* 602 */ InstParameterItem: Identifier InstParameterItemOpt /* Option */;
/* 603 */ InstParameterItemOpt /* Option<T>::Some */: Colon Expression;
/* 604 */ InstParameterItemOpt /* Option<T>::None */: ;
/* 605 */ InstPortList: InstPortGroup InstPortListList /* Vec */ InstPortListOpt /* Option */;
/* 606 */ InstPortListList /* Vec<T>::Push */: Comma InstPortGroup InstPortListList;
/* 607 */ InstPortListList /* Vec<T>::New */: ;
/* 608 */ InstPortListOpt /* Option<T>::Some */: Comma;
/* 609 */ InstPortListOpt /* Option<T>::None */: ;
/* 610 */ InstPortGroup: InstPortGroupList /* Vec */ InstPortGroupGroup;
/* 611 */ InstPortGroupGroup: LBrace InstPortList RBrace;
/* 612 */ InstPortGroupGroup: InstPortItem;
/* 613 */ InstPortGroupList /* Vec<T>::Push */: Attribute InstPortGroupList;
/* 614 */ InstPortGroupList /* Vec<T>::New */: ;
/* 615 */ InstPortItem: Identifier InstPortItemOpt /* Option */;
/* 616 */ InstPortItemOpt /* Option<T>::Some */: Colon Expression;
/* 617 */ InstPortItemOpt /* Option<T>::None */: ;
/* 618 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 619 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 620 */ WithParameterOpt /* Option<T>::None */: ;
/* 621 */ WithParameterList: WithParameterGroup WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 622 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterGroup WithParameterListList;
/* 623 */ WithParameterListList /* Vec<T>::New */: ;
/* 624 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 625 */ WithParameterListOpt /* Option<T>::None */: ;
/* 626 */ WithParameterGroup: WithParameterGroupList /* Vec */ WithParameterGroupGroup;
/* 627 */ WithParameterGroupGroup: LBrace WithParameterList RBrace;
/* 628 */ WithParameterGroupGroup: WithParameterItem;
/* 629 */ WithParameterGroupList /* Vec<T>::Push */: Attribute WithParameterGroupList;
/* 630 */ WithParameterGroupList /* Vec<T>::New */: ;
/* 631 */ WithParameterItem: WithParameterItemGroup Identifier Colon WithParameterItemGroup0;
/* 632 */ WithParameterItemGroup0: ArrayType Equ Expression;
/* 633 */ WithParameterItemGroup0: Type Equ TypeExpression;
/* 634 */ WithParameterItemGroup: Parameter;
/* 635 */ WithParameterItemGroup: Localparam;
/* 636 */ PortDeclaration: LParen PortDeclarationOpt /* Option */ RParen;
/* 637 */ PortDeclarationOpt /* Option<T>::Some */: PortDeclarationList;
/* 638 */ PortDeclarationOpt /* Option<T>::None */: ;
/* 639 */ PortDeclarationList: PortDeclarationGroup PortDeclarationListList /* Vec */ PortDeclarationListOpt /* Option */;
/* 640 */ PortDeclarationListList /* Vec<T>::Push */: Comma PortDeclarationGroup PortDeclarationListList;
/* 641 */ PortDeclarationListList /* Vec<T>::New */: ;
/* 642 */ PortDeclarationListOpt /* Option<T>::Some */: Comma;
/* 643 */ PortDeclarationListOpt /* Option<T>::None */: ;
/* 644 */ PortDeclarationGroup: PortDeclarationGroupList /* Vec */ PortDeclarationGroupGroup;
/* 645 */ PortDeclarationGroupGroup: LBrace PortDeclarationList RBrace;
/* 646 */ PortDeclarationGroupGroup: PortDeclarationItem;
/* 647 */ PortDeclarationGroupList /* Vec<T>::Push */: Attribute PortDeclarationGroupList;
/* 648 */ PortDeclarationGroupList /* Vec<T>::New */: ;
/* 649 */ PortDeclarationItem: Identifier Colon PortDeclarationItemGroup;
/* 650 */ PortDeclarationItemGroup: Direction ArrayType;
/* 651 */ PortDeclarationItemGroup: Interface PortDeclarationItemOpt /* Option */;
/* 652 */ PortDeclarationItemOpt /* Option<T>::Some */: Array;
/* 653 */ PortDeclarationItemOpt /* Option<T>::None */: ;
/* 654 */ Direction: Input;
/* 655 */ Direction: Output;
/* 656 */ Direction: Inout;
/* 657 */ Direction: Ref;
/* 658 */ Direction: Modport;
/* 659 */ FunctionDeclaration: Function Identifier FunctionDeclarationOpt /* Option */ FunctionDeclarationOpt0 /* Option */ MinusGT ScalarType LBrace FunctionDeclarationList /* Vec */ RBrace;
/* 660 */ FunctionDeclarationList /* Vec<T>::Push */: FunctionItem FunctionDeclarationList;
/* 661 */ FunctionDeclarationList /* Vec<T>::New */: ;
/* 662 */ FunctionDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 663 */ FunctionDeclarationOpt0 /* Option<T>::None */: ;
/* 664 */ FunctionDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 665 */ FunctionDeclarationOpt /* Option<T>::None */: ;
/* 666 */ FunctionItem: VarDeclaration;
/* 667 */ FunctionItem: Statement;
/* 668 */ ImportDeclaration: Import Identifier ColonColon ImportDeclarationGroup Semicolon;
/* 669 */ ImportDeclarationGroup: Identifier;
/* 670 */ ImportDeclarationGroup: Star;
/* 671 */ ExportDeclaration: Export ExportDeclarationGroup ColonColon ExportDeclarationGroup0 Semicolon;
/* 672 */ ExportDeclarationGroup0: Identifier;
/* 673 */ ExportDeclarationGroup0: Star;
/* 674 */ ExportDeclarationGroup: Identifier;
/* 675 */ ExportDeclarationGroup: Star;
/* 676 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 677 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleGroup ModuleDeclarationList;
/* 678 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 679 */ ModuleDeclarationOpt0 /* Option<T>::Some */: PortDeclaration;
/* 680 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 681 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 682 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 683 */ ModuleIfDeclaration: If Expression ModuleNamedBlock ModuleIfDeclarationList /* Vec */ ModuleIfDeclarationOpt /* Option */;
/* 684 */ ModuleIfDeclarationList /* Vec<T>::Push */: Else If Expression ModuleOptionalNamedBlock ModuleIfDeclarationList;
/* 685 */ ModuleIfDeclarationList /* Vec<T>::New */: ;
/* 686 */ ModuleIfDeclarationOpt /* Option<T>::Some */: Else ModuleOptionalNamedBlock;
/* 687 */ ModuleIfDeclarationOpt /* Option<T>::None */: ;
/* 688 */ ModuleForDeclaration: For Identifier In Range ModuleForDeclarationOpt /* Option */ ModuleNamedBlock;
/* 689 */ ModuleForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 690 */ ModuleForDeclarationOpt /* Option<T>::None */: ;
/* 691 */ ModuleNamedBlock: Colon Identifier LBrace ModuleNamedBlockList /* Vec */ RBrace;
/* 692 */ ModuleNamedBlockList /* Vec<T>::Push */: ModuleGroup ModuleNamedBlockList;
/* 693 */ ModuleNamedBlockList /* Vec<T>::New */: ;
/* 694 */ ModuleOptionalNamedBlock: ModuleOptionalNamedBlockOpt /* Option */ LBrace ModuleOptionalNamedBlockList /* Vec */ RBrace;
/* 695 */ ModuleOptionalNamedBlockList /* Vec<T>::Push */: ModuleGroup ModuleOptionalNamedBlockList;
/* 696 */ ModuleOptionalNamedBlockList /* Vec<T>::New */: ;
/* 697 */ ModuleOptionalNamedBlockOpt /* Option<T>::Some */: Colon Identifier;
/* 698 */ ModuleOptionalNamedBlockOpt /* Option<T>::None */: ;
/* 699 */ ModuleGroup: ModuleGroupList /* Vec */ ModuleGroupGroup;
/* 700 */ ModuleGroupGroup: LBrace ModuleGroupGroupList /* Vec */ RBrace;
/* 701 */ ModuleGroupGroupList /* Vec<T>::Push */: ModuleGroup ModuleGroupGroupList;
/* 702 */ ModuleGroupGroupList /* Vec<T>::New */: ;
/* 703 */ ModuleGroupGroup: ModuleItem;
/* 704 */ ModuleGroupList /* Vec<T>::Push */: Attribute ModuleGroupList;
/* 705 */ ModuleGroupList /* Vec<T>::New */: ;
/* 706 */ ModuleItem: VarDeclaration;
/* 707 */ ModuleItem: InstDeclaration;
/* 708 */ ModuleItem: LocalparamDeclaration;
/* 709 */ ModuleItem: AlwaysFfDeclaration;
/* 710 */ ModuleItem: AlwaysCombDeclaration;
/* 711 */ ModuleItem: AssignDeclaration;
/* 712 */ ModuleItem: FunctionDeclaration;
/* 713 */ ModuleItem: ModuleIfDeclaration;
/* 714 */ ModuleItem: ModuleForDeclaration;
/* 715 */ ModuleItem: EnumDeclaration;
/* 716 */ ModuleItem: StructDeclaration;
/* 717 */ ModuleItem: ModuleNamedBlock;
/* 718 */ ModuleItem: ImportDeclaration;
/* 719 */ ModuleItem: InitialDeclaration;
/* 720 */ ModuleItem: FinalDeclaration;
/* 721 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 722 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceGroup InterfaceDeclarationList;
/* 723 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 724 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 725 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 726 */ InterfaceIfDeclaration: If Expression InterfaceNamedBlock InterfaceIfDeclarationList /* Vec */ InterfaceIfDeclarationOpt /* Option */;
/* 727 */ InterfaceIfDeclarationList /* Vec<T>::Push */: Else If Expression InterfaceOptionalNamedBlock InterfaceIfDeclarationList;
/* 728 */ InterfaceIfDeclarationList /* Vec<T>::New */: ;
/* 729 */ InterfaceIfDeclarationOpt /* Option<T>::Some */: Else InterfaceOptionalNamedBlock;
/* 730 */ InterfaceIfDeclarationOpt /* Option<T>::None */: ;
/* 731 */ InterfaceForDeclaration: For Identifier In Range InterfaceForDeclarationOpt /* Option */ InterfaceNamedBlock;
/* 732 */ InterfaceForDeclarationOpt /* Option<T>::Some */: Step AssignmentOperator Expression;
/* 733 */ InterfaceForDeclarationOpt /* Option<T>::None */: ;
/* 734 */ InterfaceNamedBlock: Colon Identifier LBrace InterfaceNamedBlockList /* Vec */ RBrace;
/* 735 */ InterfaceNamedBlockList /* Vec<T>::Push */: InterfaceGroup InterfaceNamedBlockList;
/* 736 */ InterfaceNamedBlockList /* Vec<T>::New */: ;
/* 737 */ InterfaceOptionalNamedBlock: InterfaceOptionalNamedBlockOpt /* Option */ LBrace InterfaceOptionalNamedBlockList /* Vec */ RBrace;
/* 738 */ InterfaceOptionalNamedBlockList /* Vec<T>::Push */: InterfaceGroup InterfaceOptionalNamedBlockList;
/* 739 */ InterfaceOptionalNamedBlockList /* Vec<T>::New */: ;
/* 740 */ InterfaceOptionalNamedBlockOpt /* Option<T>::Some */: Colon Identifier;
/* 741 */ InterfaceOptionalNamedBlockOpt /* Option<T>::None */: ;
/* 742 */ InterfaceGroup: InterfaceGroupList /* Vec */ InterfaceGroupGroup;
/* 743 */ InterfaceGroupGroup: LBrace InterfaceGroupGroupList /* Vec */ RBrace;
/* 744 */ InterfaceGroupGroupList /* Vec<T>::Push */: InterfaceGroup InterfaceGroupGroupList;
/* 745 */ InterfaceGroupGroupList /* Vec<T>::New */: ;
/* 746 */ InterfaceGroupGroup: InterfaceItem;
/* 747 */ InterfaceGroupList /* Vec<T>::Push */: Attribute InterfaceGroupList;
/* 748 */ InterfaceGroupList /* Vec<T>::New */: ;
/* 749 */ InterfaceItem: VarDeclaration;
/* 750 */ InterfaceItem: LocalparamDeclaration;
/* 751 */ InterfaceItem: ModportDeclaration;
/* 752 */ InterfaceItem: InterfaceIfDeclaration;
/* 753 */ InterfaceItem: InterfaceForDeclaration;
/* 754 */ InterfaceItem: EnumDeclaration;
/* 755 */ InterfaceItem: StructDeclaration;
/* 756 */ InterfaceItem: InterfaceNamedBlock;
/* 757 */ InterfaceItem: FunctionDeclaration;
/* 758 */ InterfaceItem: ImportDeclaration;
/* 759 */ InterfaceItem: InitialDeclaration;
/* 760 */ InterfaceItem: FinalDeclaration;
/* 761 */ PackageDeclaration: Package Identifier LBrace PackageDeclarationList /* Vec */ RBrace;
/* 762 */ PackageDeclarationList /* Vec<T>::Push */: PackageGroup PackageDeclarationList;
/* 763 */ PackageDeclarationList /* Vec<T>::New */: ;
/* 764 */ PackageGroup: PackageGroupList /* Vec */ PackageGroupGroup;
/* 765 */ PackageGroupGroup: LBrace PackageGroupGroupList /* Vec */ RBrace;
/* 766 */ PackageGroupGroupList /* Vec<T>::Push */: PackageGroup PackageGroupGroupList;
/* 767 */ PackageGroupGroupList /* Vec<T>::New */: ;
/* 768 */ PackageGroupGroup: PackageItem;
/* 769 */ PackageGroupList /* Vec<T>::Push */: Attribute PackageGroupList;
/* 770 */ PackageGroupList /* Vec<T>::New */: ;
/* 771 */ PackageItem: VarDeclaration;
/* 772 */ PackageItem: LocalparamDeclaration;
/* 773 */ PackageItem: EnumDeclaration;
/* 774 */ PackageItem: StructDeclaration;
/* 775 */ PackageItem: FunctionDeclaration;
/* 776 */ PackageItem: ImportDeclaration;
/* 777 */ PackageItem: ExportDeclaration;
/* 778 */ PackageItem: InitialDeclaration;
/* 779 */ PackageItem: FinalDeclaration;
/* 780 */ DescriptionGroup: DescriptionGroupList /* Vec */ DescriptionGroupGroup;
/* 781 */ DescriptionGroupGroup: LBrace DescriptionGroupGroupList /* Vec */ RBrace;
/* 782 */ DescriptionGroupGroupList /* Vec<T>::Push */: DescriptionGroup DescriptionGroupGroupList;
/* 783 */ DescriptionGroupGroupList /* Vec<T>::New */: ;
/* 784 */ DescriptionGroupGroup: DescriptionItem;
/* 785 */ DescriptionGroupList /* Vec<T>::Push */: Attribute DescriptionGroupList;
/* 786 */ DescriptionGroupList /* Vec<T>::New */: ;
/* 787 */ DescriptionItem: ModuleDeclaration;
/* 788 */ DescriptionItem: InterfaceDeclaration;
/* 789 */ DescriptionItem: PackageDeclaration;
/* 790 */ DescriptionItem: ImportDeclaration;
/* 791 */ Veryl: Start VerylList /* Vec */;
/* 792 */ VerylList /* Vec<T>::Push */: DescriptionGroup VerylList;
/* 793 */ VerylList /* Vec<T>::New */: ;
