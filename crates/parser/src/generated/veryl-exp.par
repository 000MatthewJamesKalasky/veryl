%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type OwnedToken = crate::veryl_token::OwnedToken
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : OwnedToken;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ Start: StartToken : VerylToken;
/*   6 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   7 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   8 */ BasedToken: /[0-9]+(?:_[0-9]+)*'[bodh][0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : OwnedToken Comments;
/*   9 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*  10 */ AllBitToken: /'[01]/ : OwnedToken Comments;
/*  11 */ Exponent: ExponentToken : VerylToken;
/*  12 */ FixedPoint: FixedPointToken : VerylToken;
/*  13 */ Based: BasedToken : VerylToken;
/*  14 */ BaseLess: BaseLessToken : VerylToken;
/*  15 */ AllBit: AllBitToken : VerylToken;
/*  16 */ CommonOperatorToken: "\+|-|&|\||\^~|\^|~\^|~&|~\|" : OwnedToken Comments;
/*  17 */ BinaryOperatorToken: "\*\*|\*|/|%" : OwnedToken Comments;
/*  18 */ UnaryOperatorToken: "!|~" : OwnedToken Comments;
/*  19 */ CommonOperator: CommonOperatorToken : VerylToken;
/*  20 */ BinaryOperator: BinaryOperatorToken : VerylToken;
/*  21 */ UnaryOperator: UnaryOperatorToken : VerylToken;
/*  22 */ ColonToken: ':' : OwnedToken Comments;
/*  23 */ CommaToken: ',' : OwnedToken Comments;
/*  24 */ EquToken: '=' : OwnedToken Comments;
/*  25 */ HashToken: '#' : OwnedToken Comments;
/*  26 */ LBraceToken: '{' : OwnedToken Comments;
/*  27 */ LBracketToken: '[' : OwnedToken Comments;
/*  28 */ LParenToken: '(' : OwnedToken Comments;
/*  29 */ RBraceToken: '}' : OwnedToken Comments;
/*  30 */ RBracketToken: ']' : OwnedToken Comments;
/*  31 */ RParenToken: ')' : OwnedToken Comments;
/*  32 */ SemicolonToken: ';' : OwnedToken Comments;
/*  33 */ Colon: ColonToken : VerylToken;
/*  34 */ Comma: CommaToken : VerylToken;
/*  35 */ Equ: EquToken : VerylToken;
/*  36 */ Hash: HashToken : VerylToken;
/*  37 */ LBrace: LBraceToken : VerylToken;
/*  38 */ LBracket: LBracketToken : VerylToken;
/*  39 */ LParen: LParenToken : VerylToken;
/*  40 */ RBrace: RBraceToken : VerylToken;
/*  41 */ RBracket: RBracketToken : VerylToken;
/*  42 */ RParen: RParenToken : VerylToken;
/*  43 */ Semicolon: SemicolonToken : VerylToken;
/*  44 */ AlwaysCombToken: 'always_comb' : OwnedToken Comments;
/*  45 */ AlwaysFfToken: 'always_ff' : OwnedToken Comments;
/*  46 */ AssignToken: 'assign' : OwnedToken Comments;
/*  47 */ BitToken: 'bit' : OwnedToken Comments;
/*  48 */ ElseToken: 'else' : OwnedToken Comments;
/*  49 */ F32Token: 'f32' : OwnedToken Comments;
/*  50 */ F64Token: 'f64' : OwnedToken Comments;
/*  51 */ I32Token: 'i32' : OwnedToken Comments;
/*  52 */ I64Token: 'i64' : OwnedToken Comments;
/*  53 */ IfToken: 'if' : OwnedToken Comments;
/*  54 */ InoutToken: 'inout' : OwnedToken Comments;
/*  55 */ InputToken: 'input' : OwnedToken Comments;
/*  56 */ InterfaceToken: 'interface' : OwnedToken Comments;
/*  57 */ LocalparamToken: 'localparam' : OwnedToken Comments;
/*  58 */ LogicToken: 'logic' : OwnedToken Comments;
/*  59 */ ModportToken: 'modport' : OwnedToken Comments;
/*  60 */ ModuleToken: 'module' : OwnedToken Comments;
/*  61 */ NegedgeToken: 'negedge' : OwnedToken Comments;
/*  62 */ OutputToken: 'output' : OwnedToken Comments;
/*  63 */ ParameterToken: 'parameter' : OwnedToken Comments;
/*  64 */ PosedgeToken: 'posedge' : OwnedToken Comments;
/*  65 */ U32Token: 'u32' : OwnedToken Comments;
/*  66 */ U64Token: 'u64' : OwnedToken Comments;
/*  67 */ AlwaysComb: AlwaysCombToken : VerylToken;
/*  68 */ AlwaysFf: AlwaysFfToken : VerylToken;
/*  69 */ Assign: AssignToken : VerylToken;
/*  70 */ Bit: BitToken : VerylToken;
/*  71 */ Else: ElseToken : VerylToken;
/*  72 */ F32: F32Token : VerylToken;
/*  73 */ F64: F64Token : VerylToken;
/*  74 */ I32: I32Token : VerylToken;
/*  75 */ I64: I64Token : VerylToken;
/*  76 */ If: IfToken : VerylToken;
/*  77 */ Inout: InoutToken : VerylToken;
/*  78 */ Input: InputToken : VerylToken;
/*  79 */ Interface: InterfaceToken : VerylToken;
/*  80 */ Localparam: LocalparamToken : VerylToken;
/*  81 */ Logic: LogicToken : VerylToken;
/*  82 */ Modport: ModportToken : VerylToken;
/*  83 */ Module: ModuleToken : VerylToken;
/*  84 */ Negedge: NegedgeToken : VerylToken;
/*  85 */ Output: OutputToken : VerylToken;
/*  86 */ Parameter: ParameterToken : VerylToken;
/*  87 */ Posedge: PosedgeToken : VerylToken;
/*  88 */ U32: U32Token : VerylToken;
/*  89 */ U64: U64Token : VerylToken;
/*  90 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : OwnedToken Comments;
/*  91 */ Identifier: IdentifierToken : VerylToken;
/*  92 */ Veryl: Start VerylList /* Vec */;
/*  93 */ VerylList /* Vec<T>::Push */: Description VerylList;
/*  94 */ VerylList /* Vec<T>::New */: ;
/*  95 */ Description: ModuleDeclaration;
/*  96 */ Description: InterfaceDeclaration;
/*  97 */ Number: IntegralNumber;
/*  98 */ Number: RealNumber;
/*  99 */ IntegralNumber: Based;
/* 100 */ IntegralNumber: BaseLess;
/* 101 */ IntegralNumber: AllBit;
/* 102 */ RealNumber: FixedPoint;
/* 103 */ RealNumber: Exponent;
/* 104 */ Expression: Expression1 ExpressionList /* Vec */;
/* 105 */ ExpressionList /* Vec<T>::Push */: ExpressionListGroup Expression1 ExpressionList;
/* 106 */ ExpressionListGroup: BinaryOperator;
/* 107 */ ExpressionListGroup: CommonOperator;
/* 108 */ ExpressionList /* Vec<T>::New */: ;
/* 109 */ Expression1: Expression1Opt /* Option */ Factor;
/* 110 */ Expression1Opt /* Option<T>::Some */: Expression1OptGroup;
/* 111 */ Expression1OptGroup: UnaryOperator;
/* 112 */ Expression1OptGroup: CommonOperator;
/* 113 */ Expression1Opt /* Option<T>::None */: ;
/* 114 */ Factor: Number;
/* 115 */ Factor: Identifier FactorList /* Vec */;
/* 116 */ FactorList /* Vec<T>::Push */: Range FactorList;
/* 117 */ FactorList /* Vec<T>::New */: ;
/* 118 */ Factor: LParen Expression RParen;
/* 119 */ Statement: AssignmentStatement;
/* 120 */ Statement: IfStatement;
/* 121 */ AssignmentStatement: Identifier Equ Expression Semicolon;
/* 122 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/* 123 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/* 124 */ IfStatementList /* Vec<T>::New */: ;
/* 125 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/* 126 */ IfStatementOpt /* Option<T>::None */: ;
/* 127 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 128 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/* 129 */ RangeOpt /* Option<T>::None */: ;
/* 130 */ Width: LBracket Expression RBracket;
/* 131 */ BuiltinType: Logic;
/* 132 */ BuiltinType: Bit;
/* 133 */ BuiltinType: U32;
/* 134 */ BuiltinType: U64;
/* 135 */ BuiltinType: I32;
/* 136 */ BuiltinType: I64;
/* 137 */ BuiltinType: F32;
/* 138 */ BuiltinType: F64;
/* 139 */ Type: TypeGroup TypeList /* Vec */;
/* 140 */ TypeGroup: BuiltinType;
/* 141 */ TypeGroup: Identifier;
/* 142 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 143 */ TypeList /* Vec<T>::New */: ;
/* 144 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 145 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 146 */ WithParameterOpt /* Option<T>::None */: ;
/* 147 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 148 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 149 */ WithParameterListList /* Vec<T>::New */: ;
/* 150 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 151 */ WithParameterListOpt /* Option<T>::None */: ;
/* 152 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 153 */ WithParameterItemGroup: Parameter;
/* 154 */ WithParameterItemGroup: Localparam;
/* 155 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 156 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 157 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 158 */ ModuleDeclarationOpt0 /* Option<T>::Some */: ModulePort;
/* 159 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 160 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 161 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 162 */ ModulePort: LParen ModulePortOpt /* Option */ RParen;
/* 163 */ ModulePortOpt /* Option<T>::Some */: ModulePortList;
/* 164 */ ModulePortOpt /* Option<T>::None */: ;
/* 165 */ ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
/* 166 */ ModulePortListList /* Vec<T>::Push */: Comma ModulePortItem ModulePortListList;
/* 167 */ ModulePortListList /* Vec<T>::New */: ;
/* 168 */ ModulePortListOpt /* Option<T>::Some */: Comma;
/* 169 */ ModulePortListOpt /* Option<T>::None */: ;
/* 170 */ ModulePortItem: Identifier Colon Direction Type;
/* 171 */ Direction: Input;
/* 172 */ Direction: Output;
/* 173 */ Direction: Inout;
/* 174 */ ModuleItem: VariableDeclaration;
/* 175 */ ModuleItem: ParameterDeclaration;
/* 176 */ ModuleItem: LocalparamDeclaration;
/* 177 */ ModuleItem: AlwaysFfDeclaration;
/* 178 */ ModuleItem: AlwaysCombDeclaration;
/* 179 */ ModuleItem: AssignDeclaration;
/* 180 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 181 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 182 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 183 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 184 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 185 */ InterfaceItem: VariableDeclaration;
/* 186 */ InterfaceItem: ParameterDeclaration;
/* 187 */ InterfaceItem: LocalparamDeclaration;
/* 188 */ InterfaceItem: ModportDeclaration;
/* 189 */ VariableDeclaration: Identifier Colon Type Semicolon;
/* 190 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 191 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 192 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfConditions RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 193 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 194 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 195 */ AlwaysFfConditions: AlwaysFfCondition AlwaysFfConditionsList /* Vec */ AlwaysFfConditionsOpt /* Option */;
/* 196 */ AlwaysFfConditionsList /* Vec<T>::Push */: Comma AlwaysFfCondition AlwaysFfConditionsList;
/* 197 */ AlwaysFfConditionsList /* Vec<T>::New */: ;
/* 198 */ AlwaysFfConditionsOpt /* Option<T>::Some */: Comma;
/* 199 */ AlwaysFfConditionsOpt /* Option<T>::None */: ;
/* 200 */ AlwaysFfCondition: AlwaysFfConditionGroup Identifier;
/* 201 */ AlwaysFfConditionGroup: Posedge;
/* 202 */ AlwaysFfConditionGroup: Negedge;
/* 203 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 204 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 205 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 206 */ AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
/* 207 */ AssignDeclarationOpt /* Option<T>::Some */: Colon Type;
/* 208 */ AssignDeclarationOpt /* Option<T>::None */: ;
/* 209 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 210 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 211 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 212 */ ModportListList /* Vec<T>::New */: ;
/* 213 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 214 */ ModportListOpt /* Option<T>::None */: ;
/* 215 */ ModportItem: Identifier Colon Direction;
