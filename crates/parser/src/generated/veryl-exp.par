%start Veryl
%title "Veryl grammar"
%comment "Empty grammar generated by `parol`"
%user_type OwnedToken = crate::veryl_token::OwnedToken
%user_type VerylToken = crate::veryl_token::VerylToken

%%

/*   0 */ MultiComment: "(?:(?:(?://.*(?:\r\n|\r|\n|$))|(?:(?ms)/\u{2a}.*?\u{2a}/))\s*)+" : OwnedToken;
/*   1 */ Comments: CommentsOpt /* Option */;
/*   2 */ CommentsOpt /* Option<T>::Some */: MultiComment;
/*   3 */ CommentsOpt /* Option<T>::None */: ;
/*   4 */ StartToken: Comments;
/*   5 */ Start: StartToken : VerylToken;
/*   6 */ ExponentToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*[eE][+-]?[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   7 */ FixedPointToken: /[0-9]+(?:_[0-9]+)*\.[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*   8 */ BasedBinaryToken: /[0-9]+(?:_[0-9]+)*'b[0-1xzXZ]+(?:_[0-1xzXZ]+)*/ : OwnedToken Comments;
/*   9 */ BasedOctalToken: /[0-9]+(?:_[0-9]+)*'o[0-7xzXZ]+(?:_[0-7xzXZ]+)*/ : OwnedToken Comments;
/*  10 */ BasedDecimalToken: /[0-9]+(?:_[0-9]+)*'d[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*  11 */ BasedHexToken: /[0-9]+(?:_[0-9]+)*'h[0-9a-fA-FxzXZ]+(?:_[0-9a-fA-FxzXZ]+)*/ : OwnedToken Comments;
/*  12 */ BaseLessToken: /[0-9]+(?:_[0-9]+)*/ : OwnedToken Comments;
/*  13 */ AllBitToken: /'[01]/ : OwnedToken Comments;
/*  14 */ Exponent: ExponentToken : VerylToken;
/*  15 */ FixedPoint: FixedPointToken : VerylToken;
/*  16 */ BasedBinary: BasedBinaryToken : VerylToken;
/*  17 */ BasedOctal: BasedOctalToken : VerylToken;
/*  18 */ BasedDecimal: BasedDecimalToken : VerylToken;
/*  19 */ BasedHex: BasedHexToken : VerylToken;
/*  20 */ BaseLess: BaseLessToken : VerylToken;
/*  21 */ AllBit: AllBitToken : VerylToken;
/*  22 */ BangEquEquToken: '!==' : OwnedToken Comments;
/*  23 */ BangEquQuestToken: '!=?' : OwnedToken Comments;
/*  24 */ EquEquEquToken: '===' : OwnedToken Comments;
/*  25 */ EquEquQuestToken: '==?' : OwnedToken Comments;
/*  26 */ GTGTGTToken: '>>>' : OwnedToken Comments;
/*  27 */ LTLTLTToken: '<<<' : OwnedToken Comments;
/*  28 */ BangEquEqu: BangEquEquToken : VerylToken;
/*  29 */ BangEquQuest: BangEquQuestToken : VerylToken;
/*  30 */ EquEquEqu: EquEquEquToken : VerylToken;
/*  31 */ EquEquQuest: EquEquQuestToken : VerylToken;
/*  32 */ GTGTGT: GTGTGTToken : VerylToken;
/*  33 */ LTLTLT: LTLTLTToken : VerylToken;
/*  34 */ AmpAmpToken: '&&' : OwnedToken Comments;
/*  35 */ CircumflexTildeToken: '^~' : OwnedToken Comments;
/*  36 */ BangEquToken: '!=' : OwnedToken Comments;
/*  37 */ EquEquToken: '==' : OwnedToken Comments;
/*  38 */ GTEquToken: '>=' : OwnedToken Comments;
/*  39 */ GTGTToken: '>>' : OwnedToken Comments;
/*  40 */ LTEquToken: '<=' : OwnedToken Comments;
/*  41 */ LTLTToken: '<<' : OwnedToken Comments;
/*  42 */ OrOrToken: '||' : OwnedToken Comments;
/*  43 */ StarStarToken: '**' : OwnedToken Comments;
/*  44 */ TildeAmpToken: '~&' : OwnedToken Comments;
/*  45 */ TildeCircumflexToken: '~^' : OwnedToken Comments;
/*  46 */ TildeOrToken: '~|' : OwnedToken Comments;
/*  47 */ AmpAmp: AmpAmpToken : VerylToken;
/*  48 */ CircumflexTilde: CircumflexTildeToken : VerylToken;
/*  49 */ BangEqu: BangEquToken : VerylToken;
/*  50 */ EquEqu: EquEquToken : VerylToken;
/*  51 */ GTEqu: GTEquToken : VerylToken;
/*  52 */ GTGT: GTGTToken : VerylToken;
/*  53 */ LTEqu: LTEquToken : VerylToken;
/*  54 */ LTLT: LTLTToken : VerylToken;
/*  55 */ OrOr: OrOrToken : VerylToken;
/*  56 */ StarStar: StarStarToken : VerylToken;
/*  57 */ TildeAmp: TildeAmpToken : VerylToken;
/*  58 */ TildeCircumflex: TildeCircumflexToken : VerylToken;
/*  59 */ TildeOr: TildeOrToken : VerylToken;
/*  60 */ AmpToken: '&' : OwnedToken Comments;
/*  61 */ BangToken: '!' : OwnedToken Comments;
/*  62 */ ColonToken: ':' : OwnedToken Comments;
/*  63 */ CommaToken: ',' : OwnedToken Comments;
/*  64 */ CircumflexToken: '^' : OwnedToken Comments;
/*  65 */ EquToken: '=' : OwnedToken Comments;
/*  66 */ GTToken: '>' : OwnedToken Comments;
/*  67 */ HashToken: '#' : OwnedToken Comments;
/*  68 */ LBraceToken: '{' : OwnedToken Comments;
/*  69 */ LBracketToken: '[' : OwnedToken Comments;
/*  70 */ LParenToken: '(' : OwnedToken Comments;
/*  71 */ LTToken: '<' : OwnedToken Comments;
/*  72 */ MinusToken: '-' : OwnedToken Comments;
/*  73 */ OrToken: '|' : OwnedToken Comments;
/*  74 */ PercentToken: '%' : OwnedToken Comments;
/*  75 */ PlusToken: '+' : OwnedToken Comments;
/*  76 */ RBraceToken: '}' : OwnedToken Comments;
/*  77 */ RBracketToken: ']' : OwnedToken Comments;
/*  78 */ RParenToken: ')' : OwnedToken Comments;
/*  79 */ SemicolonToken: ';' : OwnedToken Comments;
/*  80 */ SlashToken: '/' : OwnedToken Comments;
/*  81 */ StarToken: '*' : OwnedToken Comments;
/*  82 */ TildeToken: '~' : OwnedToken Comments;
/*  83 */ Amp: AmpToken : VerylToken;
/*  84 */ Bang: BangToken : VerylToken;
/*  85 */ Circumflex: CircumflexToken : VerylToken;
/*  86 */ Colon: ColonToken : VerylToken;
/*  87 */ Comma: CommaToken : VerylToken;
/*  88 */ Equ: EquToken : VerylToken;
/*  89 */ GT: GTToken : VerylToken;
/*  90 */ Hash: HashToken : VerylToken;
/*  91 */ LBrace: LBraceToken : VerylToken;
/*  92 */ LBracket: LBracketToken : VerylToken;
/*  93 */ LParen: LParenToken : VerylToken;
/*  94 */ LT: LTToken : VerylToken;
/*  95 */ Minus: MinusToken : VerylToken;
/*  96 */ Or: OrToken : VerylToken;
/*  97 */ Percent: PercentToken : VerylToken;
/*  98 */ Plus: PlusToken : VerylToken;
/*  99 */ RBrace: RBraceToken : VerylToken;
/* 100 */ RBracket: RBracketToken : VerylToken;
/* 101 */ RParen: RParenToken : VerylToken;
/* 102 */ Semicolon: SemicolonToken : VerylToken;
/* 103 */ Slash: SlashToken : VerylToken;
/* 104 */ Star: StarToken : VerylToken;
/* 105 */ Tilde: TildeToken : VerylToken;
/* 106 */ AlwaysCombToken: 'always_comb' : OwnedToken Comments;
/* 107 */ AlwaysFfToken: 'always_ff' : OwnedToken Comments;
/* 108 */ AssignToken: 'assign' : OwnedToken Comments;
/* 109 */ BitToken: 'bit' : OwnedToken Comments;
/* 110 */ ElseToken: 'else' : OwnedToken Comments;
/* 111 */ F32Token: 'f32' : OwnedToken Comments;
/* 112 */ F64Token: 'f64' : OwnedToken Comments;
/* 113 */ I32Token: 'i32' : OwnedToken Comments;
/* 114 */ I64Token: 'i64' : OwnedToken Comments;
/* 115 */ IfToken: 'if' : OwnedToken Comments;
/* 116 */ InoutToken: 'inout' : OwnedToken Comments;
/* 117 */ InputToken: 'input' : OwnedToken Comments;
/* 118 */ InterfaceToken: 'interface' : OwnedToken Comments;
/* 119 */ LocalparamToken: 'localparam' : OwnedToken Comments;
/* 120 */ LogicToken: 'logic' : OwnedToken Comments;
/* 121 */ ModportToken: 'modport' : OwnedToken Comments;
/* 122 */ ModuleToken: 'module' : OwnedToken Comments;
/* 123 */ NegedgeToken: 'negedge' : OwnedToken Comments;
/* 124 */ OutputToken: 'output' : OwnedToken Comments;
/* 125 */ ParameterToken: 'parameter' : OwnedToken Comments;
/* 126 */ PosedgeToken: 'posedge' : OwnedToken Comments;
/* 127 */ U32Token: 'u32' : OwnedToken Comments;
/* 128 */ U64Token: 'u64' : OwnedToken Comments;
/* 129 */ AlwaysComb: AlwaysCombToken : VerylToken;
/* 130 */ AlwaysFf: AlwaysFfToken : VerylToken;
/* 131 */ Assign: AssignToken : VerylToken;
/* 132 */ Bit: BitToken : VerylToken;
/* 133 */ Else: ElseToken : VerylToken;
/* 134 */ F32: F32Token : VerylToken;
/* 135 */ F64: F64Token : VerylToken;
/* 136 */ I32: I32Token : VerylToken;
/* 137 */ I64: I64Token : VerylToken;
/* 138 */ If: IfToken : VerylToken;
/* 139 */ Inout: InoutToken : VerylToken;
/* 140 */ Input: InputToken : VerylToken;
/* 141 */ Interface: InterfaceToken : VerylToken;
/* 142 */ Localparam: LocalparamToken : VerylToken;
/* 143 */ Logic: LogicToken : VerylToken;
/* 144 */ Modport: ModportToken : VerylToken;
/* 145 */ Module: ModuleToken : VerylToken;
/* 146 */ Negedge: NegedgeToken : VerylToken;
/* 147 */ Output: OutputToken : VerylToken;
/* 148 */ Parameter: ParameterToken : VerylToken;
/* 149 */ Posedge: PosedgeToken : VerylToken;
/* 150 */ U32: U32Token : VerylToken;
/* 151 */ U64: U64Token : VerylToken;
/* 152 */ IdentifierToken: /[a-zA-Z_][0-9a-zA-Z_]*/ : OwnedToken Comments;
/* 153 */ Identifier: IdentifierToken : VerylToken;
/* 154 */ Veryl: Start VerylList /* Vec */;
/* 155 */ VerylList /* Vec<T>::Push */: Description VerylList;
/* 156 */ VerylList /* Vec<T>::New */: ;
/* 157 */ Description: ModuleDeclaration;
/* 158 */ Description: InterfaceDeclaration;
/* 159 */ Number: IntegralNumber;
/* 160 */ Number: RealNumber;
/* 161 */ IntegralNumber: BasedBinary;
/* 162 */ IntegralNumber: BasedOctal;
/* 163 */ IntegralNumber: BasedDecimal;
/* 164 */ IntegralNumber: BasedHex;
/* 165 */ IntegralNumber: BaseLess;
/* 166 */ IntegralNumber: AllBit;
/* 167 */ RealNumber: FixedPoint;
/* 168 */ RealNumber: Exponent;
/* 169 */ OperatorPrecedence01: OrOr;
/* 170 */ OperatorPrecedence02: AmpAmp;
/* 171 */ OperatorPrecedence03: Or;
/* 172 */ OperatorPrecedence04: Circumflex;
/* 173 */ OperatorPrecedence04: TildeCircumflex;
/* 174 */ OperatorPrecedence04: CircumflexTilde;
/* 175 */ OperatorPrecedence05: Amp;
/* 176 */ OperatorPrecedence06: EquEqu;
/* 177 */ OperatorPrecedence06: BangEqu;
/* 178 */ OperatorPrecedence06: EquEquEqu;
/* 179 */ OperatorPrecedence06: BangEquEqu;
/* 180 */ OperatorPrecedence06: EquEquQuest;
/* 181 */ OperatorPrecedence06: BangEquQuest;
/* 182 */ OperatorPrecedence07: LT;
/* 183 */ OperatorPrecedence07: LTEqu;
/* 184 */ OperatorPrecedence07: GT;
/* 185 */ OperatorPrecedence07: GTEqu;
/* 186 */ OperatorPrecedence08: LTLT;
/* 187 */ OperatorPrecedence08: GTGT;
/* 188 */ OperatorPrecedence08: LTLTLT;
/* 189 */ OperatorPrecedence08: GTGTGT;
/* 190 */ OperatorPrecedence09: Plus;
/* 191 */ OperatorPrecedence09: Minus;
/* 192 */ OperatorPrecedence10: Star;
/* 193 */ OperatorPrecedence10: Slash;
/* 194 */ OperatorPrecedence10: Percent;
/* 195 */ OperatorPrecedence11: StarStar;
/* 196 */ OperatorPrecedence12: Plus;
/* 197 */ OperatorPrecedence12: Minus;
/* 198 */ OperatorPrecedence12: Bang;
/* 199 */ OperatorPrecedence12: Tilde;
/* 200 */ OperatorPrecedence12: Amp;
/* 201 */ OperatorPrecedence12: Or;
/* 202 */ OperatorPrecedence12: Circumflex;
/* 203 */ OperatorPrecedence12: TildeAmp;
/* 204 */ OperatorPrecedence12: TildeOr;
/* 205 */ OperatorPrecedence12: TildeCircumflex;
/* 206 */ OperatorPrecedence12: CircumflexTilde;
/* 207 */ Expression: Expression00;
/* 208 */ Expression00: Expression01 Expression00List /* Vec */;
/* 209 */ Expression00List /* Vec<T>::Push */: OperatorPrecedence01 Expression01 Expression00List;
/* 210 */ Expression00List /* Vec<T>::New */: ;
/* 211 */ Expression01: Expression02 Expression01List /* Vec */;
/* 212 */ Expression01List /* Vec<T>::Push */: OperatorPrecedence02 Expression02 Expression01List;
/* 213 */ Expression01List /* Vec<T>::New */: ;
/* 214 */ Expression02: Expression03 Expression02List /* Vec */;
/* 215 */ Expression02List /* Vec<T>::Push */: OperatorPrecedence03 Expression03 Expression02List;
/* 216 */ Expression02List /* Vec<T>::New */: ;
/* 217 */ Expression03: Expression04 Expression03List /* Vec */;
/* 218 */ Expression03List /* Vec<T>::Push */: OperatorPrecedence04 Expression04 Expression03List;
/* 219 */ Expression03List /* Vec<T>::New */: ;
/* 220 */ Expression04: Expression05 Expression04List /* Vec */;
/* 221 */ Expression04List /* Vec<T>::Push */: OperatorPrecedence05 Expression05 Expression04List;
/* 222 */ Expression04List /* Vec<T>::New */: ;
/* 223 */ Expression05: Expression06 Expression05List /* Vec */;
/* 224 */ Expression05List /* Vec<T>::Push */: OperatorPrecedence06 Expression06 Expression05List;
/* 225 */ Expression05List /* Vec<T>::New */: ;
/* 226 */ Expression06: Expression07 Expression06List /* Vec */;
/* 227 */ Expression06List /* Vec<T>::Push */: OperatorPrecedence07 Expression07 Expression06List;
/* 228 */ Expression06List /* Vec<T>::New */: ;
/* 229 */ Expression07: Expression08 Expression07List /* Vec */;
/* 230 */ Expression07List /* Vec<T>::Push */: OperatorPrecedence08 Expression08 Expression07List;
/* 231 */ Expression07List /* Vec<T>::New */: ;
/* 232 */ Expression08: Expression09 Expression08List /* Vec */;
/* 233 */ Expression08List /* Vec<T>::Push */: OperatorPrecedence09 Expression09 Expression08List;
/* 234 */ Expression08List /* Vec<T>::New */: ;
/* 235 */ Expression09: Expression10 Expression09List /* Vec */;
/* 236 */ Expression09List /* Vec<T>::Push */: OperatorPrecedence10 Expression10 Expression09List;
/* 237 */ Expression09List /* Vec<T>::New */: ;
/* 238 */ Expression10: Expression11 Expression10List /* Vec */;
/* 239 */ Expression10List /* Vec<T>::Push */: OperatorPrecedence11 Expression11 Expression10List;
/* 240 */ Expression10List /* Vec<T>::New */: ;
/* 241 */ Expression11: Expression11Opt /* Option */ Expression12;
/* 242 */ Expression11Opt /* Option<T>::Some */: OperatorPrecedence12;
/* 243 */ Expression11Opt /* Option<T>::None */: ;
/* 244 */ Expression12: Factor;
/* 245 */ Factor: Number;
/* 246 */ Factor: Identifier FactorList /* Vec */;
/* 247 */ FactorList /* Vec<T>::Push */: Range FactorList;
/* 248 */ FactorList /* Vec<T>::New */: ;
/* 249 */ Factor: LParen Expression RParen;
/* 250 */ Statement: AssignmentStatement;
/* 251 */ Statement: IfStatement;
/* 252 */ AssignmentStatement: Identifier Equ Expression Semicolon;
/* 253 */ IfStatement: If Expression LBrace Statement RBrace IfStatementList /* Vec */ IfStatementOpt /* Option */;
/* 254 */ IfStatementList /* Vec<T>::Push */: Else If Expression LBrace Statement RBrace IfStatementList;
/* 255 */ IfStatementList /* Vec<T>::New */: ;
/* 256 */ IfStatementOpt /* Option<T>::Some */: Else LBrace Statement RBrace;
/* 257 */ IfStatementOpt /* Option<T>::None */: ;
/* 258 */ Range: LBracket Expression RangeOpt /* Option */ RBracket;
/* 259 */ RangeOpt /* Option<T>::Some */: Colon Expression;
/* 260 */ RangeOpt /* Option<T>::None */: ;
/* 261 */ Width: LBracket Expression RBracket;
/* 262 */ BuiltinType: Logic;
/* 263 */ BuiltinType: Bit;
/* 264 */ BuiltinType: U32;
/* 265 */ BuiltinType: U64;
/* 266 */ BuiltinType: I32;
/* 267 */ BuiltinType: I64;
/* 268 */ BuiltinType: F32;
/* 269 */ BuiltinType: F64;
/* 270 */ Type: TypeGroup TypeList /* Vec */;
/* 271 */ TypeGroup: BuiltinType;
/* 272 */ TypeGroup: Identifier;
/* 273 */ TypeList /* Vec<T>::Push */: Width TypeList;
/* 274 */ TypeList /* Vec<T>::New */: ;
/* 275 */ WithParameter: Hash LParen WithParameterOpt /* Option */ RParen;
/* 276 */ WithParameterOpt /* Option<T>::Some */: WithParameterList;
/* 277 */ WithParameterOpt /* Option<T>::None */: ;
/* 278 */ WithParameterList: WithParameterItem WithParameterListList /* Vec */ WithParameterListOpt /* Option */;
/* 279 */ WithParameterListList /* Vec<T>::Push */: Comma WithParameterItem WithParameterListList;
/* 280 */ WithParameterListList /* Vec<T>::New */: ;
/* 281 */ WithParameterListOpt /* Option<T>::Some */: Comma;
/* 282 */ WithParameterListOpt /* Option<T>::None */: ;
/* 283 */ WithParameterItem: WithParameterItemGroup Identifier Colon Type Equ Expression;
/* 284 */ WithParameterItemGroup: Parameter;
/* 285 */ WithParameterItemGroup: Localparam;
/* 286 */ ModuleDeclaration: Module Identifier ModuleDeclarationOpt /* Option */ ModuleDeclarationOpt0 /* Option */ LBrace ModuleDeclarationList /* Vec */ RBrace;
/* 287 */ ModuleDeclarationList /* Vec<T>::Push */: ModuleItem ModuleDeclarationList;
/* 288 */ ModuleDeclarationList /* Vec<T>::New */: ;
/* 289 */ ModuleDeclarationOpt0 /* Option<T>::Some */: ModulePort;
/* 290 */ ModuleDeclarationOpt0 /* Option<T>::None */: ;
/* 291 */ ModuleDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 292 */ ModuleDeclarationOpt /* Option<T>::None */: ;
/* 293 */ ModulePort: LParen ModulePortOpt /* Option */ RParen;
/* 294 */ ModulePortOpt /* Option<T>::Some */: ModulePortList;
/* 295 */ ModulePortOpt /* Option<T>::None */: ;
/* 296 */ ModulePortList: ModulePortItem ModulePortListList /* Vec */ ModulePortListOpt /* Option */;
/* 297 */ ModulePortListList /* Vec<T>::Push */: Comma ModulePortItem ModulePortListList;
/* 298 */ ModulePortListList /* Vec<T>::New */: ;
/* 299 */ ModulePortListOpt /* Option<T>::Some */: Comma;
/* 300 */ ModulePortListOpt /* Option<T>::None */: ;
/* 301 */ ModulePortItem: Identifier Colon Direction Type;
/* 302 */ Direction: Input;
/* 303 */ Direction: Output;
/* 304 */ Direction: Inout;
/* 305 */ ModuleItem: VariableDeclaration;
/* 306 */ ModuleItem: ParameterDeclaration;
/* 307 */ ModuleItem: LocalparamDeclaration;
/* 308 */ ModuleItem: AlwaysFfDeclaration;
/* 309 */ ModuleItem: AlwaysCombDeclaration;
/* 310 */ ModuleItem: AssignDeclaration;
/* 311 */ InterfaceDeclaration: Interface Identifier InterfaceDeclarationOpt /* Option */ LBrace InterfaceDeclarationList /* Vec */ RBrace;
/* 312 */ InterfaceDeclarationList /* Vec<T>::Push */: InterfaceItem InterfaceDeclarationList;
/* 313 */ InterfaceDeclarationList /* Vec<T>::New */: ;
/* 314 */ InterfaceDeclarationOpt /* Option<T>::Some */: WithParameter;
/* 315 */ InterfaceDeclarationOpt /* Option<T>::None */: ;
/* 316 */ InterfaceItem: VariableDeclaration;
/* 317 */ InterfaceItem: ParameterDeclaration;
/* 318 */ InterfaceItem: LocalparamDeclaration;
/* 319 */ InterfaceItem: ModportDeclaration;
/* 320 */ VariableDeclaration: Identifier Colon Type Semicolon;
/* 321 */ ParameterDeclaration: Parameter Identifier Colon Type Equ Expression Semicolon;
/* 322 */ LocalparamDeclaration: Localparam Identifier Colon Type Equ Expression Semicolon;
/* 323 */ AlwaysFfDeclaration: AlwaysFf LParen AlwaysFfConditions RParen LBrace AlwaysFfDeclarationList /* Vec */ RBrace;
/* 324 */ AlwaysFfDeclarationList /* Vec<T>::Push */: Statement AlwaysFfDeclarationList;
/* 325 */ AlwaysFfDeclarationList /* Vec<T>::New */: ;
/* 326 */ AlwaysFfConditions: AlwaysFfCondition AlwaysFfConditionsList /* Vec */ AlwaysFfConditionsOpt /* Option */;
/* 327 */ AlwaysFfConditionsList /* Vec<T>::Push */: Comma AlwaysFfCondition AlwaysFfConditionsList;
/* 328 */ AlwaysFfConditionsList /* Vec<T>::New */: ;
/* 329 */ AlwaysFfConditionsOpt /* Option<T>::Some */: Comma;
/* 330 */ AlwaysFfConditionsOpt /* Option<T>::None */: ;
/* 331 */ AlwaysFfCondition: AlwaysFfConditionGroup Identifier;
/* 332 */ AlwaysFfConditionGroup: Posedge;
/* 333 */ AlwaysFfConditionGroup: Negedge;
/* 334 */ AlwaysCombDeclaration: AlwaysComb LBrace AlwaysCombDeclarationList /* Vec */ RBrace;
/* 335 */ AlwaysCombDeclarationList /* Vec<T>::Push */: Statement AlwaysCombDeclarationList;
/* 336 */ AlwaysCombDeclarationList /* Vec<T>::New */: ;
/* 337 */ AssignDeclaration: Assign Identifier AssignDeclarationOpt /* Option */ Equ Expression Semicolon;
/* 338 */ AssignDeclarationOpt /* Option<T>::Some */: Colon Type;
/* 339 */ AssignDeclarationOpt /* Option<T>::None */: ;
/* 340 */ ModportDeclaration: Modport Identifier LBrace ModportList RBrace;
/* 341 */ ModportList: ModportItem ModportListList /* Vec */ ModportListOpt /* Option */;
/* 342 */ ModportListList /* Vec<T>::Push */: Comma ModportItem ModportListList;
/* 343 */ ModportListList /* Vec<T>::New */: ;
/* 344 */ ModportListOpt /* Option<T>::Some */: Comma;
/* 345 */ ModportListOpt /* Option<T>::None */: ;
/* 346 */ ModportItem: Identifier Colon Direction;
